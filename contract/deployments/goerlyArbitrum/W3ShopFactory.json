{
  "address": "0xdf457d319AB510A336EAf5c2a0716877dCAce585",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "shop",
          "type": "address"
        }
      ],
      "name": "Created",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_paymentProcessor",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_shopConfig",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_ownerNftId",
          "type": "string"
        },
        {
          "internalType": "bytes32",
          "name": "_salt",
          "type": "bytes32"
        }
      ],
      "name": "createShop",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_shop",
          "type": "address"
        }
      ],
      "name": "isRegisteredShop",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "shopItems",
      "outputs": [
        {
          "internalType": "contract W3ShopItems",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x8622b290a42571d4ab86117bdd2b21952e82bbbba42848e5114734f44494af11",
  "receipt": {
    "to": null,
    "from": "0x3406c6878676A9f7F5F015821bDc477E3b804FB3",
    "contractAddress": "0xdf457d319AB510A336EAf5c2a0716877dCAce585",
    "transactionIndex": 1,
    "gasUsed": "6950298",
    "logsBloom": "0x
    "blockHash": "0x838e8343691453a565806ec25c0f59e94b05100eaca1b6ff802b93e7b91601b2",
    "transactionHash": "0x8622b290a42571d4ab86117bdd2b21952e82bbbba42848e5114734f44494af11",
    "logs": [],
    "blockNumber": 538777,
    "cumulativeGasUsed": "6950298",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "55e56e047340f026918b31707321d9b6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"shop\",\"type\":\"address\"}],\"name\":\"Created\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_paymentProcessor\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_shopConfig\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_ownerNftId\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"_salt\",\"type\":\"bytes32\"}],\"name\":\"createShop\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_shop\",\"type\":\"address\"}],\"name\":\"isRegisteredShop\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shopItems\",\"outputs\":[{\"internalType\":\"contract W3ShopItems\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"This factory builds your shops and also registers the new shops to be used with the shop item registry.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/W3ShopFactory.sol\":\"W3ShopFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), _asSingletonArray(id), _asSingletonArray(amount), \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0x04d6d1342ece664085921a4fabc928a7bcf1cf2873fa81780f61a54dc2b9b66e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8e93de94c9062ebc94fb7e2e3929b0781ac6a2b7772e2f7a59045861c93e5be9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/MerkleMultiProof.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\n/**\\n * @author Ricardo Guilherme Schmidt (Status Research & Development GmbH)\\n * @notice based on https://github.com/ethereum/eth2.0-specs/blob/dev/ssz/merkle-proofs.md#merkle-multiproofs but without generalized indexes\\n * Source: https://github.com/miguelmota/merkletreejs-multiproof-solidity MIT License\\n */\\nlibrary MerkleMultiProof {\\n    /**\\n     * @notice Calculates a merkle root using multiple leafs at same time\\n     * @param leafs out of order sequence of leafs and it's siblings\\n     * @param proofs out of order sequence of parent proofs\\n     * @param proofFlag flags for using or not proofs while hashing against hashes.\\n     * @return merkleRoot of tree\\n     */\\n    function calculateMultiMerkleRoot(\\n        bytes32[] memory leafs,\\n        bytes32[] memory proofs,\\n        bool[] memory proofFlag\\n    ) private pure returns (bytes32 merkleRoot) {\\n        uint256 leafsLen = leafs.length;\\n        uint256 totalHashes = proofFlag.length;\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            hashes[i] = hashPair(\\n                proofFlag[i]\\n                    ? (\\n                        leafPos < leafsLen\\n                            ? leafs[leafPos++]\\n                            : hashes[hashPos++]\\n                    )\\n                    : proofs[proofPos++],\\n                leafPos < leafsLen ? leafs[leafPos++] : hashes[hashPos++]\\n            );\\n        }\\n\\n        return hashes[totalHashes - 1];\\n    }\\n\\n    function hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? hash_node(a, b) : hash_node(b, a);\\n    }\\n\\n    function hash_node(bytes32 left, bytes32 right)\\n        private\\n        pure\\n        returns (bytes32 hash)\\n    {\\n        assembly {\\n            mstore(0x00, left)\\n            mstore(0x20, right)\\n            hash := keccak256(0x00, 0x40)\\n        }\\n        return hash;\\n    }\\n\\n    /**\\n     * @notice Check validity of multimerkle proof\\n     * @param root merkle root\\n     * @param leafs out of order sequence of leafs and it's siblings\\n     * @param proofs out of order sequence of parent proofs\\n     * @param proofFlag flags for using or not proofs while hashing against hashes.\\n     */\\n    function verify(\\n        bytes32 root,\\n        bytes32[] memory leafs,\\n        bytes32[] memory proofs,\\n        bool[] memory proofFlag\\n    ) public pure returns (bool) {\\n        return calculateMultiMerkleRoot(leafs, proofs, proofFlag) == root;\\n    }\\n}\\n\",\"keccak256\":\"0xb3127be0f432dfa96c2049a115dfc7aac0cb7628a7960cb8b5e42edbe85b4bf2\",\"license\":\"MIT\"},\"contracts/W3Shop.sol\":{\"content\":\"//SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"./MerkleMultiProof.sol\\\";\\nimport \\\"./W3ShopItems.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract W3Shop {\\n    using SafeERC20 for IERC20;\\n\\n    event NewShopItems(uint256[] ids);\\n\\n    W3ShopItems private immutable shopItems;\\n    address private constant CURRENCY_ETH = address(0);\\n\\n    address public paymentProcessor;\\n\\n    /**\\n     * ERC20 compatible token as accepted currency. Or the 0 address if\\n     * Ether is accepted.\\n     */\\n    address public acceptedCurrency = CURRENCY_ETH;\\n\\n    bytes32 public itemsRoot;\\n    string public shopConfig;\\n    uint256[] public bufferedItemIds = new uint256[](5);\\n\\n    mapping(uint256 => bool) private existingShopItems;\\n\\n    bool private isOpened = true;\\n    uint256 public ownerTokenId;\\n\\n    modifier onlyShopOwner() {\\n        require(shopItems.balanceOf(msg.sender, ownerTokenId) > 0, \\\"not owner\\\");\\n        _;\\n    }\\n\\n    modifier isShopOpen() {\\n        require(isOpened, \\\"shop closed\\\");\\n        _;\\n    }\\n\\n    modifier onlyPaymentProcessor() {\\n        require(msg.sender == paymentProcessor, \\\"only processor\\\");\\n        _;\\n    }\\n\\n    constructor(\\n        address _paymentProcessor,\\n        W3ShopItems _shopItems,\\n        string memory _shopConfig\\n    ) {\\n        paymentProcessor = _paymentProcessor;\\n        shopConfig = _shopConfig;\\n        shopItems = _shopItems;\\n    }\\n\\n    /**\\n     * Inside here we are now a registered shop and can interact with the\\n     * ShopItems contract.\\n     *\\n     * _ownerNftId: The Arweave file ID of the shop owner NFT.\\n     */\\n    function mintOwnerNft(address _owner, string calldata _ownerNftId)\\n        external\\n    {\\n        require(ownerTokenId == 0);\\n\\n        // Prepare the initial item ids after we are a registered shop\\n        prepareItems(5);\\n\\n        string[] memory callNftId = new string[](1);\\n        callNftId[0] = _ownerNftId;\\n\\n        uint256[] memory itemIds = new uint256[](1);\\n        ownerTokenId = bufferedItemIds[0];\\n        itemIds[0] = ownerTokenId;\\n\\n        uint256[] memory callAmounts = new uint256[](1);\\n        callAmounts[0] = 1;\\n\\n        shopItems.setItemUris(itemIds, callNftId);\\n        shopItems.mint(_owner, itemIds, callAmounts);\\n        prepareItems(1);\\n    }\\n\\n    function prepareItems(uint8 _itemCount) internal {\\n        assert(_itemCount > 0 && _itemCount <= 5);\\n\\n        uint256[] memory itemIds = shopItems.prepareItems(_itemCount);\\n        for (uint256 i = 0; i < _itemCount; i++) {\\n            bufferedItemIds[i] = itemIds[i];\\n        }\\n    }\\n\\n    function setItemUris(string[] calldata _uris)\\n        external\\n        isShopOpen\\n        onlyShopOwner\\n    {\\n        require(_uris.length <= 5 && _uris.length > 0, \\\"invalid uri count\\\");\\n\\n        uint256[] memory ids = new uint256[](_uris.length);\\n        for (uint256 i = 0; i < _uris.length; i++) {\\n            uint256 itemId = bufferedItemIds[i];\\n            require(itemId != ownerTokenId, \\\"no owner id\\\");\\n            ids[i] = itemId;\\n            existingShopItems[itemId] = true;\\n        }\\n\\n        shopItems.setItemUris(ids, _uris);\\n        prepareItems(uint8(_uris.length));\\n\\n        emit NewShopItems(ids);\\n    }\\n\\n    function setConfig(string memory _shopConfig)\\n        public\\n        isShopOpen\\n        onlyShopOwner\\n    {\\n        shopConfig = _shopConfig;\\n    }\\n\\n    function setConfigRoot(string memory _shopConfig, bytes32 _itemsRoot)\\n        public\\n        isShopOpen\\n        onlyShopOwner\\n    {\\n        shopConfig = _shopConfig;\\n        itemsRoot = _itemsRoot;\\n    }\\n\\n    function setPaymentProcessor(address _paymentProcessor)\\n        public\\n        isShopOpen\\n        onlyShopOwner\\n    {\\n        paymentProcessor = _paymentProcessor;\\n    }\\n\\n    function setItemsRoot(bytes32 _itemsRoot) public isShopOpen onlyShopOwner {\\n        itemsRoot = _itemsRoot;\\n    }\\n\\n    /**\\n     * This function requires the bought items and collections with their prices.\\n     * It checks if the given prices are correct to the anchored Merkle root and\\n     * checks if the amount of ETH send equals the required payment.\\n     * If this works it will batch mint the owner NFTs.\\n     */\\n    function buy(\\n        address _receiver,\\n        uint256[] calldata _amounts,\\n        uint256[] calldata _itemIds\\n    ) external isShopOpen onlyPaymentProcessor {\\n        require(_amounts.length == _itemIds.length);\\n\\n        for (uint256 i = 0; i < _itemIds.length; i++) {\\n            // Check if every item is actually owned by this shop.\\n            // The owner item is not an existing shop item! So this also prevents\\n            // minting additional owner tokens\\n            require(existingShopItems[_itemIds[i]], \\\"item non-exist\\\");\\n        }\\n\\n        shopItems.mint(_receiver, _itemIds, _amounts);\\n    }\\n\\n    function cashout(address _receiver) public isShopOpen onlyShopOwner {\\n        if (acceptedCurrency == CURRENCY_ETH) {\\n            // ETH was used for now, so empty the current ETH.\\n            payable(_receiver).transfer(address(this).balance);\\n        } else {\\n            IERC20 token = IERC20(acceptedCurrency);\\n            uint256 shopBalance = token.balanceOf(address(this));\\n            token.safeTransfer(_receiver, shopBalance);\\n        }\\n    }\\n\\n    function closeShop(address _receiver) external isShopOpen onlyShopOwner {\\n        cashout(_receiver);\\n        shopItems.burn(msg.sender, ownerTokenId, 1);\\n        isOpened = false;\\n    }\\n\\n    function setAcceptedCurrency(address _receiver, address _desiredERC20)\\n        public\\n        isShopOpen\\n        onlyShopOwner\\n    {\\n        cashout(_receiver);\\n        acceptedCurrency = _desiredERC20;\\n    }\\n\\n    /**\\n     * Function used to receive ETH in case this is the desired currency.\\n     * Look deeper into this here https://blog.soliditylang.org/2020/03/26/fallback-receive-split/\\n     */\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0xabb0836dcb1497006f1c6ad1a96f7dbd1b9874c6699dcc5ef1fb8d65f0556d6d\",\"license\":\"GPL-3.0\"},\"contracts/W3ShopFactory.sol\":{\"content\":\"//SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport \\\"hardhat/console.sol\\\";\\nimport \\\"./W3Shop.sol\\\";\\nimport \\\"./W3ShopItems.sol\\\";\\n\\n/**\\n * This factory builds your shops and also registers the new shops to be used with the\\n * shop item registry.\\n */\\ncontract W3ShopFactory {\\n    event Created(address indexed owner, address shop);\\n\\n    mapping(address => bool) private registeredShop;\\n    W3ShopItems public immutable shopItems;\\n\\n    constructor() {\\n        shopItems = new W3ShopItems(this);\\n    }\\n\\n    function createShop(\\n        address _owner,\\n        address _paymentProcessor,\\n        string calldata _shopConfig,\\n        string calldata _ownerNftId,\\n        bytes32 _salt\\n    ) external returns (address) {\\n        W3Shop shop = new W3Shop{salt: _salt}(_paymentProcessor, shopItems, _shopConfig);\\n        registeredShop[address(shop)] = true;\\n        shop.mintOwnerNft(_owner, _ownerNftId);\\n\\n        emit Created(_owner, address(shop));\\n\\n        return address(shop);\\n    }\\n\\n    function isRegisteredShop(address _shop) external view returns (bool) {\\n        return registeredShop[_shop];\\n    }\\n}\\n\",\"keccak256\":\"0x7386ac11cd570e458fbf6e5f77e5844e6cb1adc2d93e682cbeac8313f977578d\",\"license\":\"GPL-3.0\"},\"contracts/W3ShopItems.sol\":{\"content\":\"//SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"./W3ShopFactory.sol\\\";\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract W3ShopItems is ERC1155 {\\n    using Counters for Counters.Counter;\\n\\n    event Bought(address indexed buyer, address indexed shop, uint256[] items);\\n\\n    Counters.Counter private nextTokenId;\\n    W3ShopFactory private shopFactory;\\n\\n    // Token ID to custom URI mapping\\n    mapping(uint256 => string) private uris;\\n\\n    modifier onlyRegisteredShop() {\\n        require(shopFactory.isRegisteredShop(msg.sender), \\\"not shop\\\");\\n        _;\\n    }\\n\\n    constructor(W3ShopFactory _factory) ERC1155(\\\"\\\") {\\n        shopFactory = _factory;\\n        // We must start with 1 as 0 has a special meaning for token IDs.\\n        nextTokenId.increment();\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256 id)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (string memory)\\n    {\\n        return uris[id];\\n    }\\n\\n    /**\\n     * Shops can use this method to register new items for selling inside this contract.\\n     */\\n    function prepareItems(uint8 n)\\n        external\\n        onlyRegisteredShop\\n        returns (uint256[] memory)\\n    {\\n        require(n <= 10);\\n        uint256[] memory createdIds = new uint256[](n);\\n\\n        for (uint256 i = 0; i < n; i++) {\\n            createdIds[i] = nextTokenId.current();\\n            nextTokenId.increment();\\n        }\\n\\n        return createdIds;\\n    }\\n\\n    /**\\n     * Shops can use this method to register new items for selling inside this contract.\\n     */\\n    function setItemUris(uint256[] calldata _ids, string[] memory _uris)\\n        external\\n        onlyRegisteredShop\\n    {\\n        require(_ids.length == _uris.length, \\\"invalid input\\\");\\n\\n        for (uint256 i = 0; i < _uris.length; i++) {\\n            bytes memory tempUriStr = bytes(_uris[i]);\\n            require(tempUriStr.length > 0, \\\"uri empty\\\");\\n\\n            bytes storage tempStorageStr = bytes(uris[_ids[i]]);\\n\\n            require(tempStorageStr.length == 0, \\\"slot used\\\");\\n\\n            uris[_ids[i]] = _uris[i];\\n        }\\n    }\\n\\n    function mint(\\n        address _receiver,\\n        uint256[] calldata _itemIds,\\n        uint256[] calldata _amounts\\n    ) external onlyRegisteredShop {\\n        require(_itemIds.length == _amounts.length, \\\"invalid input\\\");\\n\\n        for (uint256 i = 0; i < _itemIds.length; i++) {\\n            bytes memory tempUriStr = bytes(uris[_itemIds[i]]);\\n            require(tempUriStr.length > 0, \\\"non existing item\\\");\\n        }\\n\\n        _mintBatch(_receiver, _itemIds, _amounts, \\\"\\\");\\n\\n        emit Bought(_receiver, msg.sender, _itemIds);\\n    }\\n\\n    function burn(\\n        address _owner,\\n        uint256 _itemId,\\n        uint256 _amounts\\n    ) external onlyRegisteredShop {\\n        _burn(_owner, _itemId, _amounts);\\n    }\\n}\\n\",\"keccak256\":\"0xf530894021b41611500183478bddd939953a87e21d7d738edf061a0fe2fcdcbb\",\"license\":\"GPL-3.0\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b503060405161001e9061007d565b610028919061010a565b604051809103906000f080158015610044573d6000803e3d6000fd5b5073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050610125565b613f2480620040a483390190565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006100d06100cb6100c68461008b565b6100ab565b61008b565b9050919050565b60006100e2826100b5565b9050919050565b60006100f4826100d7565b9050919050565b610104816100e9565b82525050565b600060208201905061011f60008301846100fb565b92915050565b608051613f5d620001476000396000818160db01526101040152613f5d6000f3fe60806040523480156200001157600080fd5b5060043610620000465760003560e01c806308514a41146200004b5780639e42780b146200006d578063d2b50a3b14620000a3575b600080fd5b62000055620000d9565b6040516200006491906200037d565b60405180910390f35b6200008b600480360381019062000085919062000492565b620000fd565b6040516200009a919062000572565b60405180910390f35b620000c16004803603810190620000bb91906200058f565b6200028f565b604051620000d09190620005de565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000081565b60008082887f000000000000000000000000000000000000000000000000000000000000000089896040516200013390620002e4565b6200014294939291906200065f565b8190604051809103906000f590508015801562000163573d6000803e3d6000fd5b50905060016000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508073ffffffffffffffffffffffffffffffffffffffff1663b49116058a87876040518463ffffffff1660e01b8152600401620001fc93929190620006a5565b600060405180830381600087803b1580156200021757600080fd5b505af11580156200022c573d6000803e3d6000fd5b505050508873ffffffffffffffffffffffffffffffffffffffff167f587ece4cd19692c5be1a4184503d607d45542d2aca0698c0068f52e09ccb541c8260405162000278919062000572565b60405180910390a280915050979650505050505050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b61384c80620006dc83390190565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006200033d620003376200033184620002f2565b62000312565b620002f2565b9050919050565b600062000351826200031c565b9050919050565b6000620003658262000344565b9050919050565b620003778162000358565b82525050565b60006020820190506200039460008301846200036c565b92915050565b600080fd5b600080fd5b6000620003b182620002f2565b9050919050565b620003c381620003a4565b8114620003cf57600080fd5b50565b600081359050620003e381620003b8565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112620004115762000410620003e9565b5b8235905067ffffffffffffffff811115620004315762000430620003ee565b5b60208301915083600182028301111562000450576200044f620003f3565b5b9250929050565b6000819050919050565b6200046c8162000457565b81146200047857600080fd5b50565b6000813590506200048c8162000461565b92915050565b600080600080600080600060a0888a031215620004b457620004b36200039a565b5b6000620004c48a828b01620003d2565b9750506020620004d78a828b01620003d2565b965050604088013567ffffffffffffffff811115620004fb57620004fa6200039f565b5b620005098a828b01620003f8565b9550955050606088013567ffffffffffffffff8111156200052f576200052e6200039f565b5b6200053d8a828b01620003f8565b93509350506080620005528a828b016200047b565b91505092959891949750929550565b6200056c81620003a4565b82525050565b600060208201905062000589600083018462000561565b92915050565b600060208284031215620005a857620005a76200039a565b5b6000620005b884828501620003d2565b91505092915050565b60008115159050919050565b620005d881620005c1565b82525050565b6000602082019050620005f56000830184620005cd565b92915050565b600082825260208201905092915050565b82818337600083830152505050565b6000601f19601f8301169050919050565b60006200063a8385620005fb565b9350620006498385846200060c565b62000654836200061b565b840190509392505050565b600060608201905062000676600083018762000561565b6200068560208301866200036c565b81810360408301526200069a8184866200062c565b905095945050505050565b6000604082019050620006bc600083018662000561565b8181036020830152620006d18184866200062c565b905094935050505056fe60a06040526000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600567ffffffffffffffff81111562000064576200006362000292565b5b604051908082528060200260200182016040528015620000935781602001602082028036833780820191505090505b5060049080519060200190620000ab92919062000190565b506001600660006101000a81548160ff021916908315150217905550348015620000d457600080fd5b506040516200384c3803806200384c8339818101604052810190620000fa9190620004d9565b826000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550806003908051906020019062000152929190620001e2565b508173ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050505050620005b9565b828054828255906000526020600020908101928215620001cf579160200282015b82811115620001ce578251825591602001919060010190620001b1565b5b509050620001de919062000273565b5090565b828054620001f09062000583565b90600052602060002090601f01602090048101928262000214576000855562000260565b82601f106200022f57805160ff191683800117855562000260565b8280016001018555821562000260579182015b828111156200025f57825182559160200191906001019062000242565b5b5090506200026f919062000273565b5090565b5b808211156200028e57600081600090555060010162000274565b5090565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200030282620002d5565b9050919050565b6200031481620002f5565b81146200032057600080fd5b50565b600081519050620003348162000309565b92915050565b60006200034782620002f5565b9050919050565b62000359816200033a565b81146200036557600080fd5b50565b60008151905062000379816200034e565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b620003a58262000389565b810181811067ffffffffffffffff82111715620003c757620003c662000292565b5b80604052505050565b6000620003dc620002c1565b9050620003ea82826200039a565b919050565b600067ffffffffffffffff8211156200040d576200040c62000292565b5b620004188262000389565b9050602081019050919050565b60005b838110156200044557808201518184015260208101905062000428565b8381111562000455576000848401525b50505050565b6000620004726200046c84620003ef565b620003d0565b90508281526020810184848401111562000491576200049062000384565b5b6200049e84828562000425565b509392505050565b600082601f830112620004be57620004bd6200037f565b5b8151620004d08482602086016200045b565b91505092915050565b600080600060608486031215620004f557620004f4620002cb565b5b6000620005058682870162000323565b9350506020620005188682870162000368565b925050604084015167ffffffffffffffff8111156200053c576200053b620002d0565b5b6200054a86828701620004a6565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200059c57607f821691505b60208210811415620005b357620005b262000554565b5b50919050565b60805161321c62000630600039600081816104040152818161066d015281816107950152818161093b01528181610bbb01528181610cb201528181610f77015281816110d60152818161149901528181611526015281816116180152818161179301528181611888015261195e015261321c6000f3fe6080604052600436106100f75760003560e01c806353c6b20f1161008a578063b491160511610059578063b49116051461030b578063d11db01014610334578063f1c6bdf81461035d578063f96d693114610388576100fe565b806353c6b20f1461025157806397a24c071461027a578063ae049e0d146102a3578063b0117499146102ce576100fe565b806332f1a34c116100c657806332f1a34c146101a95780633908b4ee146101d2578063431e9433146101fd5780634846ff7e14610228576100fe565b806302f2379b14610103578063088b0d751461012c5780631c6d76751461015557806324573ec514610180576100fe565b366100fe57005b600080fd5b34801561010f57600080fd5b5061012a60048036038101906101259190611e90565b6103b1565b005b34801561013857600080fd5b50610153600480360381019061014e9190611f3b565b610742565b005b34801561016157600080fd5b5061016a6108c2565b6040516101779190611f77565b60405180910390f35b34801561018c57600080fd5b506101a760048036038101906101a29190611fc8565b6108e8565b005b3480156101b557600080fd5b506101d060048036038101906101cb919061204b565b610a2f565b005b3480156101de57600080fd5b506101e7610c53565b6040516101f491906120f9565b60405180910390f35b34801561020957600080fd5b50610212610c59565b60405161021f9190612123565b60405180910390f35b34801561023457600080fd5b5061024f600480360381019061024a9190611f3b565b610c5f565b005b34801561025d57600080fd5b506102786004803603810190610273919061227f565b610f24565b005b34801561028657600080fd5b506102a1600480360381019061029c91906122db565b611083565b005b3480156102af57600080fd5b506102b861120e565b6040516102c591906123a3565b60405180910390f35b3480156102da57600080fd5b506102f560048036038101906102f091906123f1565b61129c565b60405161030291906120f9565b60405180910390f35b34801561031757600080fd5b50610332600480360381019061032d9190612474565b6112c0565b005b34801561034057600080fd5b5061035b600480360381019061035691906124d4565b6115c5565b005b34801561036957600080fd5b5061037261171c565b60405161037f9190611f77565b60405180910390f35b34801561039457600080fd5b506103af60048036038101906103aa9190611f3b565b611740565b005b600660009054906101000a900460ff16610400576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103f790612569565b60405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1662fdd58e336007546040518363ffffffff1660e01b815260040161045e929190612589565b60206040518083038186803b15801561047657600080fd5b505afa15801561048a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ae91906125c7565b116104ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104e590612640565b60405180910390fd5b600582829050111580156105055750600082829050115b610544576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161053b906126ac565b60405180910390fd5b60008282905067ffffffffffffffff81111561056357610562612154565b5b6040519080825280602002602001820160405280156105915781602001602082028036833780820191505090505b50905060005b8383905081101561066a576000600482815481106105b8576105b76126cc565b5b9060005260206000200154905060075481141561060a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060190612747565b60405180910390fd5b8083838151811061061e5761061d6126cc565b5b60200260200101818152505060016005600083815260200190815260200160002060006101000a81548160ff02191690831515021790555050808061066290612796565b915050610597565b507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16638a5f671b8285856040518463ffffffff1660e01b81526004016106c893929190612a01565b600060405180830381600087803b1580156106e257600080fd5b505af11580156106f6573d6000803e3d6000fd5b5050505061070683839050611936565b7f77117b91fef75999c9c1a5a4358e2afe8341539b1cbb59ff530c6078440e7003816040516107359190612a3a565b60405180910390a1505050565b600660009054906101000a900460ff16610791576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078890612569565b60405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1662fdd58e336007546040518363ffffffff1660e01b81526004016107ef929190612589565b60206040518083038186803b15801561080757600080fd5b505afa15801561081b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061083f91906125c7565b1161087f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161087690612640565b60405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600660009054906101000a900460ff16610937576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161092e90612569565b60405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1662fdd58e336007546040518363ffffffff1660e01b8152600401610995929190612589565b60206040518083038186803b1580156109ad57600080fd5b505afa1580156109c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e591906125c7565b11610a25576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a1c90612640565b60405180910390fd5b8060028190555050565b600660009054906101000a900460ff16610a7e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a7590612569565b60405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610b0c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b0390612aa8565b60405180910390fd5b818190508484905014610b1e57600080fd5b60005b82829050811015610bb85760056000848484818110610b4357610b426126cc565b5b90506020020135815260200190815260200160002060009054906101000a900460ff16610ba5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b9c90612b14565b60405180910390fd5b8080610bb090612796565b915050610b21565b507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16639727756a86848488886040518663ffffffff1660e01b8152600401610c1a959493929190612b95565b600060405180830381600087803b158015610c3457600080fd5b505af1158015610c48573d6000803e3d6000fd5b505050505050505050565b60075481565b60025481565b600660009054906101000a900460ff16610cae576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ca590612569565b60405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1662fdd58e336007546040518363ffffffff1660e01b8152600401610d0c929190612589565b60206040518083038186803b158015610d2457600080fd5b505afa158015610d38573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d5c91906125c7565b11610d9c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d9390612640565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610e3f578073ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050158015610e39573d6000803e3d6000fd5b50610f21565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610ea19190611f77565b60206040518083038186803b158015610eb957600080fd5b505afa158015610ecd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ef191906125c7565b9050610f1e83828473ffffffffffffffffffffffffffffffffffffffff16611a719092919063ffffffff16565b50505b50565b600660009054906101000a900460ff16610f73576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f6a90612569565b60405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1662fdd58e336007546040518363ffffffff1660e01b8152600401610fd1929190612589565b60206040518083038186803b158015610fe957600080fd5b505afa158015610ffd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061102191906125c7565b11611061576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161105890612640565b60405180910390fd5b8160039080519060200190611077929190611d74565b50806002819055505050565b600660009054906101000a900460ff166110d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110c990612569565b60405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1662fdd58e336007546040518363ffffffff1660e01b8152600401611130929190612589565b60206040518083038186803b15801561114857600080fd5b505afa15801561115c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061118091906125c7565b116111c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111b790612640565b60405180910390fd5b6111c982610c5f565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b6003805461121b90612c0d565b80601f016020809104026020016040519081016040528092919081815260200182805461124790612c0d565b80156112945780601f1061126957610100808354040283529160200191611294565b820191906000526020600020905b81548152906001019060200180831161127757829003601f168201915b505050505081565b600481815481106112ac57600080fd5b906000526020600020016000915090505481565b6000600754146112cf57600080fd5b6112d96005611936565b6000600167ffffffffffffffff8111156112f6576112f5612154565b5b60405190808252806020026020018201604052801561132957816020015b60608152602001906001900390816113145790505b50905082828080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505081600081518110611385576113846126cc565b5b60200260200101819052506000600167ffffffffffffffff8111156113ad576113ac612154565b5b6040519080825280602002602001820160405280156113db5781602001602082028036833780820191505090505b50905060046000815481106113f3576113f26126cc565b5b90600052602060002001546007819055506007548160008151811061141b5761141a6126cc565b5b6020026020010181815250506000600167ffffffffffffffff81111561144457611443612154565b5b6040519080825280602002602001820160405280156114725781602001602082028036833780820191505090505b50905060018160008151811061148b5761148a6126cc565b5b6020026020010181815250507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16638a5f671b83856040518363ffffffff1660e01b81526004016114f2929190612d29565b600060405180830381600087803b15801561150c57600080fd5b505af1158015611520573d6000803e3d6000fd5b505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16639727756a8784846040518463ffffffff1660e01b815260040161158193929190612d60565b600060405180830381600087803b15801561159b57600080fd5b505af11580156115af573d6000803e3d6000fd5b505050506115bd6001611936565b505050505050565b600660009054906101000a900460ff16611614576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161160b90612569565b60405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1662fdd58e336007546040518363ffffffff1660e01b8152600401611672929190612589565b60206040518083038186803b15801561168a57600080fd5b505afa15801561169e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116c291906125c7565b11611702576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116f990612640565b60405180910390fd5b8060039080519060200190611718929190611d74565b5050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600660009054906101000a900460ff1661178f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161178690612569565b60405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1662fdd58e336007546040518363ffffffff1660e01b81526004016117ed929190612589565b60206040518083038186803b15801561180557600080fd5b505afa158015611819573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061183d91906125c7565b1161187d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161187490612640565b60405180910390fd5b61188681610c5f565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f5298aca3360075460016040518463ffffffff1660e01b81526004016118e693929190612dea565b600060405180830381600087803b15801561190057600080fd5b505af1158015611914573d6000803e3d6000fd5b505050506000600660006101000a81548160ff02191690831515021790555050565b60008160ff1611801561194d575060058160ff1611155b61195a57611959612e21565b5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663af95e805836040518263ffffffff1660e01b81526004016119b59190612e6c565b600060405180830381600087803b1580156119cf57600080fd5b505af11580156119e3573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190611a0c9190612f4a565b905060005b8260ff16811015611a6c57818181518110611a2f57611a2e6126cc565b5b602002602001015160048281548110611a4b57611a4a6126cc565b5b90600052602060002001819055508080611a6490612796565b915050611a11565b505050565b611af28363a9059cbb60e01b8484604051602401611a90929190612589565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611af7565b505050565b6000611b59826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16611bbe9092919063ffffffff16565b9050600081511115611bb95780806020019051810190611b799190612fcb565b611bb8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611baf9061306a565b60405180910390fd5b5b505050565b6060611bcd8484600085611bd6565b90509392505050565b606082471015611c1b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c12906130fc565b60405180910390fd5b611c2485611cea565b611c63576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c5a90613168565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051611c8c91906131cf565b60006040518083038185875af1925050503d8060008114611cc9576040519150601f19603f3d011682016040523d82523d6000602084013e611cce565b606091505b5091509150611cde828286611d0d565b92505050949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60608315611d1d57829050611d6d565b600083511115611d305782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d6491906123a3565b60405180910390fd5b9392505050565b828054611d8090612c0d565b90600052602060002090601f016020900481019282611da25760008555611de9565b82601f10611dbb57805160ff1916838001178555611de9565b82800160010185558215611de9579182015b82811115611de8578251825591602001919060010190611dcd565b5b509050611df69190611dfa565b5090565b5b80821115611e13576000816000905550600101611dfb565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f840112611e5057611e4f611e2b565b5b8235905067ffffffffffffffff811115611e6d57611e6c611e30565b5b602083019150836020820283011115611e8957611e88611e35565b5b9250929050565b60008060208385031215611ea757611ea6611e21565b5b600083013567ffffffffffffffff811115611ec557611ec4611e26565b5b611ed185828601611e3a565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611f0882611edd565b9050919050565b611f1881611efd565b8114611f2357600080fd5b50565b600081359050611f3581611f0f565b92915050565b600060208284031215611f5157611f50611e21565b5b6000611f5f84828501611f26565b91505092915050565b611f7181611efd565b82525050565b6000602082019050611f8c6000830184611f68565b92915050565b6000819050919050565b611fa581611f92565b8114611fb057600080fd5b50565b600081359050611fc281611f9c565b92915050565b600060208284031215611fde57611fdd611e21565b5b6000611fec84828501611fb3565b91505092915050565b60008083601f84011261200b5761200a611e2b565b5b8235905067ffffffffffffffff81111561202857612027611e30565b5b60208301915083602082028301111561204457612043611e35565b5b9250929050565b60008060008060006060868803121561206757612066611e21565b5b600061207588828901611f26565b955050602086013567ffffffffffffffff81111561209657612095611e26565b5b6120a288828901611ff5565b9450945050604086013567ffffffffffffffff8111156120c5576120c4611e26565b5b6120d188828901611ff5565b92509250509295509295909350565b6000819050919050565b6120f3816120e0565b82525050565b600060208201905061210e60008301846120ea565b92915050565b61211d81611f92565b82525050565b60006020820190506121386000830184612114565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61218c82612143565b810181811067ffffffffffffffff821117156121ab576121aa612154565b5b80604052505050565b60006121be611e17565b90506121ca8282612183565b919050565b600067ffffffffffffffff8211156121ea576121e9612154565b5b6121f382612143565b9050602081019050919050565b82818337600083830152505050565b600061222261221d846121cf565b6121b4565b90508281526020810184848401111561223e5761223d61213e565b5b612249848285612200565b509392505050565b600082601f83011261226657612265611e2b565b5b813561227684826020860161220f565b91505092915050565b6000806040838503121561229657612295611e21565b5b600083013567ffffffffffffffff8111156122b4576122b3611e26565b5b6122c085828601612251565b92505060206122d185828601611fb3565b9150509250929050565b600080604083850312156122f2576122f1611e21565b5b600061230085828601611f26565b925050602061231185828601611f26565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561235557808201518184015260208101905061233a565b83811115612364576000848401525b50505050565b60006123758261231b565b61237f8185612326565b935061238f818560208601612337565b61239881612143565b840191505092915050565b600060208201905081810360008301526123bd818461236a565b905092915050565b6123ce816120e0565b81146123d957600080fd5b50565b6000813590506123eb816123c5565b92915050565b60006020828403121561240757612406611e21565b5b6000612415848285016123dc565b91505092915050565b60008083601f84011261243457612433611e2b565b5b8235905067ffffffffffffffff81111561245157612450611e30565b5b60208301915083600182028301111561246d5761246c611e35565b5b9250929050565b60008060006040848603121561248d5761248c611e21565b5b600061249b86828701611f26565b935050602084013567ffffffffffffffff8111156124bc576124bb611e26565b5b6124c88682870161241e565b92509250509250925092565b6000602082840312156124ea576124e9611e21565b5b600082013567ffffffffffffffff81111561250857612507611e26565b5b61251484828501612251565b91505092915050565b7f73686f7020636c6f736564000000000000000000000000000000000000000000600082015250565b6000612553600b83612326565b915061255e8261251d565b602082019050919050565b6000602082019050818103600083015261258281612546565b9050919050565b600060408201905061259e6000830185611f68565b6125ab60208301846120ea565b9392505050565b6000815190506125c1816123c5565b92915050565b6000602082840312156125dd576125dc611e21565b5b60006125eb848285016125b2565b91505092915050565b7f6e6f74206f776e65720000000000000000000000000000000000000000000000600082015250565b600061262a600983612326565b9150612635826125f4565b602082019050919050565b600060208201905081810360008301526126598161261d565b9050919050565b7f696e76616c69642075726920636f756e74000000000000000000000000000000600082015250565b6000612696601183612326565b91506126a182612660565b602082019050919050565b600060208201905081810360008301526126c581612689565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f6e6f206f776e6572206964000000000000000000000000000000000000000000600082015250565b6000612731600b83612326565b915061273c826126fb565b602082019050919050565b6000602082019050818103600083015261276081612724565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006127a1826120e0565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156127d4576127d3612767565b5b600182019050919050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b612814816120e0565b82525050565b6000612826838361280b565b60208301905092915050565b6000602082019050919050565b600061284a826127df565b61285481856127ea565b935061285f836127fb565b8060005b83811015612890578151612877888261281a565b975061288283612832565b925050600181019050612863565b5085935050505092915050565b600082825260208201905092915050565b6000819050919050565b600082825260208201905092915050565b60006128d583856128b8565b93506128e2838584612200565b6128eb83612143565b840190509392505050565b60006129038484846128c9565b90509392505050565b600080fd5b600080fd5b600080fd5b6000808335600160200384360303811261293857612937612916565b5b83810192508235915060208301925067ffffffffffffffff8211156129605761295f61290c565b5b60018202360384131561297657612975612911565b5b509250929050565b6000602082019050919050565b6000612997838561289d565b9350836020840285016129a9846128ae565b8060005b878110156129ef5784840389526129c4828461291b565b6129cf8682846128f6565b95506129da8461297e565b935060208b019a5050506001810190506129ad565b50829750879450505050509392505050565b60006040820190508181036000830152612a1b818661283f565b90508181036020830152612a3081848661298b565b9050949350505050565b60006020820190508181036000830152612a54818461283f565b905092915050565b7f6f6e6c792070726f636573736f72000000000000000000000000000000000000600082015250565b6000612a92600e83612326565b9150612a9d82612a5c565b602082019050919050565b60006020820190508181036000830152612ac181612a85565b9050919050565b7f6974656d206e6f6e2d6578697374000000000000000000000000000000000000600082015250565b6000612afe600e83612326565b9150612b0982612ac8565b602082019050919050565b60006020820190508181036000830152612b2d81612af1565b9050919050565b600080fd5b6000612b4583856127ea565b93507f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831115612b7857612b77612b34565b5b602083029250612b89838584612200565b82840190509392505050565b6000606082019050612baa6000830188611f68565b8181036020830152612bbd818688612b39565b90508181036040830152612bd2818486612b39565b90509695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680612c2557607f821691505b60208210811415612c3957612c38612bde565b5b50919050565b600081519050919050565b6000819050602082019050919050565b6000612c658261231b565b612c6f81856128b8565b9350612c7f818560208601612337565b612c8881612143565b840191505092915050565b6000612c9f8383612c5a565b905092915050565b6000602082019050919050565b6000612cbf82612c3f565b612cc9818561289d565b935083602082028501612cdb85612c4a565b8060005b85811015612d175784840389528151612cf88582612c93565b9450612d0383612ca7565b925060208a01995050600181019050612cdf565b50829750879550505050505092915050565b60006040820190508181036000830152612d43818561283f565b90508181036020830152612d578184612cb4565b90509392505050565b6000606082019050612d756000830186611f68565b8181036020830152612d87818561283f565b90508181036040830152612d9b818461283f565b9050949350505050565b6000819050919050565b6000819050919050565b6000612dd4612dcf612dca84612da5565b612daf565b6120e0565b9050919050565b612de481612db9565b82525050565b6000606082019050612dff6000830186611f68565b612e0c60208301856120ea565b612e196040830184612ddb565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b600060ff82169050919050565b612e6681612e50565b82525050565b6000602082019050612e816000830184612e5d565b92915050565b600067ffffffffffffffff821115612ea257612ea1612154565b5b602082029050602081019050919050565b6000612ec6612ec184612e87565b6121b4565b90508083825260208201905060208402830185811115612ee957612ee8611e35565b5b835b81811015612f125780612efe88826125b2565b845260208401935050602081019050612eeb565b5050509392505050565b600082601f830112612f3157612f30611e2b565b5b8151612f41848260208601612eb3565b91505092915050565b600060208284031215612f6057612f5f611e21565b5b600082015167ffffffffffffffff811115612f7e57612f7d611e26565b5b612f8a84828501612f1c565b91505092915050565b60008115159050919050565b612fa881612f93565b8114612fb357600080fd5b50565b600081519050612fc581612f9f565b92915050565b600060208284031215612fe157612fe0611e21565b5b6000612fef84828501612fb6565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000613054602a83612326565b915061305f82612ff8565b604082019050919050565b6000602082019050818103600083015261308381613047565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b60006130e6602683612326565b91506130f18261308a565b604082019050919050565b60006020820190508181036000830152613115816130d9565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000613152601d83612326565b915061315d8261311c565b602082019050919050565b6000602082019050818103600083015261318181613145565b9050919050565b600081519050919050565b600081905092915050565b60006131a982613188565b6131b38185613193565b93506131c3818560208601612337565b80840191505092915050565b60006131db828461319e565b91508190509291505056fea264697066735822122047d7a8cc48e508d3a4ad485ec4db62cdd9460b0b463cd82624f895fd8c51f5a164736f6c63430008090033a2646970667358221220982e14405241016d623c3346b9e36c696c06b7bd35c3fe73e9e2a367e6eae57f64736f6c6343000809003360806040523480156200001157600080fd5b5060405162003f2438038062003f24833981810160405281019062000037919062000218565b604051806020016040528060008152506200005881620000b860201b60201c565b5080600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620000b16003620000d460201b6200106c1760201c565b50620002af565b8060029080519060200190620000d0929190620000ea565b5050565b6001816000016000828254019250508190555050565b828054620000f89062000279565b90600052602060002090601f0160209004810192826200011c576000855562000168565b82601f106200013757805160ff191683800117855562000168565b8280016001018555821562000168579182015b82811115620001675782518255916020019190600101906200014a565b5b5090506200017791906200017b565b5090565b5b80821115620001965760008160009055506001016200017c565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001cc826200019f565b9050919050565b6000620001e082620001bf565b9050919050565b620001f281620001d3565b8114620001fe57600080fd5b50565b6000815190506200021281620001e7565b92915050565b6000602082840312156200023157620002306200019a565b5b6000620002418482850162000201565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200029257607f821691505b60208210811415620002a957620002a86200024a565b5b50919050565b613c6580620002bf6000396000f3fe608060405234801561001057600080fd5b50600436106100b35760003560e01c80639727756a116100715780639727756a146101b0578063a22cb465146101cc578063af95e805146101e8578063e985e9c514610218578063f242432a14610248578063f5298aca14610264576100b3565b8062fdd58e146100b857806301ffc9a7146100e85780630e89341c146101185780632eb2c2d6146101485780634e1273f4146101645780638a5f671b14610194575b600080fd5b6100d260048036038101906100cd91906121fe565b610280565b6040516100df919061224d565b60405180910390f35b61010260048036038101906100fd91906122c0565b610349565b60405161010f9190612308565b60405180910390f35b610132600480360381019061012d9190612323565b61042b565b60405161013f91906123e9565b60405180910390f35b610162600480360381019061015d9190612608565b6104d0565b005b61017e6004803603810190610179919061279a565b610571565b60405161018b91906128d0565b60405180910390f35b6101ae60048036038101906101a99190612acf565b61068a565b005b6101ca60048036038101906101c59190612b4b565b61091f565b005b6101e660048036038101906101e19190612c0c565b610c7c565b005b61020260048036038101906101fd9190612c85565b610c92565b60405161020f91906128d0565b60405180910390f35b610232600480360381019061022d9190612cb2565b610e3d565b60405161023f9190612308565b60405180910390f35b610262600480360381019061025d9190612cf2565b610ed1565b005b61027e60048036038101906102799190612d89565b610f72565b005b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156102f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102e890612e4e565b60405180910390fd5b60008083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60007fd9b67a26000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061041457507f0e89341c000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610424575061042382611082565b5b9050919050565b606060056000838152602001908152602001600020805461044b90612e9d565b80601f016020809104026020016040519081016040528092919081815260200182805461047790612e9d565b80156104c45780601f10610499576101008083540402835291602001916104c4565b820191906000526020600020905b8154815290600101906020018083116104a757829003601f168201915b50505050509050919050565b6104d86110ec565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16148061051e575061051d856105186110ec565b610e3d565b5b61055d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161055490612f41565b60405180910390fd5b61056a85858585856110f4565b5050505050565b606081518351146105b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ae90612fd3565b60405180910390fd5b6000835167ffffffffffffffff8111156105d4576105d3612410565b5b6040519080825280602002602001820160405280156106025781602001602082028036833780820191505090505b50905060005b845181101561067f5761064f85828151811061062757610626612ff3565b5b602002602001015185838151811061064257610641612ff3565b5b6020026020010151610280565b82828151811061066257610661612ff3565b5b6020026020010181815250508061067890613051565b9050610608565b508091505092915050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d2b50a3b336040518263ffffffff1660e01b81526004016106e591906130a9565b60206040518083038186803b1580156106fd57600080fd5b505afa158015610711573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061073591906130d9565b610774576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161076b90613152565b60405180910390fd5b805183839050146107ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107b1906131be565b60405180910390fd5b60005b81518110156109195760008282815181106107db576107da612ff3565b5b602002602001015190506000815111610829576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108209061322a565b60405180910390fd5b60006005600087878681811061084257610841612ff3565b5b9050602002013581526020019081526020016000209050600081805461086790612e9d565b9050146108a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108a090613296565b60405180910390fd5b8383815181106108bc576108bb612ff3565b5b6020026020010151600560008888878181106108db576108da612ff3565b5b90506020020135815260200190815260200160002090805190602001906109039291906120b3565b505050808061091190613051565b9150506107bd565b50505050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d2b50a3b336040518263ffffffff1660e01b815260040161097a91906130a9565b60206040518083038186803b15801561099257600080fd5b505afa1580156109a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ca91906130d9565b610a09576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a0090613152565b60405180910390fd5b818190508484905014610a51576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a48906131be565b60405180910390fd5b60005b84849050811015610b7057600060056000878785818110610a7857610a77612ff3565b5b9050602002013581526020019081526020016000208054610a9890612e9d565b80601f0160208091040260200160405190810160405280929190818152602001828054610ac490612e9d565b8015610b115780601f10610ae657610100808354040283529160200191610b11565b820191906000526020600020905b815481529060010190602001808311610af457829003601f168201915b505050505090506000815111610b5c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b5390613302565b60405180910390fd5b508080610b6890613051565b915050610a54565b50610c0e85858580806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050848480806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505060405180602001604052806000815250611408565b3373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167f3a462a84a8f7bb900f8889fd6a06a383eea57ef89d8884e37809711d2bbbad388686604051610c6d929190613383565b60405180910390a35050505050565b610c8e610c876110ec565b8383611626565b5050565b6060600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d2b50a3b336040518263ffffffff1660e01b8152600401610cef91906130a9565b60206040518083038186803b158015610d0757600080fd5b505afa158015610d1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d3f91906130d9565b610d7e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d7590613152565b60405180910390fd5b600a8260ff161115610d8f57600080fd5b60008260ff1667ffffffffffffffff811115610dae57610dad612410565b5b604051908082528060200260200182016040528015610ddc5781602001602082028036833780820191505090505b50905060005b8360ff16811015610e3357610df76003611793565b828281518110610e0a57610e09612ff3565b5b602002602001018181525050610e20600361106c565b8080610e2b90613051565b915050610de2565b5080915050919050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b610ed96110ec565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161480610f1f5750610f1e85610f196110ec565b610e3d565b5b610f5e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f5590613419565b60405180910390fd5b610f6b85858585856117a1565b5050505050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d2b50a3b336040518263ffffffff1660e01b8152600401610fcd91906130a9565b60206040518083038186803b158015610fe557600080fd5b505afa158015610ff9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061101d91906130d9565b61105c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161105390613152565b60405180910390fd5b611067838383611a23565b505050565b6001816000016000828254019250508190555050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600033905090565b8151835114611138576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161112f906134ab565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156111a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161119f9061353d565b60405180910390fd5b60006111b26110ec565b90506111c2818787878787611c40565b60005b84518110156113735760008582815181106111e3576111e2612ff3565b5b60200260200101519050600085838151811061120257611201612ff3565b5b60200260200101519050600080600084815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050818110156112a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161129a906135cf565b60405180910390fd5b81810360008085815260200190815260200160002060008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508160008085815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461135891906135ef565b925050819055505050508061136c90613051565b90506111c5565b508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516113ea929190613645565b60405180910390a4611400818787878787611c48565b505050505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415611478576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161146f906136ee565b60405180910390fd5b81518351146114bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114b3906134ab565b60405180910390fd5b60006114c66110ec565b90506114d781600087878787611c40565b60005b8451811015611590578381815181106114f6576114f5612ff3565b5b602002602001015160008087848151811061151457611513612ff3565b5b6020026020010151815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461157691906135ef565b92505081905550808061158890613051565b9150506114da565b508473ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611608929190613645565b60405180910390a461161f81600087878787611c48565b5050505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611695576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161168c90613780565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516117869190612308565b60405180910390a3505050565b600081600001549050919050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415611811576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118089061353d565b60405180910390fd5b600061181b6110ec565b905061183b81878761182c88611e2f565b61183588611e2f565b87611c40565b600080600086815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050838110156118d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118c9906135cf565b60405180910390fd5b83810360008087815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508360008087815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461198791906135ef565b925050819055508573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628888604051611a049291906137a0565b60405180910390a4611a1a828888888888611ea9565b50505050505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611a93576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a8a9061383b565b60405180910390fd5b6000611a9d6110ec565b9050611acd81856000611aaf87611e2f565b611ab887611e2f565b60405180602001604052806000815250611c40565b600080600085815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905082811015611b64576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b5b906138cd565b60405180910390fd5b82810360008086815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628787604051611c319291906137a0565b60405180910390a45050505050565b505050505050565b611c678473ffffffffffffffffffffffffffffffffffffffff16612090565b15611e27578373ffffffffffffffffffffffffffffffffffffffff1663bc197c8187878686866040518663ffffffff1660e01b8152600401611cad959493929190613942565b602060405180830381600087803b158015611cc757600080fd5b505af1925050508015611cf857506040513d601f19601f82011682018060405250810190611cf591906139bf565b60015b611d9e57611d046139f9565b806308c379a01415611d615750611d19613a1b565b80611d245750611d63565b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d5891906123e9565b60405180910390fd5b505b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d9590613b23565b60405180910390fd5b63bc197c8160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614611e25576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e1c90613bb5565b60405180910390fd5b505b505050505050565b60606000600167ffffffffffffffff811115611e4e57611e4d612410565b5b604051908082528060200260200182016040528015611e7c5781602001602082028036833780820191505090505b5090508281600081518110611e9457611e93612ff3565b5b60200260200101818152505080915050919050565b611ec88473ffffffffffffffffffffffffffffffffffffffff16612090565b15612088578373ffffffffffffffffffffffffffffffffffffffff1663f23a6e6187878686866040518663ffffffff1660e01b8152600401611f0e959493929190613bd5565b602060405180830381600087803b158015611f2857600080fd5b505af1925050508015611f5957506040513d601f19601f82011682018060405250810190611f5691906139bf565b60015b611fff57611f656139f9565b806308c379a01415611fc25750611f7a613a1b565b80611f855750611fc4565b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fb991906123e9565b60405180910390fd5b505b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ff690613b23565b60405180910390fd5b63f23a6e6160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614612086576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161207d90613bb5565b60405180910390fd5b505b505050505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b8280546120bf90612e9d565b90600052602060002090601f0160209004810192826120e15760008555612128565b82601f106120fa57805160ff1916838001178555612128565b82800160010185558215612128579182015b8281111561212757825182559160200191906001019061210c565b5b5090506121359190612139565b5090565b5b8082111561215257600081600090555060010161213a565b5090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006121958261216a565b9050919050565b6121a58161218a565b81146121b057600080fd5b50565b6000813590506121c28161219c565b92915050565b6000819050919050565b6121db816121c8565b81146121e657600080fd5b50565b6000813590506121f8816121d2565b92915050565b6000806040838503121561221557612214612160565b5b6000612223858286016121b3565b9250506020612234858286016121e9565b9150509250929050565b612247816121c8565b82525050565b6000602082019050612262600083018461223e565b92915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61229d81612268565b81146122a857600080fd5b50565b6000813590506122ba81612294565b92915050565b6000602082840312156122d6576122d5612160565b5b60006122e4848285016122ab565b91505092915050565b60008115159050919050565b612302816122ed565b82525050565b600060208201905061231d60008301846122f9565b92915050565b60006020828403121561233957612338612160565b5b6000612347848285016121e9565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561238a57808201518184015260208101905061236f565b83811115612399576000848401525b50505050565b6000601f19601f8301169050919050565b60006123bb82612350565b6123c5818561235b565b93506123d581856020860161236c565b6123de8161239f565b840191505092915050565b6000602082019050818103600083015261240381846123b0565b905092915050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6124488261239f565b810181811067ffffffffffffffff8211171561246757612466612410565b5b80604052505050565b600061247a612156565b9050612486828261243f565b919050565b600067ffffffffffffffff8211156124a6576124a5612410565b5b602082029050602081019050919050565b600080fd5b60006124cf6124ca8461248b565b612470565b905080838252602082019050602084028301858111156124f2576124f16124b7565b5b835b8181101561251b578061250788826121e9565b8452602084019350506020810190506124f4565b5050509392505050565b600082601f83011261253a5761253961240b565b5b813561254a8482602086016124bc565b91505092915050565b600080fd5b600067ffffffffffffffff82111561257357612572612410565b5b61257c8261239f565b9050602081019050919050565b82818337600083830152505050565b60006125ab6125a684612558565b612470565b9050828152602081018484840111156125c7576125c6612553565b5b6125d2848285612589565b509392505050565b600082601f8301126125ef576125ee61240b565b5b81356125ff848260208601612598565b91505092915050565b600080600080600060a0868803121561262457612623612160565b5b6000612632888289016121b3565b9550506020612643888289016121b3565b945050604086013567ffffffffffffffff81111561266457612663612165565b5b61267088828901612525565b935050606086013567ffffffffffffffff81111561269157612690612165565b5b61269d88828901612525565b925050608086013567ffffffffffffffff8111156126be576126bd612165565b5b6126ca888289016125da565b9150509295509295909350565b600067ffffffffffffffff8211156126f2576126f1612410565b5b602082029050602081019050919050565b6000612716612711846126d7565b612470565b90508083825260208201905060208402830185811115612739576127386124b7565b5b835b81811015612762578061274e88826121b3565b84526020840193505060208101905061273b565b5050509392505050565b600082601f8301126127815761278061240b565b5b8135612791848260208601612703565b91505092915050565b600080604083850312156127b1576127b0612160565b5b600083013567ffffffffffffffff8111156127cf576127ce612165565b5b6127db8582860161276c565b925050602083013567ffffffffffffffff8111156127fc576127fb612165565b5b61280885828601612525565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b612847816121c8565b82525050565b6000612859838361283e565b60208301905092915050565b6000602082019050919050565b600061287d82612812565b612887818561281d565b93506128928361282e565b8060005b838110156128c35781516128aa888261284d565b97506128b583612865565b925050600181019050612896565b5085935050505092915050565b600060208201905081810360008301526128ea8184612872565b905092915050565b600080fd5b60008083601f84011261290d5761290c61240b565b5b8235905067ffffffffffffffff81111561292a576129296128f2565b5b602083019150836020820283011115612946576129456124b7565b5b9250929050565b600067ffffffffffffffff82111561296857612967612410565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561299457612993612410565b5b61299d8261239f565b9050602081019050919050565b60006129bd6129b884612979565b612470565b9050828152602081018484840111156129d9576129d8612553565b5b6129e4848285612589565b509392505050565b600082601f830112612a0157612a0061240b565b5b8135612a118482602086016129aa565b91505092915050565b6000612a2d612a288461294d565b612470565b90508083825260208201905060208402830185811115612a5057612a4f6124b7565b5b835b81811015612a9757803567ffffffffffffffff811115612a7557612a7461240b565b5b808601612a8289826129ec565b85526020850194505050602081019050612a52565b5050509392505050565b600082601f830112612ab657612ab561240b565b5b8135612ac6848260208601612a1a565b91505092915050565b600080600060408486031215612ae857612ae7612160565b5b600084013567ffffffffffffffff811115612b0657612b05612165565b5b612b12868287016128f7565b9350935050602084013567ffffffffffffffff811115612b3557612b34612165565b5b612b4186828701612aa1565b9150509250925092565b600080600080600060608688031215612b6757612b66612160565b5b6000612b75888289016121b3565b955050602086013567ffffffffffffffff811115612b9657612b95612165565b5b612ba2888289016128f7565b9450945050604086013567ffffffffffffffff811115612bc557612bc4612165565b5b612bd1888289016128f7565b92509250509295509295909350565b612be9816122ed565b8114612bf457600080fd5b50565b600081359050612c0681612be0565b92915050565b60008060408385031215612c2357612c22612160565b5b6000612c31858286016121b3565b9250506020612c4285828601612bf7565b9150509250929050565b600060ff82169050919050565b612c6281612c4c565b8114612c6d57600080fd5b50565b600081359050612c7f81612c59565b92915050565b600060208284031215612c9b57612c9a612160565b5b6000612ca984828501612c70565b91505092915050565b60008060408385031215612cc957612cc8612160565b5b6000612cd7858286016121b3565b9250506020612ce8858286016121b3565b9150509250929050565b600080600080600060a08688031215612d0e57612d0d612160565b5b6000612d1c888289016121b3565b9550506020612d2d888289016121b3565b9450506040612d3e888289016121e9565b9350506060612d4f888289016121e9565b925050608086013567ffffffffffffffff811115612d7057612d6f612165565b5b612d7c888289016125da565b9150509295509295909350565b600080600060608486031215612da257612da1612160565b5b6000612db0868287016121b3565b9350506020612dc1868287016121e9565b9250506040612dd2868287016121e9565b9150509250925092565b7f455243313135353a2062616c616e636520717565727920666f7220746865207a60008201527f65726f2061646472657373000000000000000000000000000000000000000000602082015250565b6000612e38602b8361235b565b9150612e4382612ddc565b604082019050919050565b60006020820190508181036000830152612e6781612e2b565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680612eb557607f821691505b60208210811415612ec957612ec8612e6e565b5b50919050565b7f455243313135353a207472616e736665722063616c6c6572206973206e6f742060008201527f6f776e6572206e6f7220617070726f7665640000000000000000000000000000602082015250565b6000612f2b60328361235b565b9150612f3682612ecf565b604082019050919050565b60006020820190508181036000830152612f5a81612f1e565b9050919050565b7f455243313135353a206163636f756e747320616e6420696473206c656e67746860008201527f206d69736d617463680000000000000000000000000000000000000000000000602082015250565b6000612fbd60298361235b565b9150612fc882612f61565b604082019050919050565b60006020820190508181036000830152612fec81612fb0565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061305c826121c8565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561308f5761308e613022565b5b600182019050919050565b6130a38161218a565b82525050565b60006020820190506130be600083018461309a565b92915050565b6000815190506130d381612be0565b92915050565b6000602082840312156130ef576130ee612160565b5b60006130fd848285016130c4565b91505092915050565b7f6e6f742073686f70000000000000000000000000000000000000000000000000600082015250565b600061313c60088361235b565b915061314782613106565b602082019050919050565b6000602082019050818103600083015261316b8161312f565b9050919050565b7f696e76616c696420696e70757400000000000000000000000000000000000000600082015250565b60006131a8600d8361235b565b91506131b382613172565b602082019050919050565b600060208201905081810360008301526131d78161319b565b9050919050565b7f75726920656d7074790000000000000000000000000000000000000000000000600082015250565b600061321460098361235b565b915061321f826131de565b602082019050919050565b6000602082019050818103600083015261324381613207565b9050919050565b7f736c6f7420757365640000000000000000000000000000000000000000000000600082015250565b600061328060098361235b565b915061328b8261324a565b602082019050919050565b600060208201905081810360008301526132af81613273565b9050919050565b7f6e6f6e206578697374696e67206974656d000000000000000000000000000000600082015250565b60006132ec60118361235b565b91506132f7826132b6565b602082019050919050565b6000602082019050818103600083015261331b816132df565b9050919050565b600080fd5b6000613333838561281d565b93507f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83111561336657613365613322565b5b602083029250613377838584612589565b82840190509392505050565b6000602082019050818103600083015261339e818486613327565b90509392505050565b7f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260008201527f20617070726f7665640000000000000000000000000000000000000000000000602082015250565b600061340360298361235b565b915061340e826133a7565b604082019050919050565b60006020820190508181036000830152613432816133f6565b9050919050565b7f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682060008201527f6d69736d61746368000000000000000000000000000000000000000000000000602082015250565b600061349560288361235b565b91506134a082613439565b604082019050919050565b600060208201905081810360008301526134c481613488565b9050919050565b7f455243313135353a207472616e7366657220746f20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b600061352760258361235b565b9150613532826134cb565b604082019050919050565b600060208201905081810360008301526135568161351a565b9050919050565b7f455243313135353a20696e73756666696369656e742062616c616e636520666f60008201527f72207472616e7366657200000000000000000000000000000000000000000000602082015250565b60006135b9602a8361235b565b91506135c48261355d565b604082019050919050565b600060208201905081810360008301526135e8816135ac565b9050919050565b60006135fa826121c8565b9150613605836121c8565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561363a57613639613022565b5b828201905092915050565b6000604082019050818103600083015261365f8185612872565b905081810360208301526136738184612872565b90509392505050565b7f455243313135353a206d696e7420746f20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b60006136d860218361235b565b91506136e38261367c565b604082019050919050565b60006020820190508181036000830152613707816136cb565b9050919050565b7f455243313135353a2073657474696e6720617070726f76616c2073746174757360008201527f20666f722073656c660000000000000000000000000000000000000000000000602082015250565b600061376a60298361235b565b91506137758261370e565b604082019050919050565b600060208201905081810360008301526137998161375d565b9050919050565b60006040820190506137b5600083018561223e565b6137c2602083018461223e565b9392505050565b7f455243313135353a206275726e2066726f6d20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b600061382560238361235b565b9150613830826137c9565b604082019050919050565b6000602082019050818103600083015261385481613818565b9050919050565b7f455243313135353a206275726e20616d6f756e7420657863656564732062616c60008201527f616e636500000000000000000000000000000000000000000000000000000000602082015250565b60006138b760248361235b565b91506138c28261385b565b604082019050919050565b600060208201905081810360008301526138e6816138aa565b9050919050565b600081519050919050565b600082825260208201905092915050565b6000613914826138ed565b61391e81856138f8565b935061392e81856020860161236c565b6139378161239f565b840191505092915050565b600060a082019050613957600083018861309a565b613964602083018761309a565b81810360408301526139768186612872565b9050818103606083015261398a8185612872565b9050818103608083015261399e8184613909565b90509695505050505050565b6000815190506139b981612294565b92915050565b6000602082840312156139d5576139d4612160565b5b60006139e3848285016139aa565b91505092915050565b60008160e01c9050919050565b600060033d1115613a185760046000803e613a156000516139ec565b90505b90565b600060443d1015613a2b57613aae565b613a33612156565b60043d036004823e80513d602482011167ffffffffffffffff82111715613a5b575050613aae565b808201805167ffffffffffffffff811115613a795750505050613aae565b80602083010160043d038501811115613a96575050505050613aae565b613aa58260200185018661243f565b82955050505050505b90565b7f455243313135353a207472616e7366657220746f206e6f6e204552433131353560008201527f526563656976657220696d706c656d656e746572000000000000000000000000602082015250565b6000613b0d60348361235b565b9150613b1882613ab1565b604082019050919050565b60006020820190508181036000830152613b3c81613b00565b9050919050565b7f455243313135353a204552433131353552656365697665722072656a6563746560008201527f6420746f6b656e73000000000000000000000000000000000000000000000000602082015250565b6000613b9f60288361235b565b9150613baa82613b43565b604082019050919050565b60006020820190508181036000830152613bce81613b92565b9050919050565b600060a082019050613bea600083018861309a565b613bf7602083018761309a565b613c04604083018661223e565b613c11606083018561223e565b8181036080830152613c238184613909565b9050969550505050505056fea2646970667358221220fe2e5b5e245717b60981c19a32818996e053edb87b699da940067b04e534b82064736f6c63430008090033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620000465760003560e01c806308514a41146200004b5780639e42780b146200006d578063d2b50a3b14620000a3575b600080fd5b62000055620000d9565b6040516200006491906200037d565b60405180910390f35b6200008b600480360381019062000085919062000492565b620000fd565b6040516200009a919062000572565b60405180910390f35b620000c16004803603810190620000bb91906200058f565b6200028f565b604051620000d09190620005de565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000081565b60008082887f000000000000000000000000000000000000000000000000000000000000000089896040516200013390620002e4565b6200014294939291906200065f565b8190604051809103906000f590508015801562000163573d6000803e3d6000fd5b50905060016000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508073ffffffffffffffffffffffffffffffffffffffff1663b49116058a87876040518463ffffffff1660e01b8152600401620001fc93929190620006a5565b600060405180830381600087803b1580156200021757600080fd5b505af11580156200022c573d6000803e3d6000fd5b505050508873ffffffffffffffffffffffffffffffffffffffff167f587ece4cd19692c5be1a4184503d607d45542d2aca0698c0068f52e09ccb541c8260405162000278919062000572565b60405180910390a280915050979650505050505050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b61384c80620006dc83390190565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006200033d620003376200033184620002f2565b62000312565b620002f2565b9050919050565b600062000351826200031c565b9050919050565b6000620003658262000344565b9050919050565b620003778162000358565b82525050565b60006020820190506200039460008301846200036c565b92915050565b600080fd5b600080fd5b6000620003b182620002f2565b9050919050565b620003c381620003a4565b8114620003cf57600080fd5b50565b600081359050620003e381620003b8565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112620004115762000410620003e9565b5b8235905067ffffffffffffffff811115620004315762000430620003ee565b5b60208301915083600182028301111562000450576200044f620003f3565b5b9250929050565b6000819050919050565b6200046c8162000457565b81146200047857600080fd5b50565b6000813590506200048c8162000461565b92915050565b600080600080600080600060a0888a031215620004b457620004b36200039a565b5b6000620004c48a828b01620003d2565b9750506020620004d78a828b01620003d2565b965050604088013567ffffffffffffffff811115620004fb57620004fa6200039f565b5b620005098a828b01620003f8565b9550955050606088013567ffffffffffffffff8111156200052f576200052e6200039f565b5b6200053d8a828b01620003f8565b93509350506080620005528a828b016200047b565b91505092959891949750929550565b6200056c81620003a4565b82525050565b600060208201905062000589600083018462000561565b92915050565b600060208284031215620005a857620005a76200039a565b5b6000620005b884828501620003d2565b91505092915050565b60008115159050919050565b620005d881620005c1565b82525050565b6000602082019050620005f56000830184620005cd565b92915050565b600082825260208201905092915050565b82818337600083830152505050565b6000601f19601f8301169050919050565b60006200063a8385620005fb565b9350620006498385846200060c565b62000654836200061b565b840190509392505050565b600060608201905062000676600083018762000561565b6200068560208301866200036c565b81810360408301526200069a8184866200062c565b905095945050505050565b6000604082019050620006bc600083018662000561565b8181036020830152620006d18184866200062c565b905094935050505056fe60a06040526000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600567ffffffffffffffff81111562000064576200006362000292565b5b604051908082528060200260200182016040528015620000935781602001602082028036833780820191505090505b5060049080519060200190620000ab92919062000190565b506001600660006101000a81548160ff021916908315150217905550348015620000d457600080fd5b506040516200384c3803806200384c8339818101604052810190620000fa9190620004d9565b826000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550806003908051906020019062000152929190620001e2565b508173ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050505050620005b9565b828054828255906000526020600020908101928215620001cf579160200282015b82811115620001ce578251825591602001919060010190620001b1565b5b509050620001de919062000273565b5090565b828054620001f09062000583565b90600052602060002090601f01602090048101928262000214576000855562000260565b82601f106200022f57805160ff191683800117855562000260565b8280016001018555821562000260579182015b828111156200025f57825182559160200191906001019062000242565b5b5090506200026f919062000273565b5090565b5b808211156200028e57600081600090555060010162000274565b5090565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200030282620002d5565b9050919050565b6200031481620002f5565b81146200032057600080fd5b50565b600081519050620003348162000309565b92915050565b60006200034782620002f5565b9050919050565b62000359816200033a565b81146200036557600080fd5b50565b60008151905062000379816200034e565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b620003a58262000389565b810181811067ffffffffffffffff82111715620003c757620003c662000292565b5b80604052505050565b6000620003dc620002c1565b9050620003ea82826200039a565b919050565b600067ffffffffffffffff8211156200040d576200040c62000292565b5b620004188262000389565b9050602081019050919050565b60005b838110156200044557808201518184015260208101905062000428565b8381111562000455576000848401525b50505050565b6000620004726200046c84620003ef565b620003d0565b90508281526020810184848401111562000491576200049062000384565b5b6200049e84828562000425565b509392505050565b600082601f830112620004be57620004bd6200037f565b5b8151620004d08482602086016200045b565b91505092915050565b600080600060608486031215620004f557620004f4620002cb565b5b6000620005058682870162000323565b9350506020620005188682870162000368565b925050604084015167ffffffffffffffff8111156200053c576200053b620002d0565b5b6200054a86828701620004a6565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200059c57607f821691505b60208210811415620005b357620005b262000554565b5b50919050565b60805161321c62000630600039600081816104040152818161066d015281816107950152818161093b01528181610bbb01528181610cb201528181610f77015281816110d60152818161149901528181611526015281816116180152818161179301528181611888015261195e015261321c6000f3fe6080604052600436106100f75760003560e01c806353c6b20f1161008a578063b491160511610059578063b49116051461030b578063d11db01014610334578063f1c6bdf81461035d578063f96d693114610388576100fe565b806353c6b20f1461025157806397a24c071461027a578063ae049e0d146102a3578063b0117499146102ce576100fe565b806332f1a34c116100c657806332f1a34c146101a95780633908b4ee146101d2578063431e9433146101fd5780634846ff7e14610228576100fe565b806302f2379b14610103578063088b0d751461012c5780631c6d76751461015557806324573ec514610180576100fe565b366100fe57005b600080fd5b34801561010f57600080fd5b5061012a60048036038101906101259190611e90565b6103b1565b005b34801561013857600080fd5b50610153600480360381019061014e9190611f3b565b610742565b005b34801561016157600080fd5b5061016a6108c2565b6040516101779190611f77565b60405180910390f35b34801561018c57600080fd5b506101a760048036038101906101a29190611fc8565b6108e8565b005b3480156101b557600080fd5b506101d060048036038101906101cb919061204b565b610a2f565b005b3480156101de57600080fd5b506101e7610c53565b6040516101f491906120f9565b60405180910390f35b34801561020957600080fd5b50610212610c59565b60405161021f9190612123565b60405180910390f35b34801561023457600080fd5b5061024f600480360381019061024a9190611f3b565b610c5f565b005b34801561025d57600080fd5b506102786004803603810190610273919061227f565b610f24565b005b34801561028657600080fd5b506102a1600480360381019061029c91906122db565b611083565b005b3480156102af57600080fd5b506102b861120e565b6040516102c591906123a3565b60405180910390f35b3480156102da57600080fd5b506102f560048036038101906102f091906123f1565b61129c565b60405161030291906120f9565b60405180910390f35b34801561031757600080fd5b50610332600480360381019061032d9190612474565b6112c0565b005b34801561034057600080fd5b5061035b600480360381019061035691906124d4565b6115c5565b005b34801561036957600080fd5b5061037261171c565b60405161037f9190611f77565b60405180910390f35b34801561039457600080fd5b506103af60048036038101906103aa9190611f3b565b611740565b005b600660009054906101000a900460ff16610400576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103f790612569565b60405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1662fdd58e336007546040518363ffffffff1660e01b815260040161045e929190612589565b60206040518083038186803b15801561047657600080fd5b505afa15801561048a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ae91906125c7565b116104ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104e590612640565b60405180910390fd5b600582829050111580156105055750600082829050115b610544576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161053b906126ac565b60405180910390fd5b60008282905067ffffffffffffffff81111561056357610562612154565b5b6040519080825280602002602001820160405280156105915781602001602082028036833780820191505090505b50905060005b8383905081101561066a576000600482815481106105b8576105b76126cc565b5b9060005260206000200154905060075481141561060a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060190612747565b60405180910390fd5b8083838151811061061e5761061d6126cc565b5b60200260200101818152505060016005600083815260200190815260200160002060006101000a81548160ff02191690831515021790555050808061066290612796565b915050610597565b507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16638a5f671b8285856040518463ffffffff1660e01b81526004016106c893929190612a01565b600060405180830381600087803b1580156106e257600080fd5b505af11580156106f6573d6000803e3d6000fd5b5050505061070683839050611936565b7f77117b91fef75999c9c1a5a4358e2afe8341539b1cbb59ff530c6078440e7003816040516107359190612a3a565b60405180910390a1505050565b600660009054906101000a900460ff16610791576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078890612569565b60405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1662fdd58e336007546040518363ffffffff1660e01b81526004016107ef929190612589565b60206040518083038186803b15801561080757600080fd5b505afa15801561081b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061083f91906125c7565b1161087f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161087690612640565b60405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600660009054906101000a900460ff16610937576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161092e90612569565b60405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1662fdd58e336007546040518363ffffffff1660e01b8152600401610995929190612589565b60206040518083038186803b1580156109ad57600080fd5b505afa1580156109c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e591906125c7565b11610a25576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a1c90612640565b60405180910390fd5b8060028190555050565b600660009054906101000a900460ff16610a7e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a7590612569565b60405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610b0c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b0390612aa8565b60405180910390fd5b818190508484905014610b1e57600080fd5b60005b82829050811015610bb85760056000848484818110610b4357610b426126cc565b5b90506020020135815260200190815260200160002060009054906101000a900460ff16610ba5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b9c90612b14565b60405180910390fd5b8080610bb090612796565b915050610b21565b507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16639727756a86848488886040518663ffffffff1660e01b8152600401610c1a959493929190612b95565b600060405180830381600087803b158015610c3457600080fd5b505af1158015610c48573d6000803e3d6000fd5b505050505050505050565b60075481565b60025481565b600660009054906101000a900460ff16610cae576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ca590612569565b60405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1662fdd58e336007546040518363ffffffff1660e01b8152600401610d0c929190612589565b60206040518083038186803b158015610d2457600080fd5b505afa158015610d38573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d5c91906125c7565b11610d9c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d9390612640565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610e3f578073ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050158015610e39573d6000803e3d6000fd5b50610f21565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610ea19190611f77565b60206040518083038186803b158015610eb957600080fd5b505afa158015610ecd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ef191906125c7565b9050610f1e83828473ffffffffffffffffffffffffffffffffffffffff16611a719092919063ffffffff16565b50505b50565b600660009054906101000a900460ff16610f73576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f6a90612569565b60405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1662fdd58e336007546040518363ffffffff1660e01b8152600401610fd1929190612589565b60206040518083038186803b158015610fe957600080fd5b505afa158015610ffd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061102191906125c7565b11611061576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161105890612640565b60405180910390fd5b8160039080519060200190611077929190611d74565b50806002819055505050565b600660009054906101000a900460ff166110d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110c990612569565b60405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1662fdd58e336007546040518363ffffffff1660e01b8152600401611130929190612589565b60206040518083038186803b15801561114857600080fd5b505afa15801561115c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061118091906125c7565b116111c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111b790612640565b60405180910390fd5b6111c982610c5f565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b6003805461121b90612c0d565b80601f016020809104026020016040519081016040528092919081815260200182805461124790612c0d565b80156112945780601f1061126957610100808354040283529160200191611294565b820191906000526020600020905b81548152906001019060200180831161127757829003601f168201915b505050505081565b600481815481106112ac57600080fd5b906000526020600020016000915090505481565b6000600754146112cf57600080fd5b6112d96005611936565b6000600167ffffffffffffffff8111156112f6576112f5612154565b5b60405190808252806020026020018201604052801561132957816020015b60608152602001906001900390816113145790505b50905082828080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505081600081518110611385576113846126cc565b5b60200260200101819052506000600167ffffffffffffffff8111156113ad576113ac612154565b5b6040519080825280602002602001820160405280156113db5781602001602082028036833780820191505090505b50905060046000815481106113f3576113f26126cc565b5b90600052602060002001546007819055506007548160008151811061141b5761141a6126cc565b5b6020026020010181815250506000600167ffffffffffffffff81111561144457611443612154565b5b6040519080825280602002602001820160405280156114725781602001602082028036833780820191505090505b50905060018160008151811061148b5761148a6126cc565b5b6020026020010181815250507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16638a5f671b83856040518363ffffffff1660e01b81526004016114f2929190612d29565b600060405180830381600087803b15801561150c57600080fd5b505af1158015611520573d6000803e3d6000fd5b505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16639727756a8784846040518463ffffffff1660e01b815260040161158193929190612d60565b600060405180830381600087803b15801561159b57600080fd5b505af11580156115af573d6000803e3d6000fd5b505050506115bd6001611936565b505050505050565b600660009054906101000a900460ff16611614576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161160b90612569565b60405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1662fdd58e336007546040518363ffffffff1660e01b8152600401611672929190612589565b60206040518083038186803b15801561168a57600080fd5b505afa15801561169e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116c291906125c7565b11611702576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116f990612640565b60405180910390fd5b8060039080519060200190611718929190611d74565b5050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600660009054906101000a900460ff1661178f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161178690612569565b60405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1662fdd58e336007546040518363ffffffff1660e01b81526004016117ed929190612589565b60206040518083038186803b15801561180557600080fd5b505afa158015611819573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061183d91906125c7565b1161187d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161187490612640565b60405180910390fd5b61188681610c5f565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f5298aca3360075460016040518463ffffffff1660e01b81526004016118e693929190612dea565b600060405180830381600087803b15801561190057600080fd5b505af1158015611914573d6000803e3d6000fd5b505050506000600660006101000a81548160ff02191690831515021790555050565b60008160ff1611801561194d575060058160ff1611155b61195a57611959612e21565b5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663af95e805836040518263ffffffff1660e01b81526004016119b59190612e6c565b600060405180830381600087803b1580156119cf57600080fd5b505af11580156119e3573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190611a0c9190612f4a565b905060005b8260ff16811015611a6c57818181518110611a2f57611a2e6126cc565b5b602002602001015160048281548110611a4b57611a4a6126cc565b5b90600052602060002001819055508080611a6490612796565b915050611a11565b505050565b611af28363a9059cbb60e01b8484604051602401611a90929190612589565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611af7565b505050565b6000611b59826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16611bbe9092919063ffffffff16565b9050600081511115611bb95780806020019051810190611b799190612fcb565b611bb8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611baf9061306a565b60405180910390fd5b5b505050565b6060611bcd8484600085611bd6565b90509392505050565b606082471015611c1b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c12906130fc565b60405180910390fd5b611c2485611cea565b611c63576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c5a90613168565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051611c8c91906131cf565b60006040518083038185875af1925050503d8060008114611cc9576040519150601f19603f3d011682016040523d82523d6000602084013e611cce565b606091505b5091509150611cde828286611d0d565b92505050949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60608315611d1d57829050611d6d565b600083511115611d305782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d6491906123a3565b60405180910390fd5b9392505050565b828054611d8090612c0d565b90600052602060002090601f016020900481019282611da25760008555611de9565b82601f10611dbb57805160ff1916838001178555611de9565b82800160010185558215611de9579182015b82811115611de8578251825591602001919060010190611dcd565b5b509050611df69190611dfa565b5090565b5b80821115611e13576000816000905550600101611dfb565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f840112611e5057611e4f611e2b565b5b8235905067ffffffffffffffff811115611e6d57611e6c611e30565b5b602083019150836020820283011115611e8957611e88611e35565b5b9250929050565b60008060208385031215611ea757611ea6611e21565b5b600083013567ffffffffffffffff811115611ec557611ec4611e26565b5b611ed185828601611e3a565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611f0882611edd565b9050919050565b611f1881611efd565b8114611f2357600080fd5b50565b600081359050611f3581611f0f565b92915050565b600060208284031215611f5157611f50611e21565b5b6000611f5f84828501611f26565b91505092915050565b611f7181611efd565b82525050565b6000602082019050611f8c6000830184611f68565b92915050565b6000819050919050565b611fa581611f92565b8114611fb057600080fd5b50565b600081359050611fc281611f9c565b92915050565b600060208284031215611fde57611fdd611e21565b5b6000611fec84828501611fb3565b91505092915050565b60008083601f84011261200b5761200a611e2b565b5b8235905067ffffffffffffffff81111561202857612027611e30565b5b60208301915083602082028301111561204457612043611e35565b5b9250929050565b60008060008060006060868803121561206757612066611e21565b5b600061207588828901611f26565b955050602086013567ffffffffffffffff81111561209657612095611e26565b5b6120a288828901611ff5565b9450945050604086013567ffffffffffffffff8111156120c5576120c4611e26565b5b6120d188828901611ff5565b92509250509295509295909350565b6000819050919050565b6120f3816120e0565b82525050565b600060208201905061210e60008301846120ea565b92915050565b61211d81611f92565b82525050565b60006020820190506121386000830184612114565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61218c82612143565b810181811067ffffffffffffffff821117156121ab576121aa612154565b5b80604052505050565b60006121be611e17565b90506121ca8282612183565b919050565b600067ffffffffffffffff8211156121ea576121e9612154565b5b6121f382612143565b9050602081019050919050565b82818337600083830152505050565b600061222261221d846121cf565b6121b4565b90508281526020810184848401111561223e5761223d61213e565b5b612249848285612200565b509392505050565b600082601f83011261226657612265611e2b565b5b813561227684826020860161220f565b91505092915050565b6000806040838503121561229657612295611e21565b5b600083013567ffffffffffffffff8111156122b4576122b3611e26565b5b6122c085828601612251565b92505060206122d185828601611fb3565b9150509250929050565b600080604083850312156122f2576122f1611e21565b5b600061230085828601611f26565b925050602061231185828601611f26565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561235557808201518184015260208101905061233a565b83811115612364576000848401525b50505050565b60006123758261231b565b61237f8185612326565b935061238f818560208601612337565b61239881612143565b840191505092915050565b600060208201905081810360008301526123bd818461236a565b905092915050565b6123ce816120e0565b81146123d957600080fd5b50565b6000813590506123eb816123c5565b92915050565b60006020828403121561240757612406611e21565b5b6000612415848285016123dc565b91505092915050565b60008083601f84011261243457612433611e2b565b5b8235905067ffffffffffffffff81111561245157612450611e30565b5b60208301915083600182028301111561246d5761246c611e35565b5b9250929050565b60008060006040848603121561248d5761248c611e21565b5b600061249b86828701611f26565b935050602084013567ffffffffffffffff8111156124bc576124bb611e26565b5b6124c88682870161241e565b92509250509250925092565b6000602082840312156124ea576124e9611e21565b5b600082013567ffffffffffffffff81111561250857612507611e26565b5b61251484828501612251565b91505092915050565b7f73686f7020636c6f736564000000000000000000000000000000000000000000600082015250565b6000612553600b83612326565b915061255e8261251d565b602082019050919050565b6000602082019050818103600083015261258281612546565b9050919050565b600060408201905061259e6000830185611f68565b6125ab60208301846120ea565b9392505050565b6000815190506125c1816123c5565b92915050565b6000602082840312156125dd576125dc611e21565b5b60006125eb848285016125b2565b91505092915050565b7f6e6f74206f776e65720000000000000000000000000000000000000000000000600082015250565b600061262a600983612326565b9150612635826125f4565b602082019050919050565b600060208201905081810360008301526126598161261d565b9050919050565b7f696e76616c69642075726920636f756e74000000000000000000000000000000600082015250565b6000612696601183612326565b91506126a182612660565b602082019050919050565b600060208201905081810360008301526126c581612689565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f6e6f206f776e6572206964000000000000000000000000000000000000000000600082015250565b6000612731600b83612326565b915061273c826126fb565b602082019050919050565b6000602082019050818103600083015261276081612724565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006127a1826120e0565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156127d4576127d3612767565b5b600182019050919050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b612814816120e0565b82525050565b6000612826838361280b565b60208301905092915050565b6000602082019050919050565b600061284a826127df565b61285481856127ea565b935061285f836127fb565b8060005b83811015612890578151612877888261281a565b975061288283612832565b925050600181019050612863565b5085935050505092915050565b600082825260208201905092915050565b6000819050919050565b600082825260208201905092915050565b60006128d583856128b8565b93506128e2838584612200565b6128eb83612143565b840190509392505050565b60006129038484846128c9565b90509392505050565b600080fd5b600080fd5b600080fd5b6000808335600160200384360303811261293857612937612916565b5b83810192508235915060208301925067ffffffffffffffff8211156129605761295f61290c565b5b60018202360384131561297657612975612911565b5b509250929050565b6000602082019050919050565b6000612997838561289d565b9350836020840285016129a9846128ae565b8060005b878110156129ef5784840389526129c4828461291b565b6129cf8682846128f6565b95506129da8461297e565b935060208b019a5050506001810190506129ad565b50829750879450505050509392505050565b60006040820190508181036000830152612a1b818661283f565b90508181036020830152612a3081848661298b565b9050949350505050565b60006020820190508181036000830152612a54818461283f565b905092915050565b7f6f6e6c792070726f636573736f72000000000000000000000000000000000000600082015250565b6000612a92600e83612326565b9150612a9d82612a5c565b602082019050919050565b60006020820190508181036000830152612ac181612a85565b9050919050565b7f6974656d206e6f6e2d6578697374000000000000000000000000000000000000600082015250565b6000612afe600e83612326565b9150612b0982612ac8565b602082019050919050565b60006020820190508181036000830152612b2d81612af1565b9050919050565b600080fd5b6000612b4583856127ea565b93507f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831115612b7857612b77612b34565b5b602083029250612b89838584612200565b82840190509392505050565b6000606082019050612baa6000830188611f68565b8181036020830152612bbd818688612b39565b90508181036040830152612bd2818486612b39565b90509695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680612c2557607f821691505b60208210811415612c3957612c38612bde565b5b50919050565b600081519050919050565b6000819050602082019050919050565b6000612c658261231b565b612c6f81856128b8565b9350612c7f818560208601612337565b612c8881612143565b840191505092915050565b6000612c9f8383612c5a565b905092915050565b6000602082019050919050565b6000612cbf82612c3f565b612cc9818561289d565b935083602082028501612cdb85612c4a565b8060005b85811015612d175784840389528151612cf88582612c93565b9450612d0383612ca7565b925060208a01995050600181019050612cdf565b50829750879550505050505092915050565b60006040820190508181036000830152612d43818561283f565b90508181036020830152612d578184612cb4565b90509392505050565b6000606082019050612d756000830186611f68565b8181036020830152612d87818561283f565b90508181036040830152612d9b818461283f565b9050949350505050565b6000819050919050565b6000819050919050565b6000612dd4612dcf612dca84612da5565b612daf565b6120e0565b9050919050565b612de481612db9565b82525050565b6000606082019050612dff6000830186611f68565b612e0c60208301856120ea565b612e196040830184612ddb565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b600060ff82169050919050565b612e6681612e50565b82525050565b6000602082019050612e816000830184612e5d565b92915050565b600067ffffffffffffffff821115612ea257612ea1612154565b5b602082029050602081019050919050565b6000612ec6612ec184612e87565b6121b4565b90508083825260208201905060208402830185811115612ee957612ee8611e35565b5b835b81811015612f125780612efe88826125b2565b845260208401935050602081019050612eeb565b5050509392505050565b600082601f830112612f3157612f30611e2b565b5b8151612f41848260208601612eb3565b91505092915050565b600060208284031215612f6057612f5f611e21565b5b600082015167ffffffffffffffff811115612f7e57612f7d611e26565b5b612f8a84828501612f1c565b91505092915050565b60008115159050919050565b612fa881612f93565b8114612fb357600080fd5b50565b600081519050612fc581612f9f565b92915050565b600060208284031215612fe157612fe0611e21565b5b6000612fef84828501612fb6565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000613054602a83612326565b915061305f82612ff8565b604082019050919050565b6000602082019050818103600083015261308381613047565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b60006130e6602683612326565b91506130f18261308a565b604082019050919050565b60006020820190508181036000830152613115816130d9565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000613152601d83612326565b915061315d8261311c565b602082019050919050565b6000602082019050818103600083015261318181613145565b9050919050565b600081519050919050565b600081905092915050565b60006131a982613188565b6131b38185613193565b93506131c3818560208601612337565b80840191505092915050565b60006131db828461319e565b91508190509291505056fea264697066735822122047d7a8cc48e508d3a4ad485ec4db62cdd9460b0b463cd82624f895fd8c51f5a164736f6c63430008090033a2646970667358221220982e14405241016d623c3346b9e36c696c06b7bd35c3fe73e9e2a367e6eae57f64736f6c63430008090033",
  "libraries": {
    "MerkleMultiProof": "0x260B13D233FDE4ee9929d6E751c4d82C30AD2d67"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "This factory builds your shops and also registers the new shops to be used with the shop item registry.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3369,
        "contract": "contracts/W3ShopFactory.sol:W3ShopFactory",
        "label": "registeredShop",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}