{
  "address": "0x89A0027324d7F5e5837e80C238eA0A0C194FBe58",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "shop",
          "type": "address"
        }
      ],
      "name": "CreatedShop",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "ownerMetaUri",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "shopConfigUri",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "shopContractUri",
              "type": "string"
            },
            {
              "internalType": "contract IW3ShopPaymentProcessor",
              "name": "paymentProcessor",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "paymentReceiver",
              "type": "address"
            }
          ],
          "internalType": "struct W3Shop.InitParams",
          "name": "_params",
          "type": "tuple"
        },
        {
          "internalType": "bytes32",
          "name": "_salt",
          "type": "bytes32"
        }
      ],
      "name": "createShop",
      "outputs": [
        {
          "internalType": "contract W3Shop",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_shop",
          "type": "address"
        }
      ],
      "name": "isW3Shop",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x2c97755227e0ca63556ba02f5b00d7d4af33ac935c5baf06563bf6b3cc66232f",
  "receipt": {
    "to": null,
    "from": "0x3406c6878676A9f7F5F015821bDc477E3b804FB3",
    "contractAddress": "0x89A0027324d7F5e5837e80C238eA0A0C194FBe58",
    "transactionIndex": 1,
    "gasUsed": "3333057",
    "logsBloom": "0x
    "blockHash": "0x49262097a9b52e26fec3ee76bf02b5b9e4361c066c69e1099bd038492d272b4f",
    "transactionHash": "0x2c97755227e0ca63556ba02f5b00d7d4af33ac935c5baf06563bf6b3cc66232f",
    "logs": [],
    "blockNumber": 2040172,
    "cumulativeGasUsed": "3333057",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 4,
  "solcInputHash": "cb41833460cd0bce7288cd00a21a355d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"shop\",\"type\":\"address\"}],\"name\":\"CreatedShop\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"ownerMetaUri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"shopConfigUri\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"shopContractUri\",\"type\":\"string\"},{\"internalType\":\"contract IW3ShopPaymentProcessor\",\"name\":\"paymentProcessor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"paymentReceiver\",\"type\":\"address\"}],\"internalType\":\"struct W3Shop.InitParams\",\"name\":\"_params\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"_salt\",\"type\":\"bytes32\"}],\"name\":\"createShop\",\"outputs\":[{\"internalType\":\"contract W3Shop\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_shop\",\"type\":\"address\"}],\"name\":\"isW3Shop\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"This factory builds your shops and also registers the new shops to be used with the shop item registry.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/W3ShopFactory.sol\":\"W3ShopFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0xa812eed728198acd2c30d06950a5bea8d68436e4f694dd892273266ec2f79f5b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0xd917747dc87f189c6779b894f367a028f9dca4be930283cccec8f312966af820\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC1155/extensions/ERC1155Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1155.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC1155} that allows token holders to destroy both their\\n * own tokens and those that they have been approved to use.\\n *\\n * _Available since v3.1._\\n */\\nabstract contract ERC1155Burnable is ERC1155 {\\n    function burn(\\n        address account,\\n        uint256 id,\\n        uint256 value\\n    ) public virtual {\\n        require(\\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n\\n        _burn(account, id, value);\\n    }\\n\\n    function burnBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory values\\n    ) public virtual {\\n        require(\\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n\\n        _burnBatch(account, ids, values);\\n    }\\n}\\n\",\"keccak256\":\"0x0d960db62b7c6984d4b67602bc3b5c63ba15db63657feedc6c3604eb334fb648\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/common/ERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/common/ERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/IERC2981.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\\n *\\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\\n *\\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\\n * fee is specified in basis points by default.\\n *\\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\\n *\\n * _Available since v4.5._\\n */\\nabstract contract ERC2981 is IERC2981, ERC165 {\\n    struct RoyaltyInfo {\\n        address receiver;\\n        uint96 royaltyFraction;\\n    }\\n\\n    RoyaltyInfo private _defaultRoyaltyInfo;\\n    mapping(uint256 => RoyaltyInfo) private _tokenRoyaltyInfo;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\\n        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC2981\\n     */\\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice) public view virtual override returns (address, uint256) {\\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[_tokenId];\\n\\n        if (royalty.receiver == address(0)) {\\n            royalty = _defaultRoyaltyInfo;\\n        }\\n\\n        uint256 royaltyAmount = (_salePrice * royalty.royaltyFraction) / _feeDenominator();\\n\\n        return (royalty.receiver, royaltyAmount);\\n    }\\n\\n    /**\\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\\n     * override.\\n     */\\n    function _feeDenominator() internal pure virtual returns (uint96) {\\n        return 10000;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information that all ids in this contract will default to.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: invalid receiver\\\");\\n\\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Removes default royalty information.\\n     */\\n    function _deleteDefaultRoyalty() internal virtual {\\n        delete _defaultRoyaltyInfo;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setTokenRoyalty(\\n        uint256 tokenId,\\n        address receiver,\\n        uint96 feeNumerator\\n    ) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: Invalid parameters\\\");\\n\\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Resets royalty information for the token id back to the global default.\\n     */\\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\\n        delete _tokenRoyaltyInfo[tokenId];\\n    }\\n}\\n\",\"keccak256\":\"0x9bc4d7eb03c4e87fd5122e03cdff5f60fa360d76925980ad022b2c6fac9876f3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/IW3ShopPaymentProcessor.sol\":{\"content\":\"//SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.17;\\n\\ninterface IW3ShopPaymentProcessor {\\n    struct BuyParams {\\n        address payable shop;\\n        uint32[] amounts;\\n        uint256[] prices;\\n        uint256[] itemIds;\\n        bytes32[] proofs;\\n        bool[] proofFlags;\\n    }\\n\\n    /**\\n     * @dev Handles the buy process if ETH is used as a currency inside the shop.\\n     */\\n    function buyWithEther(BuyParams calldata _params) external payable;\\n\\n    /**\\n     * @dev Handles the buy process if an arbitrary token is used for the shop.\\n     */\\n    function buyWithToken(address _token, BuyParams calldata _params) external;\\n}\\n\",\"keccak256\":\"0x94f57582fd350302cf3a374ba0ae9acc4e330b4ec229a1630cade566bb2de6e6\",\"license\":\"GPL-3.0\"},\"contracts/W3Shop.sol\":{\"content\":\"//SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.17;\\n\\nimport \\\"./IW3ShopPaymentProcessor.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Burnable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/common/ERC2981.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\n\\n/**\\n * @title Implementation of the W3Shop protocoll, a decentralized, self-owned web shop.\\n *\\n * @notice It allows customer to buy ownership rights of digital items in the form of NFTs. The\\n * way this contract is setup those NFTs can be used together with Bundlr or Arweave/IPFS\\n * to host the payload and decrypt its content if a user ownes the NFT.\\n */\\ncontract W3Shop is ERC165, ERC2981, ERC1155Burnable {\\n    using Counters for Counters.Counter;\\n    /// @dev Constant that is used that ETH as currency and not a token should be used.\\n    address public constant CURRENCY_ETH = address(0);\\n\\n    uint256 private constant MAX_ITEM_COUNT = type(uint256).max;\\n\\n    /// @dev The token id that determines ownership over this shop.\\n    uint256 private constant OWNER_TOKEN_ID = 0;\\n\\n    event AddedShopItems(uint256[] ids);\\n    event Buy(address indexed buyer, uint256[] items, uint32[] amounts);\\n    event ShopClosed();\\n\\n    struct PreparedItem {\\n        uint32 maxItemCount;\\n        uint256 currentCount;\\n    }\\n\\n    struct InitParams {\\n        address owner;\\n        string name;\\n        string ownerMetaUri;\\n        string shopConfigUri;\\n        string shopContractUri;\\n        IW3ShopPaymentProcessor paymentProcessor;\\n        address paymentReceiver;\\n    }\\n\\n    /**\\n     * @dev The payment processor that the shop owner wishes to use. It processes\\n     * all the payments and calls into the shop after payment was received.\\n     */\\n    IW3ShopPaymentProcessor private paymentProcessor;\\n\\n    /**\\n     * @dev Contains the  root hash of the merkle tree for the items that are sold.\\n     */\\n    bytes32 private itemsRoot;\\n\\n    /**\\n     * @dev Arweave (starts with ar://<ID>) or IPFS (starts with ipfs://<ID>) URI that\\n     * points to the config of this shop.\\n     */\\n    string private shopConfig;\\n\\n    /**\\n     * @dev This also determines the maximum number of items.  If set to 1 it means an item\\n     * can be sold unlimited times.\\n     * If its set to a number n > 1, it can only be sold n - 1 times. Also tracks the current\\n     * item count.\\n     */\\n    mapping(uint256 => PreparedItem) private preparedItems;\\n\\n    /**\\n     * @dev Token ID to custom URI mapping (we need a own one for each token)\\n     */\\n    mapping(uint256 => string) private uris;\\n\\n    /**\\n     * @dev Flag that indicates if the shop if open or closed. A closed shop won't process anymore\\n     * item buys, but existing, bought items can still be traded or decrypted.\\n     */\\n    bool private isOpen = true;\\n\\n    /**\\n     * @dev The address that will receive the payments in ETH or tokens.\\n     */\\n    address private paymentReceiver;\\n\\n    Counters.Counter private nextTokenId;\\n\\n    /**\\n     * @dev ERC20/ERC1155 compatible token as accepted currency. Or the 0x0 address\\n     * if Ether is accepted.\\n     */\\n    address private acceptedCurrency = CURRENCY_ETH;\\n\\n    /**\\n     * @dev Contract name, mainly for OpenSea / Marketplaces\\n     */\\n    string public name = \\\"W3Shop Digital Items\\\";\\n\\n    /**\\n     * @dev Contract symbol, mainly for OpenSea / Marketplaces. It is the same accross\\n     * all shops.\\n     */\\n    string public symbol = \\\"W3SITM\\\";\\n\\n    /**\\n     * @dev OpenSea / Marketplaces query this metadata that can be used to\\n     */\\n    string private contractUri;\\n\\n    modifier onlyShopOwner() {\\n        require(balanceOf(msg.sender, OWNER_TOKEN_ID) > 0, \\\"not owner\\\");\\n        _;\\n    }\\n\\n    modifier isShopOpen() {\\n        require(isOpen, \\\"shop closed\\\");\\n        _;\\n    }\\n\\n    modifier onlyPaymentProcessor() {\\n        require(msg.sender == address(paymentProcessor), \\\"only processor\\\");\\n        _;\\n    }\\n\\n    /**\\n     * Default Ctor\\n     */\\n    constructor() ERC1155(\\\"\\\") {\\n        // nop\\n    }\\n\\n    function contractURI() public view returns (string memory) {\\n        return contractUri;\\n    }\\n\\n    function setContractURI(string calldata _contractUri)\\n        external\\n        onlyShopOwner\\n    {\\n        contractUri = _contractUri;\\n    }\\n\\n    function setName(string calldata _name) external onlyShopOwner {\\n        name = _name;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC1155, ERC2981, ERC165)\\n        returns (bool)\\n    {\\n        return\\n            ERC1155.supportsInterface(interfaceId) ||\\n            ERC2981.supportsInterface(interfaceId) ||\\n            ERC165.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev MUST be called after the shop was created to finalize the shops creation.\\n     * This is done so the shops address can be pre-calculated for setting up the\\n     * the metadata before the shops creation takes place.\\n     */\\n    function initialize(InitParams calldata _params) external {\\n        require(nextTokenId.current() == 0, \\\"already initialized\\\");\\n        nextTokenId.increment();\\n\\n        name = _params.name;\\n        shopConfig = _params.shopConfigUri;\\n        paymentProcessor = _params.paymentProcessor;\\n        paymentReceiver = _params.paymentReceiver;\\n        contractUri = _params.shopContractUri;\\n\\n        // Mint the owner NFT\\n        uris[OWNER_TOKEN_ID] = _params.ownerMetaUri;\\n\\n        _mint(_params.owner, OWNER_TOKEN_ID, 1, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the next to be used item id\\n     */\\n    function getNextItemId() external view returns (uint256) {\\n        return nextTokenId.current();\\n    }\\n\\n    /**\\n     * @dev Shops can use this method to register new items for selling inside this contract.\\n     *\\n     * After the metadata was generated and uploaded this method can be used to prepare the items\\n     * for selling within this shop contract.\\n     */\\n    function prepareItems(\\n        string[] calldata _uris,\\n        uint32[] calldata _maxAmounts\\n    ) external onlyShopOwner {\\n        require(_uris.length <= 5 && _uris.length > 0, \\\"invalid uri count\\\");\\n        require(_uris.length == _maxAmounts.length, \\\"unequal length\\\");\\n        require(nextTokenId.current() > 0);\\n\\n        // Keep track of created IDs, for the event\\n        uint256[] memory createdIds = new uint256[](_uris.length);\\n\\n        for (uint256 i = 0; i < _uris.length; i++) {\\n            bytes memory tempUriStr = bytes(_uris[i]);\\n            require(tempUriStr.length > 0, \\\"uri empty\\\");\\n\\n            bytes storage tempStorageStr = bytes(uris[nextTokenId.current()]);\\n            require(tempStorageStr.length == 0, \\\"slot used\\\");\\n\\n            uint256 currentId = nextTokenId.current();\\n            createdIds[i] = currentId;\\n            uris[currentId] = _uris[i];\\n\\n            // Must be one less than max so we can use 1 as our \\\"flag\\\".\\n            require(_maxAmounts[i] < type(uint32).max);\\n\\n            uint32 maxItemCount;\\n            if (_maxAmounts[i] == 0) {\\n                maxItemCount = 1;\\n            } else {\\n                maxItemCount = _maxAmounts[i] + 1;\\n            }\\n\\n            // Require unused slot here too\\n            require(preparedItems[currentId].maxItemCount == 0);\\n\\n            preparedItems[currentId] = PreparedItem(maxItemCount, 0);\\n            nextTokenId.increment();\\n        }\\n\\n        emit AddedShopItems(createdIds);\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information for a specific token id.\\n     *\\n     * Requirements:\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function setTokenRoyalty(\\n        uint256 tokenId,\\n        address receiver,\\n        uint96 feeNumerator\\n    ) external onlyShopOwner {\\n        require(nextTokenId.current() > tokenId, \\\"item not prepared\\\");\\n\\n        _setTokenRoyalty(tokenId, receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Returns the URI for every token.\\n     */\\n    function uri(uint256 id)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (string memory)\\n    {\\n        return uris[id];\\n    }\\n\\n    function setAcceptedCurrency(address _acceptedCurrency)\\n        external\\n        onlyShopOwner\\n    {\\n        acceptedCurrency = _acceptedCurrency;\\n    }\\n\\n    function getAcceptedCurrency() external view returns (address) {\\n        return acceptedCurrency;\\n    }\\n\\n    function setPaymentReceiver(address _receiver) external onlyShopOwner {\\n        paymentReceiver = _receiver;\\n    }\\n\\n    function getPaymentReceiver() external view returns (address) {\\n        return paymentReceiver;\\n    }\\n\\n    function setConfig(string memory _shopConfig) external onlyShopOwner {\\n        shopConfig = _shopConfig;\\n    }\\n\\n    function getConfig() external view returns (string memory) {\\n        return shopConfig;\\n    }\\n\\n    /**\\n     * @dev Sets both the shopConfig and the Merkle root of the sold items. Its useful because after a\\n     * change to the shop, usually both values needs to be updated. Saves one TX.\\n     */\\n    function setConfigRoot(string memory _shopConfig, bytes32 _itemsRoot)\\n        external\\n        onlyShopOwner\\n    {\\n        shopConfig = _shopConfig;\\n        itemsRoot = _itemsRoot;\\n    }\\n\\n    function setPaymentProcessor(IW3ShopPaymentProcessor _paymentProcessor)\\n        external\\n        onlyShopOwner\\n    {\\n        require(address(_paymentProcessor) != address(0), \\\"invalid proc\\\");\\n        paymentProcessor = _paymentProcessor;\\n    }\\n\\n    function getPaymentProcessor()\\n        external\\n        view\\n        returns (IW3ShopPaymentProcessor)\\n    {\\n        return paymentProcessor;\\n    }\\n\\n    function setItemsRoot(bytes32 _itemsRoot) external onlyShopOwner {\\n        itemsRoot = _itemsRoot;\\n    }\\n\\n    function getItemsRoot() external view returns (bytes32) {\\n        return itemsRoot;\\n    }\\n\\n    /**\\n     * This function requires the bought items and collections with their prices.\\n     * It checks if the given prices are correct to the anchored Merkle root and\\n     * checks if the amount of ETH send equals the required payment.\\n     * If this works it will batch mint the owner NFTs.\\n     */\\n    function buy(\\n        address _receiver,\\n        uint32[] calldata _amounts,\\n        uint256[] calldata _itemIds\\n    ) external isShopOpen onlyPaymentProcessor {\\n        require(_amounts.length == _itemIds.length);\\n\\n        for (uint256 i = 0; i < _itemIds.length; i++) {\\n            // Item must be already prepared\\n            // bytes storage tempUriStr = bytes(uris[_itemIds[i]]);\\n            // require(tempUriStr.length != 0, \\\"item not prepared\\\");\\n            require(_itemIds[i] != OWNER_TOKEN_ID, \\\"invalid item\\\");\\n\\n            // Check if every item is actually owned by this shop.\\n            // The owner item is not an existing shop item! So this also prevents\\n            // minting additional owner tokens\\n            requireItemAvailable(_itemIds[i], _amounts[i]);\\n            preparedItems[_itemIds[i]].currentCount += _amounts[i];\\n        }\\n\\n        _mintBatch(_receiver, _itemIds, conversion(_amounts), \\\"\\\");\\n\\n        emit Buy(_receiver, _itemIds, _amounts);\\n    }\\n\\n    function conversion(uint32[] calldata array8)\\n        private\\n        pure\\n        returns (uint256[] memory)\\n    {\\n        uint256[] memory array256 = new uint256[](array8.length);\\n        for (uint256 i = 0; i < array8.length; i++) {\\n            array256[i] = array8[i];\\n        }\\n\\n        return array256;\\n    }\\n\\n    function requireItemAvailable(uint256 _itemId, uint256 _amount)\\n        private\\n        view\\n    {\\n        uint256 maxItemAmount = getMaximumItemCount(_itemId);\\n        uint256 availableItems = maxItemAmount -\\n            preparedItems[_itemId].currentCount;\\n\\n        require(availableItems >= _amount, \\\"sold out\\\");\\n    }\\n\\n    function closeShop() external onlyShopOwner {\\n        _burn(msg.sender, OWNER_TOKEN_ID, 1);\\n        isOpen = false;\\n        paymentReceiver = address(0);\\n\\n        emit ShopClosed();\\n    }\\n\\n    function isShopOpened() external view returns (bool) {\\n        return isOpen;\\n    }\\n\\n    function getCurrentItemCount(uint256 _itemId)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return preparedItems[_itemId].currentCount;\\n    }\\n\\n    function getMaximumItemCount(uint256 _itemId)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint32 maxItemCount = preparedItems[_itemId].maxItemCount;\\n        require(maxItemCount != 0, \\\"item not prepared\\\");\\n\\n        if (maxItemCount == 1) {\\n            return MAX_ITEM_COUNT;\\n        } else {\\n            return maxItemCount - 1;\\n        }\\n    }\\n\\n    function isShopOwner(address _address) external view returns (bool) {\\n        return balanceOf(_address, OWNER_TOKEN_ID) > 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf42e5d1b76960bebc8833838a70eb3d42f44e8ad4ec80b4e434e37ca4587b33e\",\"license\":\"GPL-3.0\"},\"contracts/W3ShopFactory.sol\":{\"content\":\"//SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.17;\\n\\nimport \\\"./IW3ShopPaymentProcessor.sol\\\";\\nimport \\\"./W3Shop.sol\\\";\\n\\n/**\\n * This factory builds your shops and also registers the new shops to be used with the\\n * shop item registry.\\n */\\ncontract W3ShopFactory {\\n    event CreatedShop(address indexed owner, address shop);\\n\\n    mapping(address => bool) private createdShop;\\n\\n    function createShop(\\n        W3Shop.InitParams calldata _params,\\n        bytes32 _salt\\n    ) external returns (W3Shop) {\\n        bytes32 hashedSalt = keccak256(abi.encodePacked(_params.owner, _salt));\\n        W3Shop shop = new W3Shop{salt: hashedSalt}();\\n\\n        require(!createdShop[address(shop)]);\\n        createdShop[address(shop)] = true;\\n\\n        shop.initialize(_params);\\n\\n        emit CreatedShop(_params.owner, address(shop));\\n\\n        return shop;\\n    }\\n\\n    function isW3Shop(address _shop) external view returns (bool) {\\n        return createdShop[_shop];\\n    }\\n}\\n\",\"keccak256\":\"0x51fc7d577bb6793dc95644052cf1c3c6ba155c032eeadd44bf9dda92969432ab\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50613b56806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063192db4a31461003b57806330c3f70a1461006b575b600080fd5b61004e610049366004610232565b6100a7565b6040516001600160a01b0390911681526020015b60405180910390f35b6100976100793660046102a4565b6001600160a01b031660009081526020819052604090205460ff1690565b6040519015158152602001610062565b6000806100b760208501856102a4565b836040516020016100e692919060609290921b6bffffffffffffffffffffffff19168252601482015260340190565b60405160208183030381529060405280519060200120905060008160405161010d90610225565b8190604051809103906000f590508015801561012d573d6000803e3d6000fd5b506001600160a01b03811660009081526020819052604090205490915060ff161561015757600080fd5b6001600160a01b03811660008181526020819052604090819020805460ff1916600117905551633baf956f60e11b815263775f2ade9061019b90889060040161033e565b600060405180830381600087803b1580156101b557600080fd5b505af11580156101c9573d6000803e3d6000fd5b506101db9250505060208601866102a4565b6040516001600160a01b03838116825291909116907fd6b434e79371595913d34cffa4851f22b193358eb518041dbf395c56b295dce29060200160405180910390a2949350505050565b6136e18061044083390190565b6000806040838503121561024557600080fd5b823567ffffffffffffffff81111561025c57600080fd5b830160e0818603121561026e57600080fd5b946020939093013593505050565b6001600160a01b038116811461029157600080fd5b50565b803561029f8161027c565b919050565b6000602082840312156102b657600080fd5b81356102c18161027c565b9392505050565b6000808335601e198436030181126102df57600080fd5b830160208101925035905067ffffffffffffffff8111156102ff57600080fd5b80360382131561030e57600080fd5b9250929050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b602081526000823561034f8161027c565b6001600160a01b031660208381019190915261036d908401846102c8565b60e0604085015261038361010085018284610315565b91505061039360408501856102c8565b601f19808685030160608701526103ab848385610315565b93506103ba60608801886102c8565b93509150808685030160808701526103d3848484610315565b93506103e260808801886102c8565b93509150808685030160a0870152506103fc838383610315565b9250505061040c60a08501610294565b6001600160a01b03811660c08501525061042860c08501610294565b6001600160a01b03811660e085015250939250505056fe600a805460ff19166001179055600c80546001600160a01b031916905560c0604052601460809081527f573353686f70204469676974616c204974656d7300000000000000000000000060a052600d906200005b90826200016f565b5060408051808201909152600681526557335349544d60d01b6020820152600e906200008890826200016f565b503480156200009657600080fd5b50604080516020810190915260008152620000b181620000b8565b506200023b565b6004620000c682826200016f565b5050565b634e487b7160e01b600052604160045260246000fd5b600181811c90821680620000f557607f821691505b6020821081036200011657634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200016a57600081815260208120601f850160051c81016020861015620001455750805b601f850160051c820191505b81811015620001665782815560010162000151565b5050505b505050565b81516001600160401b038111156200018b576200018b620000ca565b620001a3816200019c8454620000e0565b846200011c565b602080601f831160018114620001db5760008415620001c25750858301515b600019600386901b1c1916600185901b17855562000166565b600085815260208120601f198616915b828110156200020c57888601518255948401946001909101908401620001eb565b50858210156200022b5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b613496806200024b6000396000f3fe608060405234801561001057600080fd5b50600436106102315760003560e01c80637c5b3d9a11610130578063c3f909d4116100b8578063e8a3d4851161007c578063e8a3d485146104d5578063e985e9c5146104dd578063f242432a14610519578063f5298aca1461052c578063ffc2e9af1461053f57600080fd5b8063c3f909d414610489578063c47f002714610491578063d07547f5146104a4578063d11db010146104ba578063dd813003146104cd57600080fd5b806395d89b41116100ff57806395d89b41146104305780639b6dbc8a14610438578063a22cb46514610440578063ae5d957514610453578063b9d7e9fb1461046657600080fd5b80637c5b3d9a146103f9578063882b02071461040157806390c067d914610412578063938e3d7b1461041d57600080fd5b806342a03095116101be57806365ebf99a1161018257806365ebf99a146103935780636b20c454146103a657806373fa4e6e146103b9578063775f2ade146103de57806377b43c08146103f157600080fd5b806342a03095146103275780634e1273f41461033a57806353c6b20f1461035a5780635944c7531461036d57806361b36d8d1461038057600080fd5b80630e89341c116102055780630e89341c146102a95780632296070c146102bc57806324573ec5146102cf5780632a55205a146102e25780632eb2c2d61461031457600080fd5b8062fdd58e1461023657806301ffc9a71461025c57806306fdde031461027f578063088b0d7514610294575b600080fd5b61024961024436600461244a565b610552565b6040519081526020015b60405180910390f35b61026f61026a36600461248c565b6105ed565b6040519015158152602001610253565b610287610626565b60405161025391906124f6565b6102a76102a2366004612509565b6106b4565b005b6102876102b7366004612526565b610745565b6102a76102ca366004612583565b6107e7565b6102a76102dd366004612526565b610a58565b6102f56102f0366004612605565b610a87565b604080516001600160a01b039093168352602083019190915201610253565b6102a7610322366004612770565b610b35565b6102a7610335366004612509565b610b81565b61034d61034836600461281d565b610bcd565b6040516102539190612924565b6102a7610368366004612937565b610cf6565b6102a761037b36600461297b565b610d33565b61024961038e366004612526565b610db8565b6102a76103a1366004612509565b610e46565b6102a76103b43660046129c9565b610e98565b600c546001600160a01b03165b6040516001600160a01b039091168152602001610253565b6102a76103ec366004612a3e565b610edb565b61024961105a565b600654610249565b6005546001600160a01b03166103c6565b600a5460ff1661026f565b6102a761042b366004612a78565b61106a565b6102876110a1565b6102a76110ae565b6102a761044e366004612ae9565b611120565b61026f610461366004612509565b61112f565b610249610474366004612526565b60009081526008602052604090206001015490565b610287611144565b6102a761049f366004612a78565b6111d6565b600a5461010090046001600160a01b03166103c6565b6102a76104c8366004612b27565b61120d565b6103c6600081565b610287611243565b61026f6104eb366004612b63565b6001600160a01b03918216600090815260036020908152604080832093909416825291909152205460ff1690565b6102a7610527366004612b91565b611252565b6102a761053a366004612bf9565b611297565b6102a761054d366004612c2e565b6112da565b60006001600160a01b0383166105c25760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201526930b634b21037bbb732b960b11b60648201526084015b60405180910390fd5b5060008181526002602090815260408083206001600160a01b03861684529091529020545b92915050565b60006105f8826116cf565b8061060757506106078261170b565b806105e757506301ffc9a760e01b6001600160e01b03198316146105e7565b600d805461063390612c99565b80601f016020809104026020016040519081016040528092919081815260200182805461065f90612c99565b80156106ac5780601f10610681576101008083540402835291602001916106ac565b820191906000526020600020905b81548152906001019060200180831161068f57829003601f168201915b505050505081565b60006106c1336000610552565b116106de5760405162461bcd60e51b81526004016105b990612ccd565b6001600160a01b0381166107235760405162461bcd60e51b815260206004820152600c60248201526b696e76616c69642070726f6360a01b60448201526064016105b9565b600580546001600160a01b0319166001600160a01b0392909216919091179055565b600081815260096020526040902080546060919061076290612c99565b80601f016020809104026020016040519081016040528092919081815260200182805461078e90612c99565b80156107db5780601f106107b0576101008083540402835291602001916107db565b820191906000526020600020905b8154815290600101906020018083116107be57829003601f168201915b50505050509050919050565b600a5460ff166108275760405162461bcd60e51b815260206004820152600b60248201526a1cda1bdc0818db1bdcd95960aa1b60448201526064016105b9565b6005546001600160a01b031633146108725760405162461bcd60e51b815260206004820152600e60248201526d37b7363c90383937b1b2b9b9b7b960911b60448201526064016105b9565b82811461087e57600080fd5b60005b818110156109b057600083838381811061089d5761089d612cf0565b90506020020135036108e05760405162461bcd60e51b815260206004820152600c60248201526b696e76616c6964206974656d60a01b60448201526064016105b9565b61092e8383838181106108f5576108f5612cf0565b9050602002013586868481811061090e5761090e612cf0565b90506020020160208101906109239190612d1f565b63ffffffff16611740565b84848281811061094057610940612cf0565b90506020020160208101906109559190612d1f565b63ffffffff166008600085858581811061097157610971612cf0565b90506020020135815260200190815260200160002060010160008282546109989190612d50565b909155508190506109a881612d63565b915050610881565b50610a0a858383808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506109f592508991508890506117ae565b6040518060200160405280600081525061185d565b846001600160a01b03167f22cf32aed5c92728d6ed23e24a9b8845e481aab2302fb194cbd1d289aafa3fea83838787604051610a499493929190612d7c565b60405180910390a25050505050565b6000610a65336000610552565b11610a825760405162461bcd60e51b81526004016105b990612ccd565b600655565b60008281526001602090815260408083208151808301909252546001600160a01b038116808352600160a01b9091046001600160601b0316928201929092528291610afc5750604080518082019091526000546001600160a01b0381168252600160a01b90046001600160601b031660208201525b602081015160009061271090610b1b906001600160601b031687612e01565b610b259190612e18565b91519350909150505b9250929050565b6001600160a01b038516331480610b515750610b5185336104eb565b610b6d5760405162461bcd60e51b81526004016105b990612e3a565b610b7a85858585856119a9565b5050505050565b6000610b8e336000610552565b11610bab5760405162461bcd60e51b81526004016105b990612ccd565b600c80546001600160a01b0319166001600160a01b0392909216919091179055565b60608151835114610c325760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b60648201526084016105b9565b600083516001600160401b03811115610c4d57610c4d612627565b604051908082528060200260200182016040528015610c76578160200160208202803683370190505b50905060005b8451811015610cee57610cc1858281518110610c9a57610c9a612cf0565b6020026020010151858381518110610cb457610cb4612cf0565b6020026020010151610552565b828281518110610cd357610cd3612cf0565b6020908102919091010152610ce781612d63565b9050610c7c565b509392505050565b6000610d03336000610552565b11610d205760405162461bcd60e51b81526004016105b990612ccd565b6007610d2c8382612ece565b5060065550565b6000610d40336000610552565b11610d5d5760405162461bcd60e51b81526004016105b990612ccd565b82610d67600b5490565b11610da85760405162461bcd60e51b81526020600482015260116024820152701a5d195b481b9bdd081c1c995c185c9959607a1b60448201526064016105b9565b610db3838383611b48565b505050565b60008181526008602052604081205463ffffffff16808203610e105760405162461bcd60e51b81526020600482015260116024820152701a5d195b481b9bdd081c1c995c185c9959607a1b60448201526064016105b9565b8063ffffffff16600103610e28575060001992915050565b610e33600182612f8d565b63ffffffff169392505050565b50919050565b6000610e53336000610552565b11610e705760405162461bcd60e51b81526004016105b990612ccd565b600a80546001600160a01b0390921661010002610100600160a81b0319909216919091179055565b6001600160a01b038316331480610eb45750610eb483336104eb565b610ed05760405162461bcd60e51b81526004016105b990612e3a565b610db3838383611c56565b600b5415610f215760405162461bcd60e51b8152602060048201526013602482015272185b1c9958591e481a5b9a5d1a585b1a5e9959606a1b60448201526064016105b9565b610f2f600b80546001019055565b610f3c6020820182612fb1565b600d91610f4a919083612ff7565b50610f586060820182612fb1565b600791610f66919083612ff7565b50610f7760c0820160a08301612509565b600580546001600160a01b0319166001600160a01b0392909216919091179055610fa760e0820160c08301612509565b600a80546001600160a01b039290921661010002610100600160a81b0319909216919091179055610fdb6080820182612fb1565b600f91610fe9919083612ff7565b50610ff76040820182612fb1565b6000805260096020527fec8156718a8372b1db44bb411437d0870f3e3790d4a08526d024ce1b0b668f6b9161102d919083612ff7565b5061105761103e6020830183612509565b6000600160405180602001604052806000815250611de3565b50565b6000611065600b5490565b905090565b6000611077336000610552565b116110945760405162461bcd60e51b81526004016105b990612ccd565b600f610db3828483612ff7565b600e805461063390612c99565b60006110bb336000610552565b116110d85760405162461bcd60e51b81526004016105b990612ccd565b6110e53360006001611ebf565b600a80546001600160a81b03191690556040517f589bfff7e7b59e33b97fa923dbc99256a6d2fdf9a631b431fa2dc06f4eea0ded90600090a1565b61112b338383611fc6565b5050565b60008061113d836000610552565b1192915050565b60606007805461115390612c99565b80601f016020809104026020016040519081016040528092919081815260200182805461117f90612c99565b80156111cc5780601f106111a1576101008083540402835291602001916111cc565b820191906000526020600020905b8154815290600101906020018083116111af57829003601f168201915b5050505050905090565b60006111e3336000610552565b116112005760405162461bcd60e51b81526004016105b990612ccd565b600d610db3828483612ff7565b600061121a336000610552565b116112375760405162461bcd60e51b81526004016105b990612ccd565b600761112b8282612ece565b6060600f805461115390612c99565b6001600160a01b03851633148061126e575061126e85336104eb565b61128a5760405162461bcd60e51b81526004016105b990612e3a565b610b7a85858585856120a6565b6001600160a01b0383163314806112b357506112b383336104eb565b6112cf5760405162461bcd60e51b81526004016105b990612e3a565b610db3838383611ebf565b60006112e7336000610552565b116113045760405162461bcd60e51b81526004016105b990612ccd565b6005831180159061131457508215155b6113545760405162461bcd60e51b81526020600482015260116024820152701a5b9d985b1a59081d5c9a4818dbdd5b9d607a1b60448201526064016105b9565b8281146113945760405162461bcd60e51b815260206004820152600e60248201526d0eadccae2eac2d840d8cadccee8d60931b60448201526064016105b9565b600061139f600b5490565b116113a957600080fd5b6000836001600160401b038111156113c3576113c3612627565b6040519080825280602002602001820160405280156113ec578160200160208202803683370190505b50905060005b8481101561169057600086868381811061140e5761140e612cf0565b90506020028101906114209190612fb1565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050825192935050506114915760405162461bcd60e51b815260206004820152600960248201526875726920656d70747960b81b60448201526064016105b9565b6000600960006114a0600b5490565b815260200190815260200160002090508080546114bc90612c99565b1590506114f75760405162461bcd60e51b81526020600482015260096024820152681cdb1bdd081d5cd95960ba1b60448201526064016105b9565b6000611502600b5490565b90508085858151811061151757611517612cf0565b60200260200101818152505088888581811061153557611535612cf0565b90506020028101906115479190612fb1565b600083815260096020526040902091611561919083612ff7565b5063ffffffff87878681811061157957611579612cf0565b905060200201602081019061158e9190612d1f565b63ffffffff161061159e57600080fd5b60008787868181106115b2576115b2612cf0565b90506020020160208101906115c79190612d1f565b63ffffffff166000036115dc57506001611611565b8787868181106115ee576115ee612cf0565b90506020020160208101906116039190612d1f565b61160e9060016130b6565b90505b60008281526008602052604090205463ffffffff161561163057600080fd5b60408051808201825263ffffffff83811682526000602080840182815287835260089091529390209151825463ffffffff191691161781559051600191820155600b8054909101905550505050808061168890612d63565b9150506113f2565b507f52e5f0458c75f7346ac3a65c652b4a2534b2ce17ee9a9f93ad9922d4a38856e9816040516116c09190612924565b60405180910390a15050505050565b60006001600160e01b03198216636cdb3d1360e11b148061170057506001600160e01b031982166303a24d0760e21b145b806105e757506105e7825b60006001600160e01b0319821663152a902d60e11b14806105e757506301ffc9a760e01b6001600160e01b03198316146105e7565b600061174b83610db8565b6000848152600860205260408120600101549192509061176b90836130d3565b9050828110156117a85760405162461bcd60e51b81526020600482015260086024820152671cdbdb19081bdd5d60c21b60448201526064016105b9565b50505050565b60606000826001600160401b038111156117ca576117ca612627565b6040519080825280602002602001820160405280156117f3578160200160208202803683370190505b50905060005b83811015610cee5784848281811061181357611813612cf0565b90506020020160208101906118289190612d1f565b63ffffffff1682828151811061184057611840612cf0565b60209081029190910101528061185581612d63565b9150506117f9565b6001600160a01b0384166118835760405162461bcd60e51b81526004016105b9906130e6565b81518351146118a45760405162461bcd60e51b81526004016105b990613127565b3360005b8451811015611941578381815181106118c3576118c3612cf0565b6020026020010151600260008784815181106118e1576118e1612cf0565b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b0316815260200190815260200160002060008282546119299190612d50565b9091555081905061193981612d63565b9150506118a8565b50846001600160a01b031660006001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb878760405161199292919061316f565b60405180910390a4610b7a816000878787876121d4565b81518351146119ca5760405162461bcd60e51b81526004016105b990613127565b6001600160a01b0384166119f05760405162461bcd60e51b81526004016105b99061319d565b3360005b8451811015611ada576000858281518110611a1157611a11612cf0565b602002602001015190506000858381518110611a2f57611a2f612cf0565b60209081029190910181015160008481526002835260408082206001600160a01b038e168352909352919091205490915081811015611a805760405162461bcd60e51b81526004016105b9906131e2565b60008381526002602090815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290611abf908490612d50565b9250508190555050505080611ad390612d63565b90506119f4565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611b2a92919061316f565b60405180910390a4611b408187878787876121d4565b505050505050565b6127106001600160601b0382161115611bb65760405162461bcd60e51b815260206004820152602a60248201527f455243323938313a20726f79616c7479206665652077696c6c206578636565646044820152692073616c65507269636560b01b60648201526084016105b9565b6001600160a01b038216611c0c5760405162461bcd60e51b815260206004820152601b60248201527f455243323938313a20496e76616c696420706172616d6574657273000000000060448201526064016105b9565b6040805180820182526001600160a01b0393841681526001600160601b0392831660208083019182526000968752600190529190942093519051909116600160a01b029116179055565b6001600160a01b038316611c7c5760405162461bcd60e51b81526004016105b99061322c565b8051825114611c9d5760405162461bcd60e51b81526004016105b990613127565b604080516020810190915260009081905233905b8351811015611d76576000848281518110611cce57611cce612cf0565b602002602001015190506000848381518110611cec57611cec612cf0565b60209081029190910181015160008481526002835260408082206001600160a01b038c168352909352919091205490915081811015611d3d5760405162461bcd60e51b81526004016105b99061326f565b60009283526002602090815260408085206001600160a01b038b1686529091529092209103905580611d6e81612d63565b915050611cb1565b5060006001600160a01b0316846001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051611dc792919061316f565b60405180910390a46040805160208101909152600090526117a8565b6001600160a01b038416611e095760405162461bcd60e51b81526004016105b9906130e6565b336000611e158561232f565b90506000611e228561232f565b905060008681526002602090815260408083206001600160a01b038b16845290915281208054879290611e56908490612d50565b909155505060408051878152602081018790526001600160a01b03808a1692600092918716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4611eb68360008989898961237a565b50505050505050565b6001600160a01b038316611ee55760405162461bcd60e51b81526004016105b99061322c565b336000611ef18461232f565b90506000611efe8461232f565b6040805160208082018352600091829052888252600281528282206001600160a01b038b1683529052205490915084811015611f4c5760405162461bcd60e51b81526004016105b99061326f565b60008681526002602090815260408083206001600160a01b038b81168086529184528285208a8703905582518b81529384018a90529092908816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4604080516020810190915260009052611eb6565b816001600160a01b0316836001600160a01b0316036120395760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b60648201526084016105b9565b6001600160a01b03838116600081815260036020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b0384166120cc5760405162461bcd60e51b81526004016105b99061319d565b3360006120d88561232f565b905060006120e58561232f565b905060008681526002602090815260408083206001600160a01b038c1684529091529020548581101561212a5760405162461bcd60e51b81526004016105b9906131e2565b60008781526002602090815260408083206001600160a01b038d8116855292528083208985039055908a16825281208054889290612169908490612d50565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46121c9848a8a8a8a8a61237a565b505050505050505050565b6001600160a01b0384163b15611b405760405163bc197c8160e01b81526001600160a01b0385169063bc197c819061221890899089908890889088906004016132b3565b6020604051808303816000875af1925050508015612253575060408051601f3d908101601f1916820190925261225091810190613311565b60015b6122ff5761225f61332e565b806308c379a003612298575061227361334a565b8061227e575061229a565b8060405162461bcd60e51b81526004016105b991906124f6565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e2d455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b60648201526084016105b9565b6001600160e01b0319811663bc197c8160e01b14611eb65760405162461bcd60e51b81526004016105b9906133d3565b6040805160018082528183019092526060916000919060208083019080368337019050509050828160008151811061236957612369612cf0565b602090810291909101015292915050565b6001600160a01b0384163b15611b405760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e61906123be908990899088908890889060040161341b565b6020604051808303816000875af19250505080156123f9575060408051601f3d908101601f191682019092526123f691810190613311565b60015b6124055761225f61332e565b6001600160e01b0319811663f23a6e6160e01b14611eb65760405162461bcd60e51b81526004016105b9906133d3565b6001600160a01b038116811461105757600080fd5b6000806040838503121561245d57600080fd5b823561246881612435565b946020939093013593505050565b6001600160e01b03198116811461105757600080fd5b60006020828403121561249e57600080fd5b81356124a981612476565b9392505050565b6000815180845260005b818110156124d6576020818501810151868301820152016124ba565b506000602082860101526020601f19601f83011685010191505092915050565b6020815260006124a960208301846124b0565b60006020828403121561251b57600080fd5b81356124a981612435565b60006020828403121561253857600080fd5b5035919050565b60008083601f84011261255157600080fd5b5081356001600160401b0381111561256857600080fd5b6020830191508360208260051b8501011115610b2e57600080fd5b60008060008060006060868803121561259b57600080fd5b85356125a681612435565b945060208601356001600160401b03808211156125c257600080fd5b6125ce89838a0161253f565b909650945060408801359150808211156125e757600080fd5b506125f48882890161253f565b969995985093965092949392505050565b6000806040838503121561261857600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b601f8201601f191681016001600160401b038111828210171561266257612662612627565b6040525050565b60006001600160401b0382111561268257612682612627565b5060051b60200190565b600082601f83011261269d57600080fd5b813560206126aa82612669565b6040516126b7828261263d565b83815260059390931b85018201928281019150868411156126d757600080fd5b8286015b848110156126f257803583529183019183016126db565b509695505050505050565b600082601f83011261270e57600080fd5b81356001600160401b0381111561272757612727612627565b60405161273e601f8301601f19166020018261263d565b81815284602083860101111561275357600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a0868803121561278857600080fd5b853561279381612435565b945060208601356127a381612435565b935060408601356001600160401b03808211156127bf57600080fd5b6127cb89838a0161268c565b945060608801359150808211156127e157600080fd5b6127ed89838a0161268c565b9350608088013591508082111561280357600080fd5b50612810888289016126fd565b9150509295509295909350565b6000806040838503121561283057600080fd5b82356001600160401b038082111561284757600080fd5b818501915085601f83011261285b57600080fd5b8135602061286882612669565b604051612875828261263d565b83815260059390931b850182019282810191508984111561289557600080fd5b948201945b838610156128bc5785356128ad81612435565b8252948201949082019061289a565b965050860135925050808211156128d257600080fd5b506128df8582860161268c565b9150509250929050565b600081518084526020808501945080840160005b83811015612919578151875295820195908201906001016128fd565b509495945050505050565b6020815260006124a960208301846128e9565b6000806040838503121561294a57600080fd5b82356001600160401b0381111561296057600080fd5b61296c858286016126fd565b95602094909401359450505050565b60008060006060848603121561299057600080fd5b8335925060208401356129a281612435565b915060408401356001600160601b03811681146129be57600080fd5b809150509250925092565b6000806000606084860312156129de57600080fd5b83356129e981612435565b925060208401356001600160401b0380821115612a0557600080fd5b612a118783880161268c565b93506040860135915080821115612a2757600080fd5b50612a348682870161268c565b9150509250925092565b600060208284031215612a5057600080fd5b81356001600160401b03811115612a6657600080fd5b820160e081850312156124a957600080fd5b60008060208385031215612a8b57600080fd5b82356001600160401b0380821115612aa257600080fd5b818501915085601f830112612ab657600080fd5b813581811115612ac557600080fd5b866020828501011115612ad757600080fd5b60209290920196919550909350505050565b60008060408385031215612afc57600080fd5b8235612b0781612435565b915060208301358015158114612b1c57600080fd5b809150509250929050565b600060208284031215612b3957600080fd5b81356001600160401b03811115612b4f57600080fd5b612b5b848285016126fd565b949350505050565b60008060408385031215612b7657600080fd5b8235612b8181612435565b91506020830135612b1c81612435565b600080600080600060a08688031215612ba957600080fd5b8535612bb481612435565b94506020860135612bc481612435565b9350604086013592506060860135915060808601356001600160401b03811115612bed57600080fd5b612810888289016126fd565b600080600060608486031215612c0e57600080fd5b8335612c1981612435565b95602085013595506040909401359392505050565b60008060008060408587031215612c4457600080fd5b84356001600160401b0380821115612c5b57600080fd5b612c678883890161253f565b90965094506020870135915080821115612c8057600080fd5b50612c8d8782880161253f565b95989497509550505050565b600181811c90821680612cad57607f821691505b602082108103610e4057634e487b7160e01b600052602260045260246000fd5b6020808252600990820152683737ba1037bbb732b960b91b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b803563ffffffff81168114612d1a57600080fd5b919050565b600060208284031215612d3157600080fd5b6124a982612d06565b634e487b7160e01b600052601160045260246000fd5b808201808211156105e7576105e7612d3a565b600060018201612d7557612d75612d3a565b5060010190565b6040808252810184905260006001600160fb1b03851115612d9c57600080fd5b8460051b808760608501376060908301838103820160208086019190915291810185905285916000916080015b86831015612df45763ffffffff612ddf85612d06565b16815292810192600192909201918101612dc9565b9998505050505050505050565b80820281158282048414176105e7576105e7612d3a565b600082612e3557634e487b7160e01b600052601260045260246000fd5b500490565b6020808252602e908201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60408201526d195c881bdc88185c1c1c9bdd995960921b606082015260800190565b601f821115610db357600081815260208120601f850160051c81016020861015612eaf5750805b601f850160051c820191505b81811015611b4057828155600101612ebb565b81516001600160401b03811115612ee757612ee7612627565b612efb81612ef58454612c99565b84612e88565b602080601f831160018114612f305760008415612f185750858301515b600019600386901b1c1916600185901b178555611b40565b600085815260208120601f198616915b82811015612f5f57888601518255948401946001909101908401612f40565b5085821015612f7d5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b63ffffffff828116828216039080821115612faa57612faa612d3a565b5092915050565b6000808335601e19843603018112612fc857600080fd5b8301803591506001600160401b03821115612fe257600080fd5b602001915036819003821315610b2e57600080fd5b6001600160401b0383111561300e5761300e612627565b6130228361301c8354612c99565b83612e88565b6000601f841160018114613056576000851561303e5750838201355b600019600387901b1c1916600186901b178355610b7a565b600083815260209020601f19861690835b828110156130875786850135825560209485019460019092019101613067565b50868210156130a45760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b63ffffffff818116838216019080821115612faa57612faa612d3a565b818103818111156105e7576105e7612d3a565b60208082526021908201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736040820152607360f81b606082015260800190565b60208082526028908201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206040820152670dad2e6dac2e8c6d60c31b606082015260800190565b60408152600061318260408301856128e9565b828103602084015261319481856128e9565b95945050505050565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b60208082526023908201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260408201526265737360e81b606082015260800190565b60208082526024908201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604082015263616e636560e01b606082015260800190565b6001600160a01b0386811682528516602082015260a0604082018190526000906132df908301866128e9565b82810360608401526132f181866128e9565b9050828103608084015261330581856124b0565b98975050505050505050565b60006020828403121561332357600080fd5b81516124a981612476565b600060033d11156133475760046000803e5060005160e01c5b90565b600060443d10156133585790565b6040516003193d81016004833e81513d6001600160401b03816024840111818411171561338757505050505090565b828501915081518181111561339f5750505050505090565b843d87010160208285010111156133b95750505050505090565b6133c86020828601018761263d565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090613455908301846124b0565b97965050505050505056fea26469706673582212201108a942a3a6bed93568df39b0cdfbf391fe616be5b421d7361b5aa1eba6288f64736f6c63430008110033a26469706673582212201e0dc5e74b0618c030cc4f7b820e4c0a11f0aeceb1f01521aa8fbb30338fdf2864736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c8063192db4a31461003b57806330c3f70a1461006b575b600080fd5b61004e610049366004610232565b6100a7565b6040516001600160a01b0390911681526020015b60405180910390f35b6100976100793660046102a4565b6001600160a01b031660009081526020819052604090205460ff1690565b6040519015158152602001610062565b6000806100b760208501856102a4565b836040516020016100e692919060609290921b6bffffffffffffffffffffffff19168252601482015260340190565b60405160208183030381529060405280519060200120905060008160405161010d90610225565b8190604051809103906000f590508015801561012d573d6000803e3d6000fd5b506001600160a01b03811660009081526020819052604090205490915060ff161561015757600080fd5b6001600160a01b03811660008181526020819052604090819020805460ff1916600117905551633baf956f60e11b815263775f2ade9061019b90889060040161033e565b600060405180830381600087803b1580156101b557600080fd5b505af11580156101c9573d6000803e3d6000fd5b506101db9250505060208601866102a4565b6040516001600160a01b03838116825291909116907fd6b434e79371595913d34cffa4851f22b193358eb518041dbf395c56b295dce29060200160405180910390a2949350505050565b6136e18061044083390190565b6000806040838503121561024557600080fd5b823567ffffffffffffffff81111561025c57600080fd5b830160e0818603121561026e57600080fd5b946020939093013593505050565b6001600160a01b038116811461029157600080fd5b50565b803561029f8161027c565b919050565b6000602082840312156102b657600080fd5b81356102c18161027c565b9392505050565b6000808335601e198436030181126102df57600080fd5b830160208101925035905067ffffffffffffffff8111156102ff57600080fd5b80360382131561030e57600080fd5b9250929050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b602081526000823561034f8161027c565b6001600160a01b031660208381019190915261036d908401846102c8565b60e0604085015261038361010085018284610315565b91505061039360408501856102c8565b601f19808685030160608701526103ab848385610315565b93506103ba60608801886102c8565b93509150808685030160808701526103d3848484610315565b93506103e260808801886102c8565b93509150808685030160a0870152506103fc838383610315565b9250505061040c60a08501610294565b6001600160a01b03811660c08501525061042860c08501610294565b6001600160a01b03811660e085015250939250505056fe600a805460ff19166001179055600c80546001600160a01b031916905560c0604052601460809081527f573353686f70204469676974616c204974656d7300000000000000000000000060a052600d906200005b90826200016f565b5060408051808201909152600681526557335349544d60d01b6020820152600e906200008890826200016f565b503480156200009657600080fd5b50604080516020810190915260008152620000b181620000b8565b506200023b565b6004620000c682826200016f565b5050565b634e487b7160e01b600052604160045260246000fd5b600181811c90821680620000f557607f821691505b6020821081036200011657634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200016a57600081815260208120601f850160051c81016020861015620001455750805b601f850160051c820191505b81811015620001665782815560010162000151565b5050505b505050565b81516001600160401b038111156200018b576200018b620000ca565b620001a3816200019c8454620000e0565b846200011c565b602080601f831160018114620001db5760008415620001c25750858301515b600019600386901b1c1916600185901b17855562000166565b600085815260208120601f198616915b828110156200020c57888601518255948401946001909101908401620001eb565b50858210156200022b5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b613496806200024b6000396000f3fe608060405234801561001057600080fd5b50600436106102315760003560e01c80637c5b3d9a11610130578063c3f909d4116100b8578063e8a3d4851161007c578063e8a3d485146104d5578063e985e9c5146104dd578063f242432a14610519578063f5298aca1461052c578063ffc2e9af1461053f57600080fd5b8063c3f909d414610489578063c47f002714610491578063d07547f5146104a4578063d11db010146104ba578063dd813003146104cd57600080fd5b806395d89b41116100ff57806395d89b41146104305780639b6dbc8a14610438578063a22cb46514610440578063ae5d957514610453578063b9d7e9fb1461046657600080fd5b80637c5b3d9a146103f9578063882b02071461040157806390c067d914610412578063938e3d7b1461041d57600080fd5b806342a03095116101be57806365ebf99a1161018257806365ebf99a146103935780636b20c454146103a657806373fa4e6e146103b9578063775f2ade146103de57806377b43c08146103f157600080fd5b806342a03095146103275780634e1273f41461033a57806353c6b20f1461035a5780635944c7531461036d57806361b36d8d1461038057600080fd5b80630e89341c116102055780630e89341c146102a95780632296070c146102bc57806324573ec5146102cf5780632a55205a146102e25780632eb2c2d61461031457600080fd5b8062fdd58e1461023657806301ffc9a71461025c57806306fdde031461027f578063088b0d7514610294575b600080fd5b61024961024436600461244a565b610552565b6040519081526020015b60405180910390f35b61026f61026a36600461248c565b6105ed565b6040519015158152602001610253565b610287610626565b60405161025391906124f6565b6102a76102a2366004612509565b6106b4565b005b6102876102b7366004612526565b610745565b6102a76102ca366004612583565b6107e7565b6102a76102dd366004612526565b610a58565b6102f56102f0366004612605565b610a87565b604080516001600160a01b039093168352602083019190915201610253565b6102a7610322366004612770565b610b35565b6102a7610335366004612509565b610b81565b61034d61034836600461281d565b610bcd565b6040516102539190612924565b6102a7610368366004612937565b610cf6565b6102a761037b36600461297b565b610d33565b61024961038e366004612526565b610db8565b6102a76103a1366004612509565b610e46565b6102a76103b43660046129c9565b610e98565b600c546001600160a01b03165b6040516001600160a01b039091168152602001610253565b6102a76103ec366004612a3e565b610edb565b61024961105a565b600654610249565b6005546001600160a01b03166103c6565b600a5460ff1661026f565b6102a761042b366004612a78565b61106a565b6102876110a1565b6102a76110ae565b6102a761044e366004612ae9565b611120565b61026f610461366004612509565b61112f565b610249610474366004612526565b60009081526008602052604090206001015490565b610287611144565b6102a761049f366004612a78565b6111d6565b600a5461010090046001600160a01b03166103c6565b6102a76104c8366004612b27565b61120d565b6103c6600081565b610287611243565b61026f6104eb366004612b63565b6001600160a01b03918216600090815260036020908152604080832093909416825291909152205460ff1690565b6102a7610527366004612b91565b611252565b6102a761053a366004612bf9565b611297565b6102a761054d366004612c2e565b6112da565b60006001600160a01b0383166105c25760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201526930b634b21037bbb732b960b11b60648201526084015b60405180910390fd5b5060008181526002602090815260408083206001600160a01b03861684529091529020545b92915050565b60006105f8826116cf565b8061060757506106078261170b565b806105e757506301ffc9a760e01b6001600160e01b03198316146105e7565b600d805461063390612c99565b80601f016020809104026020016040519081016040528092919081815260200182805461065f90612c99565b80156106ac5780601f10610681576101008083540402835291602001916106ac565b820191906000526020600020905b81548152906001019060200180831161068f57829003601f168201915b505050505081565b60006106c1336000610552565b116106de5760405162461bcd60e51b81526004016105b990612ccd565b6001600160a01b0381166107235760405162461bcd60e51b815260206004820152600c60248201526b696e76616c69642070726f6360a01b60448201526064016105b9565b600580546001600160a01b0319166001600160a01b0392909216919091179055565b600081815260096020526040902080546060919061076290612c99565b80601f016020809104026020016040519081016040528092919081815260200182805461078e90612c99565b80156107db5780601f106107b0576101008083540402835291602001916107db565b820191906000526020600020905b8154815290600101906020018083116107be57829003601f168201915b50505050509050919050565b600a5460ff166108275760405162461bcd60e51b815260206004820152600b60248201526a1cda1bdc0818db1bdcd95960aa1b60448201526064016105b9565b6005546001600160a01b031633146108725760405162461bcd60e51b815260206004820152600e60248201526d37b7363c90383937b1b2b9b9b7b960911b60448201526064016105b9565b82811461087e57600080fd5b60005b818110156109b057600083838381811061089d5761089d612cf0565b90506020020135036108e05760405162461bcd60e51b815260206004820152600c60248201526b696e76616c6964206974656d60a01b60448201526064016105b9565b61092e8383838181106108f5576108f5612cf0565b9050602002013586868481811061090e5761090e612cf0565b90506020020160208101906109239190612d1f565b63ffffffff16611740565b84848281811061094057610940612cf0565b90506020020160208101906109559190612d1f565b63ffffffff166008600085858581811061097157610971612cf0565b90506020020135815260200190815260200160002060010160008282546109989190612d50565b909155508190506109a881612d63565b915050610881565b50610a0a858383808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506109f592508991508890506117ae565b6040518060200160405280600081525061185d565b846001600160a01b03167f22cf32aed5c92728d6ed23e24a9b8845e481aab2302fb194cbd1d289aafa3fea83838787604051610a499493929190612d7c565b60405180910390a25050505050565b6000610a65336000610552565b11610a825760405162461bcd60e51b81526004016105b990612ccd565b600655565b60008281526001602090815260408083208151808301909252546001600160a01b038116808352600160a01b9091046001600160601b0316928201929092528291610afc5750604080518082019091526000546001600160a01b0381168252600160a01b90046001600160601b031660208201525b602081015160009061271090610b1b906001600160601b031687612e01565b610b259190612e18565b91519350909150505b9250929050565b6001600160a01b038516331480610b515750610b5185336104eb565b610b6d5760405162461bcd60e51b81526004016105b990612e3a565b610b7a85858585856119a9565b5050505050565b6000610b8e336000610552565b11610bab5760405162461bcd60e51b81526004016105b990612ccd565b600c80546001600160a01b0319166001600160a01b0392909216919091179055565b60608151835114610c325760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b60648201526084016105b9565b600083516001600160401b03811115610c4d57610c4d612627565b604051908082528060200260200182016040528015610c76578160200160208202803683370190505b50905060005b8451811015610cee57610cc1858281518110610c9a57610c9a612cf0565b6020026020010151858381518110610cb457610cb4612cf0565b6020026020010151610552565b828281518110610cd357610cd3612cf0565b6020908102919091010152610ce781612d63565b9050610c7c565b509392505050565b6000610d03336000610552565b11610d205760405162461bcd60e51b81526004016105b990612ccd565b6007610d2c8382612ece565b5060065550565b6000610d40336000610552565b11610d5d5760405162461bcd60e51b81526004016105b990612ccd565b82610d67600b5490565b11610da85760405162461bcd60e51b81526020600482015260116024820152701a5d195b481b9bdd081c1c995c185c9959607a1b60448201526064016105b9565b610db3838383611b48565b505050565b60008181526008602052604081205463ffffffff16808203610e105760405162461bcd60e51b81526020600482015260116024820152701a5d195b481b9bdd081c1c995c185c9959607a1b60448201526064016105b9565b8063ffffffff16600103610e28575060001992915050565b610e33600182612f8d565b63ffffffff169392505050565b50919050565b6000610e53336000610552565b11610e705760405162461bcd60e51b81526004016105b990612ccd565b600a80546001600160a01b0390921661010002610100600160a81b0319909216919091179055565b6001600160a01b038316331480610eb45750610eb483336104eb565b610ed05760405162461bcd60e51b81526004016105b990612e3a565b610db3838383611c56565b600b5415610f215760405162461bcd60e51b8152602060048201526013602482015272185b1c9958591e481a5b9a5d1a585b1a5e9959606a1b60448201526064016105b9565b610f2f600b80546001019055565b610f3c6020820182612fb1565b600d91610f4a919083612ff7565b50610f586060820182612fb1565b600791610f66919083612ff7565b50610f7760c0820160a08301612509565b600580546001600160a01b0319166001600160a01b0392909216919091179055610fa760e0820160c08301612509565b600a80546001600160a01b039290921661010002610100600160a81b0319909216919091179055610fdb6080820182612fb1565b600f91610fe9919083612ff7565b50610ff76040820182612fb1565b6000805260096020527fec8156718a8372b1db44bb411437d0870f3e3790d4a08526d024ce1b0b668f6b9161102d919083612ff7565b5061105761103e6020830183612509565b6000600160405180602001604052806000815250611de3565b50565b6000611065600b5490565b905090565b6000611077336000610552565b116110945760405162461bcd60e51b81526004016105b990612ccd565b600f610db3828483612ff7565b600e805461063390612c99565b60006110bb336000610552565b116110d85760405162461bcd60e51b81526004016105b990612ccd565b6110e53360006001611ebf565b600a80546001600160a81b03191690556040517f589bfff7e7b59e33b97fa923dbc99256a6d2fdf9a631b431fa2dc06f4eea0ded90600090a1565b61112b338383611fc6565b5050565b60008061113d836000610552565b1192915050565b60606007805461115390612c99565b80601f016020809104026020016040519081016040528092919081815260200182805461117f90612c99565b80156111cc5780601f106111a1576101008083540402835291602001916111cc565b820191906000526020600020905b8154815290600101906020018083116111af57829003601f168201915b5050505050905090565b60006111e3336000610552565b116112005760405162461bcd60e51b81526004016105b990612ccd565b600d610db3828483612ff7565b600061121a336000610552565b116112375760405162461bcd60e51b81526004016105b990612ccd565b600761112b8282612ece565b6060600f805461115390612c99565b6001600160a01b03851633148061126e575061126e85336104eb565b61128a5760405162461bcd60e51b81526004016105b990612e3a565b610b7a85858585856120a6565b6001600160a01b0383163314806112b357506112b383336104eb565b6112cf5760405162461bcd60e51b81526004016105b990612e3a565b610db3838383611ebf565b60006112e7336000610552565b116113045760405162461bcd60e51b81526004016105b990612ccd565b6005831180159061131457508215155b6113545760405162461bcd60e51b81526020600482015260116024820152701a5b9d985b1a59081d5c9a4818dbdd5b9d607a1b60448201526064016105b9565b8281146113945760405162461bcd60e51b815260206004820152600e60248201526d0eadccae2eac2d840d8cadccee8d60931b60448201526064016105b9565b600061139f600b5490565b116113a957600080fd5b6000836001600160401b038111156113c3576113c3612627565b6040519080825280602002602001820160405280156113ec578160200160208202803683370190505b50905060005b8481101561169057600086868381811061140e5761140e612cf0565b90506020028101906114209190612fb1565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050825192935050506114915760405162461bcd60e51b815260206004820152600960248201526875726920656d70747960b81b60448201526064016105b9565b6000600960006114a0600b5490565b815260200190815260200160002090508080546114bc90612c99565b1590506114f75760405162461bcd60e51b81526020600482015260096024820152681cdb1bdd081d5cd95960ba1b60448201526064016105b9565b6000611502600b5490565b90508085858151811061151757611517612cf0565b60200260200101818152505088888581811061153557611535612cf0565b90506020028101906115479190612fb1565b600083815260096020526040902091611561919083612ff7565b5063ffffffff87878681811061157957611579612cf0565b905060200201602081019061158e9190612d1f565b63ffffffff161061159e57600080fd5b60008787868181106115b2576115b2612cf0565b90506020020160208101906115c79190612d1f565b63ffffffff166000036115dc57506001611611565b8787868181106115ee576115ee612cf0565b90506020020160208101906116039190612d1f565b61160e9060016130b6565b90505b60008281526008602052604090205463ffffffff161561163057600080fd5b60408051808201825263ffffffff83811682526000602080840182815287835260089091529390209151825463ffffffff191691161781559051600191820155600b8054909101905550505050808061168890612d63565b9150506113f2565b507f52e5f0458c75f7346ac3a65c652b4a2534b2ce17ee9a9f93ad9922d4a38856e9816040516116c09190612924565b60405180910390a15050505050565b60006001600160e01b03198216636cdb3d1360e11b148061170057506001600160e01b031982166303a24d0760e21b145b806105e757506105e7825b60006001600160e01b0319821663152a902d60e11b14806105e757506301ffc9a760e01b6001600160e01b03198316146105e7565b600061174b83610db8565b6000848152600860205260408120600101549192509061176b90836130d3565b9050828110156117a85760405162461bcd60e51b81526020600482015260086024820152671cdbdb19081bdd5d60c21b60448201526064016105b9565b50505050565b60606000826001600160401b038111156117ca576117ca612627565b6040519080825280602002602001820160405280156117f3578160200160208202803683370190505b50905060005b83811015610cee5784848281811061181357611813612cf0565b90506020020160208101906118289190612d1f565b63ffffffff1682828151811061184057611840612cf0565b60209081029190910101528061185581612d63565b9150506117f9565b6001600160a01b0384166118835760405162461bcd60e51b81526004016105b9906130e6565b81518351146118a45760405162461bcd60e51b81526004016105b990613127565b3360005b8451811015611941578381815181106118c3576118c3612cf0565b6020026020010151600260008784815181106118e1576118e1612cf0565b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b0316815260200190815260200160002060008282546119299190612d50565b9091555081905061193981612d63565b9150506118a8565b50846001600160a01b031660006001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb878760405161199292919061316f565b60405180910390a4610b7a816000878787876121d4565b81518351146119ca5760405162461bcd60e51b81526004016105b990613127565b6001600160a01b0384166119f05760405162461bcd60e51b81526004016105b99061319d565b3360005b8451811015611ada576000858281518110611a1157611a11612cf0565b602002602001015190506000858381518110611a2f57611a2f612cf0565b60209081029190910181015160008481526002835260408082206001600160a01b038e168352909352919091205490915081811015611a805760405162461bcd60e51b81526004016105b9906131e2565b60008381526002602090815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290611abf908490612d50565b9250508190555050505080611ad390612d63565b90506119f4565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611b2a92919061316f565b60405180910390a4611b408187878787876121d4565b505050505050565b6127106001600160601b0382161115611bb65760405162461bcd60e51b815260206004820152602a60248201527f455243323938313a20726f79616c7479206665652077696c6c206578636565646044820152692073616c65507269636560b01b60648201526084016105b9565b6001600160a01b038216611c0c5760405162461bcd60e51b815260206004820152601b60248201527f455243323938313a20496e76616c696420706172616d6574657273000000000060448201526064016105b9565b6040805180820182526001600160a01b0393841681526001600160601b0392831660208083019182526000968752600190529190942093519051909116600160a01b029116179055565b6001600160a01b038316611c7c5760405162461bcd60e51b81526004016105b99061322c565b8051825114611c9d5760405162461bcd60e51b81526004016105b990613127565b604080516020810190915260009081905233905b8351811015611d76576000848281518110611cce57611cce612cf0565b602002602001015190506000848381518110611cec57611cec612cf0565b60209081029190910181015160008481526002835260408082206001600160a01b038c168352909352919091205490915081811015611d3d5760405162461bcd60e51b81526004016105b99061326f565b60009283526002602090815260408085206001600160a01b038b1686529091529092209103905580611d6e81612d63565b915050611cb1565b5060006001600160a01b0316846001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051611dc792919061316f565b60405180910390a46040805160208101909152600090526117a8565b6001600160a01b038416611e095760405162461bcd60e51b81526004016105b9906130e6565b336000611e158561232f565b90506000611e228561232f565b905060008681526002602090815260408083206001600160a01b038b16845290915281208054879290611e56908490612d50565b909155505060408051878152602081018790526001600160a01b03808a1692600092918716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4611eb68360008989898961237a565b50505050505050565b6001600160a01b038316611ee55760405162461bcd60e51b81526004016105b99061322c565b336000611ef18461232f565b90506000611efe8461232f565b6040805160208082018352600091829052888252600281528282206001600160a01b038b1683529052205490915084811015611f4c5760405162461bcd60e51b81526004016105b99061326f565b60008681526002602090815260408083206001600160a01b038b81168086529184528285208a8703905582518b81529384018a90529092908816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4604080516020810190915260009052611eb6565b816001600160a01b0316836001600160a01b0316036120395760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b60648201526084016105b9565b6001600160a01b03838116600081815260036020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b0384166120cc5760405162461bcd60e51b81526004016105b99061319d565b3360006120d88561232f565b905060006120e58561232f565b905060008681526002602090815260408083206001600160a01b038c1684529091529020548581101561212a5760405162461bcd60e51b81526004016105b9906131e2565b60008781526002602090815260408083206001600160a01b038d8116855292528083208985039055908a16825281208054889290612169908490612d50565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46121c9848a8a8a8a8a61237a565b505050505050505050565b6001600160a01b0384163b15611b405760405163bc197c8160e01b81526001600160a01b0385169063bc197c819061221890899089908890889088906004016132b3565b6020604051808303816000875af1925050508015612253575060408051601f3d908101601f1916820190925261225091810190613311565b60015b6122ff5761225f61332e565b806308c379a003612298575061227361334a565b8061227e575061229a565b8060405162461bcd60e51b81526004016105b991906124f6565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e2d455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b60648201526084016105b9565b6001600160e01b0319811663bc197c8160e01b14611eb65760405162461bcd60e51b81526004016105b9906133d3565b6040805160018082528183019092526060916000919060208083019080368337019050509050828160008151811061236957612369612cf0565b602090810291909101015292915050565b6001600160a01b0384163b15611b405760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e61906123be908990899088908890889060040161341b565b6020604051808303816000875af19250505080156123f9575060408051601f3d908101601f191682019092526123f691810190613311565b60015b6124055761225f61332e565b6001600160e01b0319811663f23a6e6160e01b14611eb65760405162461bcd60e51b81526004016105b9906133d3565b6001600160a01b038116811461105757600080fd5b6000806040838503121561245d57600080fd5b823561246881612435565b946020939093013593505050565b6001600160e01b03198116811461105757600080fd5b60006020828403121561249e57600080fd5b81356124a981612476565b9392505050565b6000815180845260005b818110156124d6576020818501810151868301820152016124ba565b506000602082860101526020601f19601f83011685010191505092915050565b6020815260006124a960208301846124b0565b60006020828403121561251b57600080fd5b81356124a981612435565b60006020828403121561253857600080fd5b5035919050565b60008083601f84011261255157600080fd5b5081356001600160401b0381111561256857600080fd5b6020830191508360208260051b8501011115610b2e57600080fd5b60008060008060006060868803121561259b57600080fd5b85356125a681612435565b945060208601356001600160401b03808211156125c257600080fd5b6125ce89838a0161253f565b909650945060408801359150808211156125e757600080fd5b506125f48882890161253f565b969995985093965092949392505050565b6000806040838503121561261857600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b601f8201601f191681016001600160401b038111828210171561266257612662612627565b6040525050565b60006001600160401b0382111561268257612682612627565b5060051b60200190565b600082601f83011261269d57600080fd5b813560206126aa82612669565b6040516126b7828261263d565b83815260059390931b85018201928281019150868411156126d757600080fd5b8286015b848110156126f257803583529183019183016126db565b509695505050505050565b600082601f83011261270e57600080fd5b81356001600160401b0381111561272757612727612627565b60405161273e601f8301601f19166020018261263d565b81815284602083860101111561275357600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a0868803121561278857600080fd5b853561279381612435565b945060208601356127a381612435565b935060408601356001600160401b03808211156127bf57600080fd5b6127cb89838a0161268c565b945060608801359150808211156127e157600080fd5b6127ed89838a0161268c565b9350608088013591508082111561280357600080fd5b50612810888289016126fd565b9150509295509295909350565b6000806040838503121561283057600080fd5b82356001600160401b038082111561284757600080fd5b818501915085601f83011261285b57600080fd5b8135602061286882612669565b604051612875828261263d565b83815260059390931b850182019282810191508984111561289557600080fd5b948201945b838610156128bc5785356128ad81612435565b8252948201949082019061289a565b965050860135925050808211156128d257600080fd5b506128df8582860161268c565b9150509250929050565b600081518084526020808501945080840160005b83811015612919578151875295820195908201906001016128fd565b509495945050505050565b6020815260006124a960208301846128e9565b6000806040838503121561294a57600080fd5b82356001600160401b0381111561296057600080fd5b61296c858286016126fd565b95602094909401359450505050565b60008060006060848603121561299057600080fd5b8335925060208401356129a281612435565b915060408401356001600160601b03811681146129be57600080fd5b809150509250925092565b6000806000606084860312156129de57600080fd5b83356129e981612435565b925060208401356001600160401b0380821115612a0557600080fd5b612a118783880161268c565b93506040860135915080821115612a2757600080fd5b50612a348682870161268c565b9150509250925092565b600060208284031215612a5057600080fd5b81356001600160401b03811115612a6657600080fd5b820160e081850312156124a957600080fd5b60008060208385031215612a8b57600080fd5b82356001600160401b0380821115612aa257600080fd5b818501915085601f830112612ab657600080fd5b813581811115612ac557600080fd5b866020828501011115612ad757600080fd5b60209290920196919550909350505050565b60008060408385031215612afc57600080fd5b8235612b0781612435565b915060208301358015158114612b1c57600080fd5b809150509250929050565b600060208284031215612b3957600080fd5b81356001600160401b03811115612b4f57600080fd5b612b5b848285016126fd565b949350505050565b60008060408385031215612b7657600080fd5b8235612b8181612435565b91506020830135612b1c81612435565b600080600080600060a08688031215612ba957600080fd5b8535612bb481612435565b94506020860135612bc481612435565b9350604086013592506060860135915060808601356001600160401b03811115612bed57600080fd5b612810888289016126fd565b600080600060608486031215612c0e57600080fd5b8335612c1981612435565b95602085013595506040909401359392505050565b60008060008060408587031215612c4457600080fd5b84356001600160401b0380821115612c5b57600080fd5b612c678883890161253f565b90965094506020870135915080821115612c8057600080fd5b50612c8d8782880161253f565b95989497509550505050565b600181811c90821680612cad57607f821691505b602082108103610e4057634e487b7160e01b600052602260045260246000fd5b6020808252600990820152683737ba1037bbb732b960b91b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b803563ffffffff81168114612d1a57600080fd5b919050565b600060208284031215612d3157600080fd5b6124a982612d06565b634e487b7160e01b600052601160045260246000fd5b808201808211156105e7576105e7612d3a565b600060018201612d7557612d75612d3a565b5060010190565b6040808252810184905260006001600160fb1b03851115612d9c57600080fd5b8460051b808760608501376060908301838103820160208086019190915291810185905285916000916080015b86831015612df45763ffffffff612ddf85612d06565b16815292810192600192909201918101612dc9565b9998505050505050505050565b80820281158282048414176105e7576105e7612d3a565b600082612e3557634e487b7160e01b600052601260045260246000fd5b500490565b6020808252602e908201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60408201526d195c881bdc88185c1c1c9bdd995960921b606082015260800190565b601f821115610db357600081815260208120601f850160051c81016020861015612eaf5750805b601f850160051c820191505b81811015611b4057828155600101612ebb565b81516001600160401b03811115612ee757612ee7612627565b612efb81612ef58454612c99565b84612e88565b602080601f831160018114612f305760008415612f185750858301515b600019600386901b1c1916600185901b178555611b40565b600085815260208120601f198616915b82811015612f5f57888601518255948401946001909101908401612f40565b5085821015612f7d5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b63ffffffff828116828216039080821115612faa57612faa612d3a565b5092915050565b6000808335601e19843603018112612fc857600080fd5b8301803591506001600160401b03821115612fe257600080fd5b602001915036819003821315610b2e57600080fd5b6001600160401b0383111561300e5761300e612627565b6130228361301c8354612c99565b83612e88565b6000601f841160018114613056576000851561303e5750838201355b600019600387901b1c1916600186901b178355610b7a565b600083815260209020601f19861690835b828110156130875786850135825560209485019460019092019101613067565b50868210156130a45760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b63ffffffff818116838216019080821115612faa57612faa612d3a565b818103818111156105e7576105e7612d3a565b60208082526021908201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736040820152607360f81b606082015260800190565b60208082526028908201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206040820152670dad2e6dac2e8c6d60c31b606082015260800190565b60408152600061318260408301856128e9565b828103602084015261319481856128e9565b95945050505050565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b60208082526023908201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260408201526265737360e81b606082015260800190565b60208082526024908201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604082015263616e636560e01b606082015260800190565b6001600160a01b0386811682528516602082015260a0604082018190526000906132df908301866128e9565b82810360608401526132f181866128e9565b9050828103608084015261330581856124b0565b98975050505050505050565b60006020828403121561332357600080fd5b81516124a981612476565b600060033d11156133475760046000803e5060005160e01c5b90565b600060443d10156133585790565b6040516003193d81016004833e81513d6001600160401b03816024840111818411171561338757505050505090565b828501915081518181111561339f5750505050505090565b843d87010160208285010111156133b95750505050505090565b6133c86020828601018761263d565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090613455908301846124b0565b97965050505050505056fea26469706673582212201108a942a3a6bed93568df39b0cdfbf391fe616be5b421d7361b5aa1eba6288f64736f6c63430008110033a26469706673582212201e0dc5e74b0618c030cc4f7b820e4c0a11f0aeceb1f01521aa8fbb30338fdf2864736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "This factory builds your shops and also registers the new shops to be used with the shop item registry.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4335,
        "contract": "contracts/W3ShopFactory.sol:W3ShopFactory",
        "label": "createdShop",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}