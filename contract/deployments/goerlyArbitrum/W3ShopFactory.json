{
  "address": "0x89a37D9ae5bA323Fb0EaFaCB59709C6e314bBcB7",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "shop",
          "type": "address"
        }
      ],
      "name": "Created",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "contract IW3ShopPaymentProcessor",
          "name": "_paymentProcessor",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_shopConfig",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_ownerNftId",
          "type": "string"
        },
        {
          "internalType": "bytes32",
          "name": "_salt",
          "type": "bytes32"
        }
      ],
      "name": "createShop",
      "outputs": [
        {
          "internalType": "contract W3Shop",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_shop",
          "type": "address"
        }
      ],
      "name": "isRegisteredShop",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "shopItems",
      "outputs": [
        {
          "internalType": "contract W3ShopItems",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xa408e7a9738a63142daad9d6fdf26d765f7b2685bef3cf4e55f9d6ed4f2aefec",
  "receipt": {
    "to": null,
    "from": "0x3406c6878676A9f7F5F015821bDc477E3b804FB3",
    "contractAddress": "0x89a37D9ae5bA323Fb0EaFaCB59709C6e314bBcB7",
    "transactionIndex": 1,
    "gasUsed": "6754879",
    "logsBloom": "0x
    "blockHash": "0xb33ba21f60bba9d294c11666fe34c6abd32cedb375eea0486220f374ed4e292d",
    "transactionHash": "0xa408e7a9738a63142daad9d6fdf26d765f7b2685bef3cf4e55f9d6ed4f2aefec",
    "logs": [],
    "blockNumber": 1449437,
    "cumulativeGasUsed": "6754879",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "91607562b7572da156c605b6cad4c3d6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"shop\",\"type\":\"address\"}],\"name\":\"Created\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"contract IW3ShopPaymentProcessor\",\"name\":\"_paymentProcessor\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_shopConfig\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_ownerNftId\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"_salt\",\"type\":\"bytes32\"}],\"name\":\"createShop\",\"outputs\":[{\"internalType\":\"contract W3Shop\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_shop\",\"type\":\"address\"}],\"name\":\"isRegisteredShop\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shopItems\",\"outputs\":[{\"internalType\":\"contract W3ShopItems\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"This factory builds your shops and also registers the new shops to be used with the shop item registry.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/W3ShopFactory.sol\":\"W3ShopFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0xa812eed728198acd2c30d06950a5bea8d68436e4f694dd892273266ec2f79f5b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: address zero is not a valid owner\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non-ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0xd917747dc87f189c6779b894f367a028f9dca4be930283cccec8f312966af820\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC1155/extensions/ERC1155Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1155.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC1155} that allows token holders to destroy both their\\n * own tokens and those that they have been approved to use.\\n *\\n * _Available since v3.1._\\n */\\nabstract contract ERC1155Burnable is ERC1155 {\\n    function burn(\\n        address account,\\n        uint256 id,\\n        uint256 value\\n    ) public virtual {\\n        require(\\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n\\n        _burn(account, id, value);\\n    }\\n\\n    function burnBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory values\\n    ) public virtual {\\n        require(\\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\\n            \\\"ERC1155: caller is not token owner or approved\\\"\\n        );\\n\\n        _burnBatch(account, ids, values);\\n    }\\n}\\n\",\"keccak256\":\"0x0d960db62b7c6984d4b67602bc3b5c63ba15db63657feedc6c3604eb334fb648\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/common/ERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/common/ERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/IERC2981.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\\n *\\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\\n *\\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\\n * fee is specified in basis points by default.\\n *\\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\\n *\\n * _Available since v4.5._\\n */\\nabstract contract ERC2981 is IERC2981, ERC165 {\\n    struct RoyaltyInfo {\\n        address receiver;\\n        uint96 royaltyFraction;\\n    }\\n\\n    RoyaltyInfo private _defaultRoyaltyInfo;\\n    mapping(uint256 => RoyaltyInfo) private _tokenRoyaltyInfo;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\\n        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC2981\\n     */\\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice) public view virtual override returns (address, uint256) {\\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[_tokenId];\\n\\n        if (royalty.receiver == address(0)) {\\n            royalty = _defaultRoyaltyInfo;\\n        }\\n\\n        uint256 royaltyAmount = (_salePrice * royalty.royaltyFraction) / _feeDenominator();\\n\\n        return (royalty.receiver, royaltyAmount);\\n    }\\n\\n    /**\\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\\n     * override.\\n     */\\n    function _feeDenominator() internal pure virtual returns (uint96) {\\n        return 10000;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information that all ids in this contract will default to.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: invalid receiver\\\");\\n\\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Removes default royalty information.\\n     */\\n    function _deleteDefaultRoyalty() internal virtual {\\n        delete _defaultRoyaltyInfo;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setTokenRoyalty(\\n        uint256 tokenId,\\n        address receiver,\\n        uint96 feeNumerator\\n    ) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: Invalid parameters\\\");\\n\\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Resets royalty information for the token id back to the global default.\\n     */\\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\\n        delete _tokenRoyaltyInfo[tokenId];\\n    }\\n}\\n\",\"keccak256\":\"0x9bc4d7eb03c4e87fd5122e03cdff5f60fa360d76925980ad022b2c6fac9876f3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/IW3ShopPaymentProcessor.sol\":{\"content\":\"//SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.17;\\n\\ninterface IW3ShopPaymentProcessor {\\n    struct BuyParams {\\n        address payable shop;\\n        uint32[] amounts;\\n        uint256[] prices;\\n        uint256[] itemIds;\\n        bytes32[] proofs;\\n        bool[] proofFlags;\\n    }\\n\\n    /**\\n     * @dev Handles the buy process if ETH is used as a currency inside the shop.\\n     */\\n    function buyWithEther(BuyParams calldata _params) external payable;\\n\\n    /**\\n     * @dev Handles the buy process if an arbitrary token is used for the shop.\\n     */\\n    function buyWithToken(address _token, BuyParams calldata _params) external;\\n}\\n\",\"keccak256\":\"0x94f57582fd350302cf3a374ba0ae9acc4e330b4ec229a1630cade566bb2de6e6\",\"license\":\"GPL-3.0\"},\"contracts/W3Shop.sol\":{\"content\":\"//SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.17;\\n\\nimport \\\"./W3ShopItems.sol\\\";\\nimport \\\"./IW3ShopPaymentProcessor.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract W3Shop {\\n    address public constant CURRENCY_ETH = address(0);\\n\\n    event NewShopItems(uint256[] ids);\\n\\n    struct LimitedItem {\\n        uint32 maxAmount;\\n        uint256 count;\\n    }\\n\\n    W3ShopItems private immutable shopItems;\\n\\n    /**\\n     * The token ID that identifies the owner of this shop.\\n     */\\n    uint256 private ownerTokenId;\\n\\n    /**\\n     * The payment processor that the shop owner wishes to use. It processes\\n     * all the payments and calls into the shop after payment was received.\\n     */\\n    IW3ShopPaymentProcessor private paymentProcessor;\\n\\n    /**\\n     * Contains the  root hash of the merkle tree.\\n     */\\n    bytes32 private itemsRoot;\\n\\n    /**\\n     * Arweave (starts with ar://<ID>) or IPFS (starts with ipfs://<ID>) URI that\\n     * points to the config of this shop.\\n     */\\n    string private shopConfig;\\n\\n    /**\\n     * Buffer that is filled with reserved next item IDs so we can be sure these\\n     * IDs are reserved for this shop. Important to know IDs beforehand when\\n     * creating NFT metadata.\\n     */\\n    uint256[] private bufferedItemIds = new uint256[](5);\\n\\n    /**\\n     * This also determines the maximum number of items.\\n     * If set to 1 it means an item can be sold unlimited.\\n     * If its set to a number n > 1, it can only be sold n - 1 times.\\n     * Also keeps track of the current\\n     */\\n    mapping(uint256 => LimitedItem) private existingItems;\\n\\n    bool private isOpened = true;\\n\\n    /**\\n     * The address that will receive the payments.\\n     */\\n    address private paymentReceiver;\\n\\n    /**\\n     * ERC20/ERC1155 compatible token as accepted currency.\\n     * Or the 0 address if Ether is accepted.\\n     */\\n    address private acceptedCurrency = CURRENCY_ETH;\\n\\n    modifier onlyShopOwner() {\\n        require(shopItems.balanceOf(msg.sender, ownerTokenId) > 0, \\\"not owner\\\");\\n        _;\\n    }\\n\\n    modifier isShopOpen() {\\n        require(isOpened, \\\"shop closed\\\");\\n        _;\\n    }\\n\\n    modifier onlyPaymentProcessor() {\\n        require(msg.sender == address(paymentProcessor), \\\"only processor\\\");\\n        _;\\n    }\\n\\n    constructor(\\n        IW3ShopPaymentProcessor _paymentProcessor,\\n        W3ShopItems _shopItems\\n    ) {\\n        paymentProcessor = _paymentProcessor;\\n        shopItems = _shopItems;\\n    }\\n\\n    /**\\n     * MUST be called after the shop was created to finalize the shops creation.\\n     * This is done so the shops address can be pre-calculated for setting up the\\n     * the metadata before the shops creation takes place.\\n     */\\n    function initialize(\\n        string memory _shopConfig,\\n        uint256 _ownerTokenId,\\n        address _paymentReceiver\\n    ) external {\\n        require(ownerTokenId == 0, \\\"already called\\\");\\n\\n        ownerTokenId = _ownerTokenId;\\n        shopConfig = _shopConfig;\\n        paymentReceiver = _paymentReceiver;\\n\\n        // Prepare the initial set of item ids after we are\\n        // a registered shop in the factory.\\n        prepareItems(5);\\n    }\\n\\n    function prepareItems(uint8 _itemCount) private {\\n        assert(_itemCount > 0 && _itemCount <= 5);\\n\\n        uint256[] memory itemIds = shopItems.prepareItems(_itemCount);\\n        for (uint256 i = 0; i < _itemCount; i++) {\\n            bufferedItemIds[i] = itemIds[i];\\n        }\\n    }\\n\\n    function setItemUris(string[] calldata _uris, uint32[] calldata _maxAmounts)\\n        external\\n        isShopOpen\\n        onlyShopOwner\\n    {\\n        require(_uris.length <= 5 && _uris.length > 0, \\\"invalid uri count\\\");\\n        require(_uris.length == _maxAmounts.length, \\\"invalid uri count\\\");\\n\\n        uint256[] memory ids = new uint256[](_uris.length);\\n        for (uint256 i = 0; i < _uris.length; i++) {\\n            uint256 itemId = bufferedItemIds[i];\\n            require(itemId != ownerTokenId, \\\"forbidden owner id\\\");\\n            ids[i] = itemId;\\n\\n            if (_maxAmounts[i] > 0) {\\n                existingItems[itemId] = LimitedItem(_maxAmounts[i] + 1, 0);\\n            } else {\\n                existingItems[itemId] = LimitedItem(1, 0);\\n            }\\n        }\\n\\n        shopItems.setItemUris(ids, _uris);\\n        prepareItems(uint8(_uris.length));\\n\\n        emit NewShopItems(ids);\\n    }\\n\\n    function setTokenRoyalty(\\n        uint256 tokenId,\\n        address receiver,\\n        uint96 feeNumerator\\n    ) external onlyShopOwner {\\n        shopItems.setTokenRoyalty(tokenId, receiver, feeNumerator);\\n    }\\n\\n    function setAcceptedCurrency(address _acceptedCurrency)\\n        external\\n        isShopOpen\\n        onlyShopOwner\\n    {\\n        acceptedCurrency = _acceptedCurrency;\\n    }\\n\\n    function getAcceptedCurrency() external view returns (address) {\\n        return acceptedCurrency;\\n    }\\n\\n    function setConfig(string memory _shopConfig)\\n        external\\n        isShopOpen\\n        onlyShopOwner\\n    {\\n        shopConfig = _shopConfig;\\n    }\\n\\n    function setPaymentReceiver(address _receiver)\\n        external\\n        isShopOpen\\n        onlyShopOwner\\n    {\\n        paymentReceiver = _receiver;\\n    }\\n\\n    function getPaymentReceiver() external view returns (address) {\\n        return paymentReceiver;\\n    }\\n\\n    function getConfig() external view returns (string memory) {\\n        return shopConfig;\\n    }\\n\\n    function setConfigRoot(string memory _shopConfig, bytes32 _itemsRoot)\\n        external\\n        isShopOpen\\n        onlyShopOwner\\n    {\\n        shopConfig = _shopConfig;\\n        itemsRoot = _itemsRoot;\\n    }\\n\\n    function setPaymentProcessor(IW3ShopPaymentProcessor _paymentProcessor)\\n        external\\n        isShopOpen\\n        onlyShopOwner\\n    {\\n        paymentProcessor = _paymentProcessor;\\n    }\\n\\n    function getPaymentProcessor()\\n        external\\n        view\\n        returns (IW3ShopPaymentProcessor)\\n    {\\n        return paymentProcessor;\\n    }\\n\\n    function getShopItems() external view returns (W3ShopItems) {\\n        return shopItems;\\n    }\\n\\n    function getOwnerTokenId() external view returns (uint256) {\\n        return ownerTokenId;\\n    }\\n\\n    function setItemsRoot(bytes32 _itemsRoot)\\n        external\\n        isShopOpen\\n        onlyShopOwner\\n    {\\n        itemsRoot = _itemsRoot;\\n    }\\n\\n    function getItemsRoot() external view returns (bytes32) {\\n        return itemsRoot;\\n    }\\n\\n    function getBufferedItemIds() external view returns (uint256[] memory) {\\n        return bufferedItemIds;\\n    }\\n\\n    /**\\n     * This function requires the bought items and collections with their prices.\\n     * It checks if the given prices are correct to the anchored Merkle root and\\n     * checks if the amount of ETH send equals the required payment.\\n     * If this works it will batch mint the owner NFTs.\\n     */\\n    function buy(\\n        address _receiver,\\n        uint32[] calldata _amounts,\\n        uint256[] calldata _itemIds\\n    ) external isShopOpen onlyPaymentProcessor {\\n        require(_amounts.length == _itemIds.length);\\n\\n        for (uint256 i = 0; i < _itemIds.length; i++) {\\n            // Check if every item is actually owned by this shop.\\n            // The owner item is not an existing shop item! So this also prevents\\n            // minting additional owner tokens\\n            requireItemAvailable(_itemIds[i], _amounts[i]);\\n            existingItems[_itemIds[i]].count += _amounts[i];\\n        }\\n\\n        shopItems.mint(_receiver, _itemIds, _amounts);\\n    }\\n\\n    function requireItemAvailable(uint256 _itemId, uint256 _amount)\\n        private\\n        view\\n    {\\n        uint256 maxItemAmount = getMaximumItemCount(_itemId);\\n        uint256 availableItems = maxItemAmount - existingItems[_itemId].count;\\n\\n        require(availableItems >= _amount, \\\"sold out\\\");\\n    }\\n\\n    function closeShop() external isShopOpen onlyShopOwner {\\n        shopItems.burnShopOwner(msg.sender, ownerTokenId, 1);\\n        isOpened = false;\\n        paymentReceiver = address(0);\\n    }\\n\\n    function getItemCount(uint256 _itemId) external view returns (uint256) {\\n        return existingItems[_itemId].count;\\n    }\\n\\n    function getMaximumItemCount(uint256 _itemId)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint32 maxItemCount = existingItems[_itemId].maxAmount;\\n\\n        // if the maxItemCount is 0, the item does not exist yet in the shop. If item\\n        // is unlimited the maxItemCount is 1.\\n        if (maxItemCount == 0) {\\n            revert(\\\"item doesnt exist\\\");\\n        } else if (maxItemCount == 1) {\\n            return shopItems.MAX_ITEM_COUNT();\\n        } else {\\n            return maxItemCount - 1;\\n        }\\n    }\\n\\n    function isShopOwner(address _address)\\n        external\\n        view\\n        isShopOpen\\n        returns (bool)\\n    {\\n        return shopItems.balanceOf(_address, ownerTokenId) > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x396804287f249f5a34103ba4e4282aaca19bee638d3609311d764859c7d90d80\",\"license\":\"GPL-3.0\"},\"contracts/W3ShopFactory.sol\":{\"content\":\"//SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.17;\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\nimport \\\"./IW3ShopPaymentProcessor.sol\\\";\\nimport \\\"./W3Shop.sol\\\";\\nimport \\\"./W3ShopItems.sol\\\";\\n\\n/**\\n * This factory builds your shops and also registers the new shops to be used with the\\n * shop item registry.\\n */\\ncontract W3ShopFactory {\\n    event Created(address indexed owner, address shop);\\n\\n    mapping(address => bool) private registeredShop;\\n    W3ShopItems public immutable shopItems;\\n\\n    constructor() {\\n        shopItems = new W3ShopItems(this);\\n    }\\n\\n    function createShop(\\n        address _owner,\\n        IW3ShopPaymentProcessor _paymentProcessor,\\n        string calldata _shopConfig,\\n        string calldata _ownerNftId,\\n        bytes32 _salt\\n    ) external returns (W3Shop) {\\n        bytes32 hashedSalt = keccak256(abi.encodePacked(_owner, _salt));\\n        W3Shop shop = new W3Shop{salt: hashedSalt}(_paymentProcessor, shopItems);\\n        registeredShop[address(shop)] = true;\\n\\n        uint256 ownerTokenId = shopItems.mintOwnerNft(_owner, _ownerNftId);\\n        shop.initialize(_shopConfig, ownerTokenId, _owner);\\n\\n        emit Created(_owner, address(shop));\\n\\n        return shop;\\n    }\\n\\n    function isRegisteredShop(address _shop) external view returns (bool) {\\n        return registeredShop[_shop];\\n    }\\n}\\n\",\"keccak256\":\"0x2356e0b1e691c589627acab59262f9a47c6b805eca383888e4adfe80b4fbc6da\",\"license\":\"GPL-3.0\"},\"contracts/W3ShopItems.sol\":{\"content\":\"//SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Burnable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/common/ERC2981.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\n\\nimport \\\"./W3ShopFactory.sol\\\";\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract W3ShopItems is ERC1155, ERC2981, ERC1155Burnable {\\n    using Counters for Counters.Counter;\\n\\n    event Buy(address indexed buyer, address indexed shop, uint256[] items);\\n\\n    uint256 public constant MAX_ITEM_COUNT = type(uint256).max;\\n\\n    Counters.Counter private nextTokenId;\\n    W3ShopFactory private shopFactory;\\n\\n    // Token ID to custom URI mapping\\n    mapping(uint256 => string) private uris;\\n\\n    modifier onlyRegisteredShop() {\\n        require(shopFactory.isRegisteredShop(msg.sender), \\\"not allowed\\\");\\n        _;\\n    }\\n\\n    modifier onlyFactory() {\\n        require(msg.sender == address(shopFactory), \\\"not allowed\\\");\\n        _;\\n    }\\n\\n    constructor(W3ShopFactory _factory) ERC1155(\\\"\\\") {\\n        shopFactory = _factory;\\n        // We must start with 1 as 0 has a special meaning for token IDs.\\n        nextTokenId.increment();\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC1155, ERC2981)\\n        returns (bool)\\n    {\\n        return\\n            ERC1155.supportsInterface(interfaceId) ||\\n            ERC2981.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information for a specific token id.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function setTokenRoyalty(\\n        uint256 tokenId,\\n        address receiver,\\n        uint96 feeNumerator\\n    ) external onlyRegisteredShop {\\n        _setTokenRoyalty(tokenId, receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Returns the URI for every token.\\n     *\\n     * Because of the way how upload the usage data to Arweave, every token needs its own URI.\\n     */\\n    function uri(uint256 id)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (string memory)\\n    {\\n        return uris[id];\\n    }\\n\\n    /**\\n     * @dev Shops can use this method to register new items for selling inside this contract.\\n     *\\n     * This reserves the upcoming next item URIs to be used with this shop. These item ids can\\n     * be used to prepare NFT metadata files to be uploaded to Arweave.\\n     */\\n    function prepareItems(uint8 n)\\n        external\\n        onlyRegisteredShop\\n        returns (uint256[] memory)\\n    {\\n        require(n <= 10);\\n        uint256[] memory createdIds = new uint256[](n);\\n\\n        for (uint256 i = 0; i < n; i++) {\\n            createdIds[i] = nextTokenId.current();\\n            nextTokenId.increment();\\n        }\\n\\n        return createdIds;\\n    }\\n\\n    /**\\n     * @dev Shops can use this method to register new items for selling inside this contract.\\n     *\\n     * After the metadata was generated and uploaded this method can be used to prepare the items\\n     * for selling within this shop contract.\\n     */\\n    function setItemUris(uint256[] calldata _ids, string[] memory _uris)\\n        external\\n        onlyRegisteredShop\\n    {\\n        require(_ids.length == _uris.length, \\\"invalid input\\\");\\n\\n        for (uint256 i = 0; i < _uris.length; i++) {\\n            bytes memory tempUriStr = bytes(_uris[i]);\\n            require(tempUriStr.length > 0, \\\"uri empty\\\");\\n\\n            bytes storage tempStorageStr = bytes(uris[_ids[i]]);\\n\\n            require(tempStorageStr.length == 0, \\\"slot used\\\");\\n\\n            uris[_ids[i]] = _uris[i];\\n        }\\n    }\\n\\n    function mint(\\n        address _receiver,\\n        uint256[] calldata _itemIds,\\n        uint32[] calldata _amounts\\n    ) external onlyRegisteredShop {\\n        require(_itemIds.length == _amounts.length, \\\"invalid input\\\");\\n\\n        for (uint256 i = 0; i < _itemIds.length; i++) {\\n            bytes memory tempUriStr = bytes(uris[_itemIds[i]]);\\n            require(tempUriStr.length > 0, \\\"non existing item\\\");\\n        }\\n\\n        _mintBatch(_receiver, _itemIds, conversion(_amounts), \\\"\\\");\\n\\n        emit Buy(_receiver, msg.sender, _itemIds);\\n    }\\n\\n    function conversion(uint32[] calldata array8)\\n        private\\n        pure\\n        returns (uint256[] memory)\\n    {\\n        uint256[] memory array256 = new uint256[](array8.length);\\n        for (uint256 i = 0; i < array8.length; i++) {\\n            array256[i] = array8[i];\\n        }\\n\\n        return array256;\\n    }\\n\\n    /**\\n     * @dev Only mint owner NFTs from the shop factory.\\n     *\\n     * This saves some gas during creation of the shop and buy of normal items\\n     * as some checks can be simplified.\\n     */\\n    function mintOwnerNft(address _receiver, string calldata _itemUri)\\n        external\\n        onlyFactory\\n        returns (uint256)\\n    {\\n        uint256 itemId = nextTokenId.current();\\n        nextTokenId.increment();\\n\\n        uris[itemId] = _itemUri;\\n\\n        _mint(_receiver, itemId, 1, \\\"\\\");\\n\\n        return itemId;\\n    }\\n\\n    /**\\n     * Special method for shops, so during a closing down the owner token is directly burned without\\n     * checking user ownershop.\\n     */\\n    function burnShopOwner(\\n        address _owner,\\n        uint256 _itemId,\\n        uint256 _amounts\\n    ) external onlyRegisteredShop {\\n        _burn(_owner, _itemId, _amounts);\\n    }\\n}\\n\",\"keccak256\":\"0x307e8cc722d345deb14ab83fe8651eb23d200b35d6dab358056fadfbc7330890\",\"license\":\"GPL-3.0\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x60b0215121bf25612a6739fb2f1ec35f31ee82e4a8216c032c8243d904ab3aa9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b503060405161001e9061005c565b6001600160a01b039091168152602001604051809103906000f08015801561004a573d6000803e3d6000fd5b506001600160a01b0316608052610069565b612d928061266a83390190565b6080516125d961009160003960008181604b0152818161012201526101bb01526125d96000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806308514a41146100465780639e42780b1461008a578063d2b50a3b1461009d575b600080fd5b61006d7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b61006d61009836600461035b565b6100d9565b6100c96100ab3660046103f9565b6001600160a01b031660009081526020819052604090205460ff1690565b6040519015158152602001610081565b6040516bffffffffffffffffffffffff19606089901b166020820152603481018290526000908190605401604051602081830303815290604052805190602001209050600081897f000000000000000000000000000000000000000000000000000000000000000060405161014d906102ed565b6001600160a01b039283168152911660208201526040018190604051809103906000f5905080158015610184573d6000803e3d6000fd5b506001600160a01b03808216600090815260208190526040808220805460ff191660011790555163b491160560e01b8152929350917f00000000000000000000000000000000000000000000000000000000000000009091169063b4911605906101f6908e908b908b90600401610446565b6020604051808303816000875af1158015610215573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102399190610474565b9050816001600160a01b0316634f3bddeb8a8a848f6040518563ffffffff1660e01b815260040161026d949392919061048d565b600060405180830381600087803b15801561028757600080fd5b505af115801561029b573d6000803e3d6000fd5b50506040516001600160a01b0385811682528e1692507f587ece4cd19692c5be1a4184503d607d45542d2aca0698c0068f52e09ccb541c915060200160405180910390a2509998505050505050505050565b6120e1806104c383390190565b6001600160a01b038116811461030f57600080fd5b50565b60008083601f84011261032457600080fd5b50813567ffffffffffffffff81111561033c57600080fd5b60208301915083602082850101111561035457600080fd5b9250929050565b600080600080600080600060a0888a03121561037657600080fd5b8735610381816102fa565b96506020880135610391816102fa565b9550604088013567ffffffffffffffff808211156103ae57600080fd5b6103ba8b838c01610312565b909750955060608a01359150808211156103d357600080fd5b506103e08a828b01610312565b989b979a50959894979596608090950135949350505050565b60006020828403121561040b57600080fd5b8135610416816102fa565b9392505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6001600160a01b038416815260406020820181905260009061046b908301848661041d565b95945050505050565b60006020828403121561048657600080fd5b5051919050565b6060815260006104a160608301868861041d565b6020830194909452506001600160a01b03919091166040909101529291505056fe600560a08181526101606040529060c08280368337505081516200002b9260049250602001906200009f565b506006805460ff19166001179055600780546001600160a01b03191690553480156200005657600080fd5b50604051620020e1380380620020e183398101604081905262000079916200011f565b600180546001600160a01b0319166001600160a01b03938416179055166080526200015e565b828054828255906000526020600020908101928215620000dd579160200282015b82811115620000dd578251825591602001919060010190620000c0565b50620000eb929150620000ef565b5090565b5b80821115620000eb5760008155600101620000f0565b6001600160a01b03811681146200011c57600080fd5b50565b600080604083850312156200013357600080fd5b8251620001408162000106565b6020840151909250620001538162000106565b809150509250929050565b608051611ef7620001ea600039600081816102010152818161037f0152818161059f0152818161065101528181610724015281816108960152818161095501528181610a2101528181610aea01528181610bcb01528181610cc101528181610fdb015281816110cc015281816111880152818161123d015281816113d801526115260152611ef76000f3fe608060405234801561001057600080fd5b506004361061014d5760003560e01c80637c5b3d9a116100c3578063b7d1c5a31161007c578063b7d1c5a3146102bc578063bdc441b2146102d1578063c3f909d4146102f4578063d07547f514610309578063d11db0101461031f578063dd8130031461033257600080fd5b80637c5b3d9a1461025d57806384b5535614610265578063882b02071461026d5780638d1946941461027e5780639b6dbc8a14610291578063ae5d95751461029957600080fd5b806353c6b20f1161011557806353c6b20f146101b35780635944c753146101c657806361b36d8d146101d957806365e17540146101ff57806365ebf99a1461023957806373fa4e6e1461024c57600080fd5b8063088b0d75146101525780632296070c1461016757806324573ec51461017a57806342a030951461018d5780634f3bddeb146101a0575b600080fd5b610165610160366004611612565b61033a565b005b61016561017536600461167b565b610433565b6101656101883660046116fe565b610615565b61016561019b366004611612565b6106e8565b6101656101ae3660046117ce565b6107d8565b6101656101c1366004611829565b61085a565b6101656101d436600461186e565b61093b565b6101ec6101e73660046116fe565b610a82565b6040519081526020015b60405180910390f35b7f00000000000000000000000000000000000000000000000000000000000000005b6040516001600160a01b0390911681526020016101f6565b610165610247366004611612565b610b8f565b6007546001600160a01b0316610221565b6002546101ec565b6000546101ec565b6001546001600160a01b0316610221565b61016561028c3660046118b6565b610c85565b610165611090565b6102ac6102a7366004611612565b6111fe565b60405190151581526020016101f6565b6102c46112bb565b6040516101f6919061195d565b6101ec6102df3660046116fe565b60009081526005602052604090206001015490565b6102fc611313565b6040516101f69190611970565b60065461010090046001600160a01b0316610221565b61016561032d3660046119be565b61139c565b610221600081565b60065460ff166103655760405162461bcd60e51b815260040161035c906119fb565b60405180910390fd5b60008054604051627eeac760e11b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169162fdd58e916103b3913391600401611a20565b602060405180830381865afa1580156103d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103f49190611a39565b116104115760405162461bcd60e51b815260040161035c90611a52565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b60065460ff166104555760405162461bcd60e51b815260040161035c906119fb565b6001546001600160a01b031633146104a05760405162461bcd60e51b815260206004820152600e60248201526d37b7363c90383937b1b2b9b9b7b960911b604482015260640161035c565b8281146104ac57600080fd5b60005b81811015610587576105058383838181106104cc576104cc611a75565b905060200201358686848181106104e5576104e5611a75565b90506020020160208101906104fa9190611a9f565b63ffffffff1661147a565b84848281811061051757610517611a75565b905060200201602081019061052c9190611a9f565b63ffffffff166005600085858581811061054857610548611a75565b905060200201358152602001908152602001600020600101600082825461056f9190611ad0565b9091555081905061057f81611ae9565b9150506104af565b50604051635d073fc560e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690635d073fc5906105dc908890869086908a908a90600401611b02565b600060405180830381600087803b1580156105f657600080fd5b505af115801561060a573d6000803e3d6000fd5b505050505050505050565b60065460ff166106375760405162461bcd60e51b815260040161035c906119fb565b60008054604051627eeac760e11b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169162fdd58e91610685913391600401611a20565b602060405180830381865afa1580156106a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c69190611a39565b116106e35760405162461bcd60e51b815260040161035c90611a52565b600255565b60065460ff1661070a5760405162461bcd60e51b815260040161035c906119fb565b60008054604051627eeac760e11b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169162fdd58e91610758913391600401611a20565b602060405180830381865afa158015610775573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107999190611a39565b116107b65760405162461bcd60e51b815260040161035c90611a52565b600780546001600160a01b0319166001600160a01b0392909216919091179055565b600054156108195760405162461bcd60e51b815260206004820152600e60248201526d185b1c9958591e4818d85b1b195960921b604482015260640161035c565b6000829055600361082a8482611c18565b5060068054610100600160a81b0319166101006001600160a01b0384160217905561085560056114e8565b505050565b60065460ff1661087c5760405162461bcd60e51b815260040161035c906119fb565b60008054604051627eeac760e11b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169162fdd58e916108ca913391600401611a20565b602060405180830381865afa1580156108e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061090b9190611a39565b116109285760405162461bcd60e51b815260040161035c90611a52565b60036109348382611c18565b5060025550565b60008054604051627eeac760e11b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169162fdd58e91610989913391600401611a20565b602060405180830381865afa1580156109a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ca9190611a39565b116109e75760405162461bcd60e51b815260040161035c90611a52565b604051635944c75360e01b8152600481018490526001600160a01b0383811660248301526bffffffffffffffffffffffff831660448301527f00000000000000000000000000000000000000000000000000000000000000001690635944c75390606401600060405180830381600087803b158015610a6557600080fd5b505af1158015610a79573d6000803e3d6000fd5b50505050505050565b60008181526005602052604081205463ffffffff16808203610ada5760405162461bcd60e51b81526020600482015260116024820152701a5d195b48191bd95cdb9d08195e1a5cdd607a1b604482015260640161035c565b8063ffffffff16600103610b71577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663279c3b4e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b6a9190611a39565b9392505050565b610b7c600182611cd8565b63ffffffff169392505050565b50919050565b60065460ff16610bb15760405162461bcd60e51b815260040161035c906119fb565b60008054604051627eeac760e11b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169162fdd58e91610bff913391600401611a20565b602060405180830381865afa158015610c1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c409190611a39565b11610c5d5760405162461bcd60e51b815260040161035c90611a52565b600680546001600160a01b0390921661010002610100600160a81b0319909216919091179055565b60065460ff16610ca75760405162461bcd60e51b815260040161035c906119fb565b60008054604051627eeac760e11b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169162fdd58e91610cf5913391600401611a20565b602060405180830381865afa158015610d12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d369190611a39565b11610d535760405162461bcd60e51b815260040161035c90611a52565b60058311801590610d6357508215155b610da35760405162461bcd60e51b81526020600482015260116024820152701a5b9d985b1a59081d5c9a4818dbdd5b9d607a1b604482015260640161035c565b828114610de65760405162461bcd60e51b81526020600482015260116024820152701a5b9d985b1a59081d5c9a4818dbdd5b9d607a1b604482015260640161035c565b60008367ffffffffffffffff811115610e0157610e01611717565b604051908082528060200260200182016040528015610e2a578160200160208202803683370190505b50905060005b84811015610fc357600060048281548110610e4d57610e4d611a75565b906000526020600020015490506000548103610ea05760405162461bcd60e51b8152602060048201526012602482015271199bdc989a5919195b881bdddb995c881a5960721b604482015260640161035c565b80838381518110610eb357610eb3611a75565b6020026020010181815250506000858584818110610ed357610ed3611a75565b9050602002016020810190610ee89190611a9f565b63ffffffff161115610f71576040518060400160405280868685818110610f1157610f11611a75565b9050602002016020810190610f269190611a9f565b610f31906001611cfc565b63ffffffff90811682526000602092830181905284815260058352604090208351815463ffffffff19169216919091178155910151600190910155610fb0565b60408051808201825260018082526000602080840182815286835260059091529390209151825463ffffffff191663ffffffff90911617825591519101555b5080610fbb81611ae9565b915050610e30565b50604051638a5f671b60e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690638a5f671b9061101490849089908990600401611d42565b600060405180830381600087803b15801561102e57600080fd5b505af1158015611042573d6000803e3d6000fd5b50505050611052858590506114e8565b7f77117b91fef75999c9c1a5a4358e2afe8341539b1cbb59ff530c6078440e700381604051611081919061195d565b60405180910390a15050505050565b60065460ff166110b25760405162461bcd60e51b815260040161035c906119fb565b60008054604051627eeac760e11b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169162fdd58e91611100913391600401611a20565b602060405180830381865afa15801561111d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111419190611a39565b1161115e5760405162461bcd60e51b815260040161035c90611a52565b6000546040516001620844fd60e11b031981523360048201526024810191909152600160448201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063ffef760690606401600060405180830381600087803b1580156111d457600080fd5b505af11580156111e8573d6000803e3d6000fd5b5050600680546001600160a81b03191690555050565b60065460009060ff166112235760405162461bcd60e51b815260040161035c906119fb565b60008054604051627eeac760e11b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169162fdd58e91611271918791600401611a20565b602060405180830381865afa15801561128e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112b29190611a39565b1190505b919050565b6060600480548060200260200160405190810160405280929190818152602001828054801561130957602002820191906000526020600020905b8154815260200190600101908083116112f5575b5050505050905090565b60606003805461132290611b96565b80601f016020809104026020016040519081016040528092919081815260200182805461134e90611b96565b80156113095780601f1061137057610100808354040283529160200191611309565b820191906000526020600020905b81548152906001019060200180831161137e57509395945050505050565b60065460ff166113be5760405162461bcd60e51b815260040161035c906119fb565b60008054604051627eeac760e11b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169162fdd58e9161140c913391600401611a20565b602060405180830381865afa158015611429573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061144d9190611a39565b1161146a5760405162461bcd60e51b815260040161035c90611a52565b60036114768282611c18565b5050565b600061148583610a82565b600084815260056020526040812060010154919250906114a59083611df2565b9050828110156114e25760405162461bcd60e51b81526020600482015260086024820152671cdbdb19081bdd5d60c21b604482015260640161035c565b50505050565b60008160ff161180156114ff575060058160ff1611155b61150b5761150b611e05565b60405163af95e80560e01b815260ff821660048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063af95e805906024016000604051808303816000875af1158015611577573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261159f9190810190611e1b565b905060005b8260ff16811015610855578181815181106115c1576115c1611a75565b6020026020010151600482815481106115dc576115dc611a75565b600091825260209091200155806115f281611ae9565b9150506115a4565b6001600160a01b038116811461160f57600080fd5b50565b60006020828403121561162457600080fd5b8135610b6a816115fa565b60008083601f84011261164157600080fd5b50813567ffffffffffffffff81111561165957600080fd5b6020830191508360208260051b850101111561167457600080fd5b9250929050565b60008060008060006060868803121561169357600080fd5b853561169e816115fa565b9450602086013567ffffffffffffffff808211156116bb57600080fd5b6116c789838a0161162f565b909650945060408801359150808211156116e057600080fd5b506116ed8882890161162f565b969995985093965092949392505050565b60006020828403121561171057600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561175657611756611717565b604052919050565b600082601f83011261176f57600080fd5b813567ffffffffffffffff81111561178957611789611717565b61179c601f8201601f191660200161172d565b8181528460208386010111156117b157600080fd5b816020850160208301376000918101602001919091529392505050565b6000806000606084860312156117e357600080fd5b833567ffffffffffffffff8111156117fa57600080fd5b6118068682870161175e565b93505060208401359150604084013561181e816115fa565b809150509250925092565b6000806040838503121561183c57600080fd5b823567ffffffffffffffff81111561185357600080fd5b61185f8582860161175e565b95602094909401359450505050565b60008060006060848603121561188357600080fd5b833592506020840135611895816115fa565b915060408401356bffffffffffffffffffffffff8116811461181e57600080fd5b600080600080604085870312156118cc57600080fd5b843567ffffffffffffffff808211156118e457600080fd5b6118f08883890161162f565b9096509450602087013591508082111561190957600080fd5b506119168782880161162f565b95989497509550505050565b600081518084526020808501945080840160005b8381101561195257815187529582019590820190600101611936565b509495945050505050565b602081526000610b6a6020830184611922565b600060208083528351808285015260005b8181101561199d57858101830151858201604001528201611981565b506000604082860101526040601f19601f8301168501019250505092915050565b6000602082840312156119d057600080fd5b813567ffffffffffffffff8111156119e757600080fd5b6119f38482850161175e565b949350505050565b6020808252600b908201526a1cda1bdc0818db1bdcd95960aa1b604082015260600190565b6001600160a01b03929092168252602082015260400190565b600060208284031215611a4b57600080fd5b5051919050565b6020808252600990820152683737ba1037bbb732b960b91b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b803563ffffffff811681146112b657600080fd5b600060208284031215611ab157600080fd5b610b6a82611a8b565b634e487b7160e01b600052601160045260246000fd5b80820180821115611ae357611ae3611aba565b92915050565b600060018201611afb57611afb611aba565b5060010190565b6001600160a01b0386168152606060208083018290529082018590526000906001600160fb1b03861115611b3557600080fd5b8560051b808860808601378301838103608090810160408601528101859052859060009060a0015b86821015611b885763ffffffff611b7384611a8b565b16815291830191600191909101908301611b5d565b9a9950505050505050505050565b600181811c90821680611baa57607f821691505b602082108103610b8957634e487b7160e01b600052602260045260246000fd5b601f82111561085557600081815260208120601f850160051c81016020861015611bf15750805b601f850160051c820191505b81811015611c1057828155600101611bfd565b505050505050565b815167ffffffffffffffff811115611c3257611c32611717565b611c4681611c408454611b96565b84611bca565b602080601f831160018114611c7b5760008415611c635750858301515b600019600386901b1c1916600185901b178555611c10565b600085815260208120601f198616915b82811015611caa57888601518255948401946001909101908401611c8b565b5085821015611cc85787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b63ffffffff828116828216039080821115611cf557611cf5611aba565b5092915050565b63ffffffff818116838216019080821115611cf557611cf5611aba565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b604081526000611d556040830186611922565b602083820381850152818583528183019050818660051b8401018760005b88811015611de357858303601f190184528135368b9003601e19018112611d9957600080fd5b8a01858101903567ffffffffffffffff811115611db557600080fd5b803603821315611dc457600080fd5b611dcf858284611d19565b958701959450505090840190600101611d73565b50909998505050505050505050565b81810381811115611ae357611ae3611aba565b634e487b7160e01b600052600160045260246000fd5b60006020808385031215611e2e57600080fd5b825167ffffffffffffffff80821115611e4657600080fd5b818501915085601f830112611e5a57600080fd5b815181811115611e6c57611e6c611717565b8060051b9150611e7d84830161172d565b8181529183018401918481019088841115611e9757600080fd5b938501935b83851015611eb557845182529385019390850190611e9c565b9897505050505050505056fea2646970667358221220413c6c0db9bfe59b8a11fc95c910973d9558db9f652b65fdd2e246fa17a3197264736f6c63430008110033a264697066735822122032dd8a61e2d7caa26c127b0bc117d023d10557402ad2406b7525e91f1e449fc664736f6c6343000811003360806040523480156200001157600080fd5b5060405162002d9238038062002d928339810160408190526200003491620000a4565b6040805160208101909152600081526200004e8162000089565b50600680546001600160a01b0319166001600160a01b0383161790556200008260056200009b602090811b62000ec217901c565b5062000247565b60026200009782826200017b565b5050565b80546001019055565b600060208284031215620000b757600080fd5b81516001600160a01b0381168114620000cf57600080fd5b9392505050565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200010157607f821691505b6020821081036200012257634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200017657600081815260208120601f850160051c81016020861015620001515750805b601f850160051c820191505b8181101562000172578281556001016200015d565b5050505b505050565b81516001600160401b03811115620001975762000197620000d6565b620001af81620001a88454620000ec565b8462000128565b602080601f831160018114620001e75760008415620001ce5750858301515b600019600386901b1c1916600185901b17855562000172565b600085815260208120601f198616915b828110156200021857888601518255948401946001909101908401620001f7565b5085821015620002375787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b612b3b80620002576000396000f3fe608060405234801561001057600080fd5b50600436106101155760003560e01c80636b20c454116100a2578063b491160511610071578063b491160514610265578063e985e9c514610278578063f242432a146102b4578063f5298aca146102c7578063ffef7606146102da57600080fd5b80636b20c454146102195780638a5f671b1461022c578063a22cb4651461023f578063af95e8051461025257600080fd5b80632a55205a116100e95780632a55205a1461018c5780632eb2c2d6146101be5780634e1273f4146101d35780635944c753146101f35780635d073fc51461020657600080fd5b8062fdd58e1461011a57806301ffc9a7146101405780630e89341c14610163578063279c3b4e14610183575b600080fd5b61012d610128366004611bce565b6102ed565b6040519081526020015b60405180910390f35b61015361014e366004611c11565b610386565b6040519015158152602001610137565b610176610171366004611c35565b6103a0565b6040516101379190611c94565b61012d60001981565b61019f61019a366004611ca7565b610442565b604080516001600160a01b039093168352602083019190915201610137565b6101d16101cc366004611e1c565b6104f0565b005b6101e66101e1366004611ec5565b61053c565b6040516101379190611fca565b6101d1610201366004611fdd565b610665565b6101d161021436600461206d565b6106fd565b6101d16102273660046120ed565b61098d565b6101d161023a366004612160565b6109d0565b6101d161024d366004612267565b610be2565b6101e661026036600461229e565b610bf1565b61012d6102733660046122c1565b610d2c565b610153610286366004612343565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b6101d16102c2366004612376565b610db2565b6101d16102d53660046123da565b610df7565b6101d16102e83660046123da565b610e3a565b60006001600160a01b03831661035d5760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201526930b634b21037bbb732b960b11b60648201526084015b60405180910390fd5b506000818152602081815260408083206001600160a01b03861684529091529020545b92915050565b600061039182610ecb565b80610380575061038082610f1b565b60008181526007602052604090208054606091906103bd9061240d565b80601f01602080910402602001604051908101604052809291908181526020018280546103e99061240d565b80156104365780601f1061040b57610100808354040283529160200191610436565b820191906000526020600020905b81548152906001019060200180831161041957829003601f168201915b50505050509050919050565b60008281526004602090815260408083208151808301909252546001600160a01b038116808352600160a01b9091046001600160601b03169282019290925282916104b75750604080518082019091526003546001600160a01b0381168252600160a01b90046001600160601b031660208201525b6020810151600090612710906104d6906001600160601b03168761245d565b6104e09190612474565b91519350909150505b9250929050565b6001600160a01b03851633148061050c575061050c8533610286565b6105285760405162461bcd60e51b815260040161035490612496565b6105358585858585610f40565b5050505050565b606081518351146105a15760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b6064820152608401610354565b600083516001600160401b038111156105bc576105bc611cc9565b6040519080825280602002602001820160405280156105e5578160200160208202803683370190505b50905060005b845181101561065d57610630858281518110610609576106096124e4565b6020026020010151858381518110610623576106236124e4565b60200260200101516102ed565b828281518110610642576106426124e4565b6020908102919091010152610656816124fa565b90506105eb565b509392505050565b60065460405163d2b50a3b60e01b81523360048201526001600160a01b039091169063d2b50a3b90602401602060405180830381865afa1580156106ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d19190612513565b6106ed5760405162461bcd60e51b815260040161035490612530565b6106f88383836110dc565b505050565b60065460405163d2b50a3b60e01b81523360048201526001600160a01b039091169063d2b50a3b90602401602060405180830381865afa158015610745573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107699190612513565b6107855760405162461bcd60e51b815260040161035490612530565b8281146107c45760405162461bcd60e51b815260206004820152600d60248201526c1a5b9d985b1a59081a5b9c1d5d609a1b6044820152606401610354565b60005b838110156108df576000600760008787858181106107e7576107e76124e4565b90506020020135815260200190815260200160002080546108079061240d565b80601f01602080910402602001604051908101604052809291908181526020018280546108339061240d565b80156108805780601f1061085557610100808354040283529160200191610880565b820191906000526020600020905b81548152906001019060200180831161086357829003601f168201915b5050505050905060008151116108cc5760405162461bcd60e51b81526020600482015260116024820152706e6f6e206578697374696e67206974656d60781b6044820152606401610354565b50806108d7816124fa565b9150506107c7565b506109398585858080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061092492508791508690506111ea565b60405180602001604052806000815250611299565b336001600160a01b0316856001600160a01b03167fe1c0970685abcf73b8059c2ccfd130fa4bcbfec8017f92caea459eab09dee10a868660405161097e929190612555565b60405180910390a35050505050565b6001600160a01b0383163314806109a957506109a98333610286565b6109c55760405162461bcd60e51b815260040161035490612496565b6106f88383836113e4565b60065460405163d2b50a3b60e01b81523360048201526001600160a01b039091169063d2b50a3b90602401602060405180830381865afa158015610a18573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a3c9190612513565b610a585760405162461bcd60e51b815260040161035490612530565b80518214610a985760405162461bcd60e51b815260206004820152600d60248201526c1a5b9d985b1a59081a5b9c1d5d609a1b6044820152606401610354565b60005b8151811015610bdc576000828281518110610ab857610ab86124e4565b602002602001015190506000815111610aff5760405162461bcd60e51b815260206004820152600960248201526875726920656d70747960b81b6044820152606401610354565b600060076000878786818110610b1757610b176124e4565b9050602002013581526020019081526020016000209050808054610b3a9061240d565b159050610b755760405162461bcd60e51b81526020600482015260096024820152681cdb1bdd081d5cd95960ba1b6044820152606401610354565b838381518110610b8757610b876124e4565b602002602001015160076000888887818110610ba557610ba56124e4565b9050602002013581526020019081526020016000209081610bc691906125d4565b5050508080610bd4906124fa565b915050610a9b565b50505050565b610bed33838361156e565b5050565b60065460405163d2b50a3b60e01b81523360048201526060916001600160a01b03169063d2b50a3b90602401602060405180830381865afa158015610c3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c5e9190612513565b610c7a5760405162461bcd60e51b815260040161035490612530565b600a8260ff161115610c8b57600080fd5b60008260ff166001600160401b03811115610ca857610ca8611cc9565b604051908082528060200260200182016040528015610cd1578160200160208202803683370190505b50905060005b8360ff16811015610d2357600554828281518110610cf757610cf76124e4565b602002602001018181525050610d11600580546001019055565b80610d1b816124fa565b915050610cd7565b5090505b919050565b6006546000906001600160a01b03163314610d595760405162461bcd60e51b815260040161035490612530565b6000610d6460055490565b9050610d74600580546001019055565b6000818152600760205260409020610d8d848683612693565b50610daa858260016040518060200160405280600081525061164e565b949350505050565b6001600160a01b038516331480610dce5750610dce8533610286565b610dea5760405162461bcd60e51b815260040161035490612496565b6105358585858585611728565b6001600160a01b038316331480610e135750610e138333610286565b610e2f5760405162461bcd60e51b815260040161035490612496565b6106f8838383611852565b60065460405163d2b50a3b60e01b81523360048201526001600160a01b039091169063d2b50a3b90602401602060405180830381865afa158015610e82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ea69190612513565b610e2f5760405162461bcd60e51b815260040161035490612530565b80546001019055565b60006001600160e01b03198216636cdb3d1360e11b1480610efc57506001600160e01b031982166303a24d0760e21b145b8061038057506301ffc9a760e01b6001600160e01b0319831614610380565b60006001600160e01b0319821663152a902d60e11b1480610380575061038082610ecb565b8151835114610f615760405162461bcd60e51b815260040161035490612752565b6001600160a01b038416610f875760405162461bcd60e51b81526004016103549061279a565b3360005b845181101561106e576000858281518110610fa857610fa86124e4565b602002602001015190506000858381518110610fc657610fc66124e4565b602090810291909101810151600084815280835260408082206001600160a01b038e1683529093529190912054909150818110156110165760405162461bcd60e51b8152600401610354906127df565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290611053908490612829565b9250508190555050505080611067906124fa565b9050610f8b565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516110be92919061283c565b60405180910390a46110d4818787878787611956565b505050505050565b6127106001600160601b038216111561114a5760405162461bcd60e51b815260206004820152602a60248201527f455243323938313a20726f79616c7479206665652077696c6c206578636565646044820152692073616c65507269636560b01b6064820152608401610354565b6001600160a01b0382166111a05760405162461bcd60e51b815260206004820152601b60248201527f455243323938313a20496e76616c696420706172616d657465727300000000006044820152606401610354565b6040805180820182526001600160a01b0393841681526001600160601b0392831660208083019182526000968752600490529190942093519051909116600160a01b029116179055565b60606000826001600160401b0381111561120657611206611cc9565b60405190808252806020026020018201604052801561122f578160200160208202803683370190505b50905060005b8381101561065d5784848281811061124f5761124f6124e4565b9050602002016020810190611264919061286a565b63ffffffff1682828151811061127c5761127c6124e4565b602090810291909101015280611291816124fa565b915050611235565b6001600160a01b0384166112bf5760405162461bcd60e51b815260040161035490612890565b81518351146112e05760405162461bcd60e51b815260040161035490612752565b3360005b845181101561137c578381815181106112ff576112ff6124e4565b602002602001015160008087848151811061131c5761131c6124e4565b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b0316815260200190815260200160002060008282546113649190612829565b90915550819050611374816124fa565b9150506112e4565b50846001600160a01b031660006001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516113cd92919061283c565b60405180910390a461053581600087878787611956565b6001600160a01b03831661140a5760405162461bcd60e51b8152600401610354906128d1565b805182511461142b5760405162461bcd60e51b815260040161035490612752565b604080516020810190915260009081905233905b835181101561150157600084828151811061145c5761145c6124e4565b60200260200101519050600084838151811061147a5761147a6124e4565b602090810291909101810151600084815280835260408082206001600160a01b038c1683529093529190912054909150818110156114ca5760405162461bcd60e51b815260040161035490612914565b6000928352602083815260408085206001600160a01b038b16865290915290922091039055806114f9816124fa565b91505061143f565b5060006001600160a01b0316846001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb868660405161155292919061283c565b60405180910390a4604080516020810190915260009052610bdc565b816001600160a01b0316836001600160a01b0316036115e15760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b6064820152608401610354565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b0384166116745760405162461bcd60e51b815260040161035490612890565b33600061168085611ab1565b9050600061168d85611ab1565b90506000868152602081815260408083206001600160a01b038b168452909152812080548792906116bf908490612829565b909155505060408051878152602081018790526001600160a01b03808a1692600092918716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a461171f83600089898989611afc565b50505050505050565b6001600160a01b03841661174e5760405162461bcd60e51b81526004016103549061279a565b33600061175a85611ab1565b9050600061176785611ab1565b90506000868152602081815260408083206001600160a01b038c168452909152902054858110156117aa5760405162461bcd60e51b8152600401610354906127df565b6000878152602081815260408083206001600160a01b038d8116855292528083208985039055908a168252812080548892906117e7908490612829565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4611847848a8a8a8a8a611afc565b505050505050505050565b6001600160a01b0383166118785760405162461bcd60e51b8152600401610354906128d1565b33600061188484611ab1565b9050600061189184611ab1565b60408051602080820183526000918290528882528181528282206001600160a01b038b16835290522054909150848110156118de5760405162461bcd60e51b815260040161035490612914565b6000868152602081815260408083206001600160a01b038b81168086529184528285208a8703905582518b81529384018a90529092908816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a460408051602081019091526000905261171f565b6001600160a01b0384163b156110d45760405163bc197c8160e01b81526001600160a01b0385169063bc197c819061199a9089908990889088908890600401612958565b6020604051808303816000875af19250505080156119d5575060408051601f3d908101601f191682019092526119d2918101906129b6565b60015b611a81576119e16129d3565b806308c379a003611a1a57506119f56129ef565b80611a005750611a1c565b8060405162461bcd60e51b81526004016103549190611c94565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e2d455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b6064820152608401610354565b6001600160e01b0319811663bc197c8160e01b1461171f5760405162461bcd60e51b815260040161035490612a78565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110611aeb57611aeb6124e4565b602090810291909101015292915050565b6001600160a01b0384163b156110d45760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190611b409089908990889088908890600401612ac0565b6020604051808303816000875af1925050508015611b7b575060408051601f3d908101601f19168201909252611b78918101906129b6565b60015b611b87576119e16129d3565b6001600160e01b0319811663f23a6e6160e01b1461171f5760405162461bcd60e51b815260040161035490612a78565b80356001600160a01b0381168114610d2757600080fd5b60008060408385031215611be157600080fd5b611bea83611bb7565b946020939093013593505050565b6001600160e01b031981168114611c0e57600080fd5b50565b600060208284031215611c2357600080fd5b8135611c2e81611bf8565b9392505050565b600060208284031215611c4757600080fd5b5035919050565b6000815180845260005b81811015611c7457602081850181015186830182015201611c58565b506000602082860101526020601f19601f83011685010191505092915050565b602081526000611c2e6020830184611c4e565b60008060408385031215611cba57600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b601f8201601f191681016001600160401b0381118282101715611d0457611d04611cc9565b6040525050565b60006001600160401b03821115611d2457611d24611cc9565b5060051b60200190565b600082601f830112611d3f57600080fd5b81356020611d4c82611d0b565b604051611d598282611cdf565b83815260059390931b8501820192828101915086841115611d7957600080fd5b8286015b84811015611d945780358352918301918301611d7d565b509695505050505050565b60006001600160401b03831115611db857611db8611cc9565b604051611dcf601f8501601f191660200182611cdf565b809150838152848484011115611de457600080fd5b83836020830137600060208583010152509392505050565b600082601f830112611e0d57600080fd5b611c2e83833560208501611d9f565b600080600080600060a08688031215611e3457600080fd5b611e3d86611bb7565b9450611e4b60208701611bb7565b935060408601356001600160401b0380821115611e6757600080fd5b611e7389838a01611d2e565b94506060880135915080821115611e8957600080fd5b611e9589838a01611d2e565b93506080880135915080821115611eab57600080fd5b50611eb888828901611dfc565b9150509295509295909350565b60008060408385031215611ed857600080fd5b82356001600160401b0380821115611eef57600080fd5b818501915085601f830112611f0357600080fd5b81356020611f1082611d0b565b604051611f1d8282611cdf565b83815260059390931b8501820192828101915089841115611f3d57600080fd5b948201945b83861015611f6257611f5386611bb7565b82529482019490820190611f42565b96505086013592505080821115611f7857600080fd5b50611f8585828601611d2e565b9150509250929050565b600081518084526020808501945080840160005b83811015611fbf57815187529582019590820190600101611fa3565b509495945050505050565b602081526000611c2e6020830184611f8f565b600080600060608486031215611ff257600080fd5b8335925061200260208501611bb7565b915060408401356001600160601b038116811461201e57600080fd5b809150509250925092565b60008083601f84011261203b57600080fd5b5081356001600160401b0381111561205257600080fd5b6020830191508360208260051b85010111156104e957600080fd5b60008060008060006060868803121561208557600080fd5b61208e86611bb7565b945060208601356001600160401b03808211156120aa57600080fd5b6120b689838a01612029565b909650945060408801359150808211156120cf57600080fd5b506120dc88828901612029565b969995985093965092949392505050565b60008060006060848603121561210257600080fd5b61210b84611bb7565b925060208401356001600160401b038082111561212757600080fd5b61213387838801611d2e565b9350604086013591508082111561214957600080fd5b5061215686828701611d2e565b9150509250925092565b6000806000604080858703121561217657600080fd5b84356001600160401b038082111561218d57600080fd5b61219988838901612029565b90965094506020915086820135818111156121b357600080fd5b8701601f810189136121c457600080fd5b80356121cf81611d0b565b85516121db8282611cdf565b82815260059290921b830185019185810191508b8311156121fb57600080fd5b8584015b83811015612247578035868111156122175760008081fd5b8501603f81018e136122295760008081fd5b6122398e898301358b8401611d9f565b8452509186019186016121ff565b50809750505050505050509250925092565b8015158114611c0e57600080fd5b6000806040838503121561227a57600080fd5b61228383611bb7565b9150602083013561229381612259565b809150509250929050565b6000602082840312156122b057600080fd5b813560ff81168114611c2e57600080fd5b6000806000604084860312156122d657600080fd5b6122df84611bb7565b925060208401356001600160401b03808211156122fb57600080fd5b818601915086601f83011261230f57600080fd5b81358181111561231e57600080fd5b87602082850101111561233057600080fd5b6020830194508093505050509250925092565b6000806040838503121561235657600080fd5b61235f83611bb7565b915061236d60208401611bb7565b90509250929050565b600080600080600060a0868803121561238e57600080fd5b61239786611bb7565b94506123a560208701611bb7565b9350604086013592506060860135915060808601356001600160401b038111156123ce57600080fd5b611eb888828901611dfc565b6000806000606084860312156123ef57600080fd5b6123f884611bb7565b95602085013595506040909401359392505050565b600181811c9082168061242157607f821691505b60208210810361244157634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761038057610380612447565b60008261249157634e487b7160e01b600052601260045260246000fd5b500490565b6020808252602e908201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60408201526d195c881bdc88185c1c1c9bdd995960921b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b60006001820161250c5761250c612447565b5060010190565b60006020828403121561252557600080fd5b8151611c2e81612259565b6020808252600b908201526a1b9bdd08185b1b1bddd95960aa1b604082015260600190565b6020808252810182905260006001600160fb1b0383111561257557600080fd5b8260051b80856040850137919091016040019392505050565b601f8211156106f857600081815260208120601f850160051c810160208610156125b55750805b601f850160051c820191505b818110156110d4578281556001016125c1565b81516001600160401b038111156125ed576125ed611cc9565b612601816125fb845461240d565b8461258e565b602080601f831160018114612636576000841561261e5750858301515b600019600386901b1c1916600185901b1785556110d4565b600085815260208120601f198616915b8281101561266557888601518255948401946001909101908401612646565b50858210156126835787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6001600160401b038311156126aa576126aa611cc9565b6126be836126b8835461240d565b8361258e565b6000601f8411600181146126f257600085156126da5750838201355b600019600387901b1c1916600186901b178355610535565b600083815260209020601f19861690835b828110156127235786850135825560209485019460019092019101612703565b50868210156127405760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b60208082526028908201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206040820152670dad2e6dac2e8c6d60c31b606082015260800190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b8082018082111561038057610380612447565b60408152600061284f6040830185611f8f565b82810360208401526128618185611f8f565b95945050505050565b60006020828403121561287c57600080fd5b813563ffffffff81168114611c2e57600080fd5b60208082526021908201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736040820152607360f81b606082015260800190565b60208082526023908201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260408201526265737360e81b606082015260800190565b60208082526024908201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604082015263616e636560e01b606082015260800190565b6001600160a01b0386811682528516602082015260a06040820181905260009061298490830186611f8f565b82810360608401526129968186611f8f565b905082810360808401526129aa8185611c4e565b98975050505050505050565b6000602082840312156129c857600080fd5b8151611c2e81611bf8565b600060033d11156129ec5760046000803e5060005160e01c5b90565b600060443d10156129fd5790565b6040516003193d81016004833e81513d6001600160401b038160248401118184111715612a2c57505050505090565b8285019150815181811115612a445750505050505090565b843d8701016020828501011115612a5e5750505050505090565b612a6d60208286010187611cdf565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090612afa90830184611c4e565b97965050505050505056fea26469706673582212205aeedf086566834636355f09d7f73c06aaa6f894323a3dba893233f7b6c4f90f64736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c806308514a41146100465780639e42780b1461008a578063d2b50a3b1461009d575b600080fd5b61006d7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b61006d61009836600461035b565b6100d9565b6100c96100ab3660046103f9565b6001600160a01b031660009081526020819052604090205460ff1690565b6040519015158152602001610081565b6040516bffffffffffffffffffffffff19606089901b166020820152603481018290526000908190605401604051602081830303815290604052805190602001209050600081897f000000000000000000000000000000000000000000000000000000000000000060405161014d906102ed565b6001600160a01b039283168152911660208201526040018190604051809103906000f5905080158015610184573d6000803e3d6000fd5b506001600160a01b03808216600090815260208190526040808220805460ff191660011790555163b491160560e01b8152929350917f00000000000000000000000000000000000000000000000000000000000000009091169063b4911605906101f6908e908b908b90600401610446565b6020604051808303816000875af1158015610215573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102399190610474565b9050816001600160a01b0316634f3bddeb8a8a848f6040518563ffffffff1660e01b815260040161026d949392919061048d565b600060405180830381600087803b15801561028757600080fd5b505af115801561029b573d6000803e3d6000fd5b50506040516001600160a01b0385811682528e1692507f587ece4cd19692c5be1a4184503d607d45542d2aca0698c0068f52e09ccb541c915060200160405180910390a2509998505050505050505050565b6120e1806104c383390190565b6001600160a01b038116811461030f57600080fd5b50565b60008083601f84011261032457600080fd5b50813567ffffffffffffffff81111561033c57600080fd5b60208301915083602082850101111561035457600080fd5b9250929050565b600080600080600080600060a0888a03121561037657600080fd5b8735610381816102fa565b96506020880135610391816102fa565b9550604088013567ffffffffffffffff808211156103ae57600080fd5b6103ba8b838c01610312565b909750955060608a01359150808211156103d357600080fd5b506103e08a828b01610312565b989b979a50959894979596608090950135949350505050565b60006020828403121561040b57600080fd5b8135610416816102fa565b9392505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6001600160a01b038416815260406020820181905260009061046b908301848661041d565b95945050505050565b60006020828403121561048657600080fd5b5051919050565b6060815260006104a160608301868861041d565b6020830194909452506001600160a01b03919091166040909101529291505056fe600560a08181526101606040529060c08280368337505081516200002b9260049250602001906200009f565b506006805460ff19166001179055600780546001600160a01b03191690553480156200005657600080fd5b50604051620020e1380380620020e183398101604081905262000079916200011f565b600180546001600160a01b0319166001600160a01b03938416179055166080526200015e565b828054828255906000526020600020908101928215620000dd579160200282015b82811115620000dd578251825591602001919060010190620000c0565b50620000eb929150620000ef565b5090565b5b80821115620000eb5760008155600101620000f0565b6001600160a01b03811681146200011c57600080fd5b50565b600080604083850312156200013357600080fd5b8251620001408162000106565b6020840151909250620001538162000106565b809150509250929050565b608051611ef7620001ea600039600081816102010152818161037f0152818161059f0152818161065101528181610724015281816108960152818161095501528181610a2101528181610aea01528181610bcb01528181610cc101528181610fdb015281816110cc015281816111880152818161123d015281816113d801526115260152611ef76000f3fe608060405234801561001057600080fd5b506004361061014d5760003560e01c80637c5b3d9a116100c3578063b7d1c5a31161007c578063b7d1c5a3146102bc578063bdc441b2146102d1578063c3f909d4146102f4578063d07547f514610309578063d11db0101461031f578063dd8130031461033257600080fd5b80637c5b3d9a1461025d57806384b5535614610265578063882b02071461026d5780638d1946941461027e5780639b6dbc8a14610291578063ae5d95751461029957600080fd5b806353c6b20f1161011557806353c6b20f146101b35780635944c753146101c657806361b36d8d146101d957806365e17540146101ff57806365ebf99a1461023957806373fa4e6e1461024c57600080fd5b8063088b0d75146101525780632296070c1461016757806324573ec51461017a57806342a030951461018d5780634f3bddeb146101a0575b600080fd5b610165610160366004611612565b61033a565b005b61016561017536600461167b565b610433565b6101656101883660046116fe565b610615565b61016561019b366004611612565b6106e8565b6101656101ae3660046117ce565b6107d8565b6101656101c1366004611829565b61085a565b6101656101d436600461186e565b61093b565b6101ec6101e73660046116fe565b610a82565b6040519081526020015b60405180910390f35b7f00000000000000000000000000000000000000000000000000000000000000005b6040516001600160a01b0390911681526020016101f6565b610165610247366004611612565b610b8f565b6007546001600160a01b0316610221565b6002546101ec565b6000546101ec565b6001546001600160a01b0316610221565b61016561028c3660046118b6565b610c85565b610165611090565b6102ac6102a7366004611612565b6111fe565b60405190151581526020016101f6565b6102c46112bb565b6040516101f6919061195d565b6101ec6102df3660046116fe565b60009081526005602052604090206001015490565b6102fc611313565b6040516101f69190611970565b60065461010090046001600160a01b0316610221565b61016561032d3660046119be565b61139c565b610221600081565b60065460ff166103655760405162461bcd60e51b815260040161035c906119fb565b60405180910390fd5b60008054604051627eeac760e11b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169162fdd58e916103b3913391600401611a20565b602060405180830381865afa1580156103d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103f49190611a39565b116104115760405162461bcd60e51b815260040161035c90611a52565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b60065460ff166104555760405162461bcd60e51b815260040161035c906119fb565b6001546001600160a01b031633146104a05760405162461bcd60e51b815260206004820152600e60248201526d37b7363c90383937b1b2b9b9b7b960911b604482015260640161035c565b8281146104ac57600080fd5b60005b81811015610587576105058383838181106104cc576104cc611a75565b905060200201358686848181106104e5576104e5611a75565b90506020020160208101906104fa9190611a9f565b63ffffffff1661147a565b84848281811061051757610517611a75565b905060200201602081019061052c9190611a9f565b63ffffffff166005600085858581811061054857610548611a75565b905060200201358152602001908152602001600020600101600082825461056f9190611ad0565b9091555081905061057f81611ae9565b9150506104af565b50604051635d073fc560e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690635d073fc5906105dc908890869086908a908a90600401611b02565b600060405180830381600087803b1580156105f657600080fd5b505af115801561060a573d6000803e3d6000fd5b505050505050505050565b60065460ff166106375760405162461bcd60e51b815260040161035c906119fb565b60008054604051627eeac760e11b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169162fdd58e91610685913391600401611a20565b602060405180830381865afa1580156106a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c69190611a39565b116106e35760405162461bcd60e51b815260040161035c90611a52565b600255565b60065460ff1661070a5760405162461bcd60e51b815260040161035c906119fb565b60008054604051627eeac760e11b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169162fdd58e91610758913391600401611a20565b602060405180830381865afa158015610775573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107999190611a39565b116107b65760405162461bcd60e51b815260040161035c90611a52565b600780546001600160a01b0319166001600160a01b0392909216919091179055565b600054156108195760405162461bcd60e51b815260206004820152600e60248201526d185b1c9958591e4818d85b1b195960921b604482015260640161035c565b6000829055600361082a8482611c18565b5060068054610100600160a81b0319166101006001600160a01b0384160217905561085560056114e8565b505050565b60065460ff1661087c5760405162461bcd60e51b815260040161035c906119fb565b60008054604051627eeac760e11b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169162fdd58e916108ca913391600401611a20565b602060405180830381865afa1580156108e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061090b9190611a39565b116109285760405162461bcd60e51b815260040161035c90611a52565b60036109348382611c18565b5060025550565b60008054604051627eeac760e11b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169162fdd58e91610989913391600401611a20565b602060405180830381865afa1580156109a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ca9190611a39565b116109e75760405162461bcd60e51b815260040161035c90611a52565b604051635944c75360e01b8152600481018490526001600160a01b0383811660248301526bffffffffffffffffffffffff831660448301527f00000000000000000000000000000000000000000000000000000000000000001690635944c75390606401600060405180830381600087803b158015610a6557600080fd5b505af1158015610a79573d6000803e3d6000fd5b50505050505050565b60008181526005602052604081205463ffffffff16808203610ada5760405162461bcd60e51b81526020600482015260116024820152701a5d195b48191bd95cdb9d08195e1a5cdd607a1b604482015260640161035c565b8063ffffffff16600103610b71577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663279c3b4e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b6a9190611a39565b9392505050565b610b7c600182611cd8565b63ffffffff169392505050565b50919050565b60065460ff16610bb15760405162461bcd60e51b815260040161035c906119fb565b60008054604051627eeac760e11b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169162fdd58e91610bff913391600401611a20565b602060405180830381865afa158015610c1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c409190611a39565b11610c5d5760405162461bcd60e51b815260040161035c90611a52565b600680546001600160a01b0390921661010002610100600160a81b0319909216919091179055565b60065460ff16610ca75760405162461bcd60e51b815260040161035c906119fb565b60008054604051627eeac760e11b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169162fdd58e91610cf5913391600401611a20565b602060405180830381865afa158015610d12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d369190611a39565b11610d535760405162461bcd60e51b815260040161035c90611a52565b60058311801590610d6357508215155b610da35760405162461bcd60e51b81526020600482015260116024820152701a5b9d985b1a59081d5c9a4818dbdd5b9d607a1b604482015260640161035c565b828114610de65760405162461bcd60e51b81526020600482015260116024820152701a5b9d985b1a59081d5c9a4818dbdd5b9d607a1b604482015260640161035c565b60008367ffffffffffffffff811115610e0157610e01611717565b604051908082528060200260200182016040528015610e2a578160200160208202803683370190505b50905060005b84811015610fc357600060048281548110610e4d57610e4d611a75565b906000526020600020015490506000548103610ea05760405162461bcd60e51b8152602060048201526012602482015271199bdc989a5919195b881bdddb995c881a5960721b604482015260640161035c565b80838381518110610eb357610eb3611a75565b6020026020010181815250506000858584818110610ed357610ed3611a75565b9050602002016020810190610ee89190611a9f565b63ffffffff161115610f71576040518060400160405280868685818110610f1157610f11611a75565b9050602002016020810190610f269190611a9f565b610f31906001611cfc565b63ffffffff90811682526000602092830181905284815260058352604090208351815463ffffffff19169216919091178155910151600190910155610fb0565b60408051808201825260018082526000602080840182815286835260059091529390209151825463ffffffff191663ffffffff90911617825591519101555b5080610fbb81611ae9565b915050610e30565b50604051638a5f671b60e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690638a5f671b9061101490849089908990600401611d42565b600060405180830381600087803b15801561102e57600080fd5b505af1158015611042573d6000803e3d6000fd5b50505050611052858590506114e8565b7f77117b91fef75999c9c1a5a4358e2afe8341539b1cbb59ff530c6078440e700381604051611081919061195d565b60405180910390a15050505050565b60065460ff166110b25760405162461bcd60e51b815260040161035c906119fb565b60008054604051627eeac760e11b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169162fdd58e91611100913391600401611a20565b602060405180830381865afa15801561111d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111419190611a39565b1161115e5760405162461bcd60e51b815260040161035c90611a52565b6000546040516001620844fd60e11b031981523360048201526024810191909152600160448201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063ffef760690606401600060405180830381600087803b1580156111d457600080fd5b505af11580156111e8573d6000803e3d6000fd5b5050600680546001600160a81b03191690555050565b60065460009060ff166112235760405162461bcd60e51b815260040161035c906119fb565b60008054604051627eeac760e11b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169162fdd58e91611271918791600401611a20565b602060405180830381865afa15801561128e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112b29190611a39565b1190505b919050565b6060600480548060200260200160405190810160405280929190818152602001828054801561130957602002820191906000526020600020905b8154815260200190600101908083116112f5575b5050505050905090565b60606003805461132290611b96565b80601f016020809104026020016040519081016040528092919081815260200182805461134e90611b96565b80156113095780601f1061137057610100808354040283529160200191611309565b820191906000526020600020905b81548152906001019060200180831161137e57509395945050505050565b60065460ff166113be5760405162461bcd60e51b815260040161035c906119fb565b60008054604051627eeac760e11b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169162fdd58e9161140c913391600401611a20565b602060405180830381865afa158015611429573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061144d9190611a39565b1161146a5760405162461bcd60e51b815260040161035c90611a52565b60036114768282611c18565b5050565b600061148583610a82565b600084815260056020526040812060010154919250906114a59083611df2565b9050828110156114e25760405162461bcd60e51b81526020600482015260086024820152671cdbdb19081bdd5d60c21b604482015260640161035c565b50505050565b60008160ff161180156114ff575060058160ff1611155b61150b5761150b611e05565b60405163af95e80560e01b815260ff821660048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063af95e805906024016000604051808303816000875af1158015611577573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261159f9190810190611e1b565b905060005b8260ff16811015610855578181815181106115c1576115c1611a75565b6020026020010151600482815481106115dc576115dc611a75565b600091825260209091200155806115f281611ae9565b9150506115a4565b6001600160a01b038116811461160f57600080fd5b50565b60006020828403121561162457600080fd5b8135610b6a816115fa565b60008083601f84011261164157600080fd5b50813567ffffffffffffffff81111561165957600080fd5b6020830191508360208260051b850101111561167457600080fd5b9250929050565b60008060008060006060868803121561169357600080fd5b853561169e816115fa565b9450602086013567ffffffffffffffff808211156116bb57600080fd5b6116c789838a0161162f565b909650945060408801359150808211156116e057600080fd5b506116ed8882890161162f565b969995985093965092949392505050565b60006020828403121561171057600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561175657611756611717565b604052919050565b600082601f83011261176f57600080fd5b813567ffffffffffffffff81111561178957611789611717565b61179c601f8201601f191660200161172d565b8181528460208386010111156117b157600080fd5b816020850160208301376000918101602001919091529392505050565b6000806000606084860312156117e357600080fd5b833567ffffffffffffffff8111156117fa57600080fd5b6118068682870161175e565b93505060208401359150604084013561181e816115fa565b809150509250925092565b6000806040838503121561183c57600080fd5b823567ffffffffffffffff81111561185357600080fd5b61185f8582860161175e565b95602094909401359450505050565b60008060006060848603121561188357600080fd5b833592506020840135611895816115fa565b915060408401356bffffffffffffffffffffffff8116811461181e57600080fd5b600080600080604085870312156118cc57600080fd5b843567ffffffffffffffff808211156118e457600080fd5b6118f08883890161162f565b9096509450602087013591508082111561190957600080fd5b506119168782880161162f565b95989497509550505050565b600081518084526020808501945080840160005b8381101561195257815187529582019590820190600101611936565b509495945050505050565b602081526000610b6a6020830184611922565b600060208083528351808285015260005b8181101561199d57858101830151858201604001528201611981565b506000604082860101526040601f19601f8301168501019250505092915050565b6000602082840312156119d057600080fd5b813567ffffffffffffffff8111156119e757600080fd5b6119f38482850161175e565b949350505050565b6020808252600b908201526a1cda1bdc0818db1bdcd95960aa1b604082015260600190565b6001600160a01b03929092168252602082015260400190565b600060208284031215611a4b57600080fd5b5051919050565b6020808252600990820152683737ba1037bbb732b960b91b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b803563ffffffff811681146112b657600080fd5b600060208284031215611ab157600080fd5b610b6a82611a8b565b634e487b7160e01b600052601160045260246000fd5b80820180821115611ae357611ae3611aba565b92915050565b600060018201611afb57611afb611aba565b5060010190565b6001600160a01b0386168152606060208083018290529082018590526000906001600160fb1b03861115611b3557600080fd5b8560051b808860808601378301838103608090810160408601528101859052859060009060a0015b86821015611b885763ffffffff611b7384611a8b565b16815291830191600191909101908301611b5d565b9a9950505050505050505050565b600181811c90821680611baa57607f821691505b602082108103610b8957634e487b7160e01b600052602260045260246000fd5b601f82111561085557600081815260208120601f850160051c81016020861015611bf15750805b601f850160051c820191505b81811015611c1057828155600101611bfd565b505050505050565b815167ffffffffffffffff811115611c3257611c32611717565b611c4681611c408454611b96565b84611bca565b602080601f831160018114611c7b5760008415611c635750858301515b600019600386901b1c1916600185901b178555611c10565b600085815260208120601f198616915b82811015611caa57888601518255948401946001909101908401611c8b565b5085821015611cc85787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b63ffffffff828116828216039080821115611cf557611cf5611aba565b5092915050565b63ffffffff818116838216019080821115611cf557611cf5611aba565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b604081526000611d556040830186611922565b602083820381850152818583528183019050818660051b8401018760005b88811015611de357858303601f190184528135368b9003601e19018112611d9957600080fd5b8a01858101903567ffffffffffffffff811115611db557600080fd5b803603821315611dc457600080fd5b611dcf858284611d19565b958701959450505090840190600101611d73565b50909998505050505050505050565b81810381811115611ae357611ae3611aba565b634e487b7160e01b600052600160045260246000fd5b60006020808385031215611e2e57600080fd5b825167ffffffffffffffff80821115611e4657600080fd5b818501915085601f830112611e5a57600080fd5b815181811115611e6c57611e6c611717565b8060051b9150611e7d84830161172d565b8181529183018401918481019088841115611e9757600080fd5b938501935b83851015611eb557845182529385019390850190611e9c565b9897505050505050505056fea2646970667358221220413c6c0db9bfe59b8a11fc95c910973d9558db9f652b65fdd2e246fa17a3197264736f6c63430008110033a264697066735822122032dd8a61e2d7caa26c127b0bc117d023d10557402ad2406b7525e91f1e449fc664736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "This factory builds your shops and also registers the new shops to be used with the shop item registry.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4735,
        "contract": "contracts/W3ShopFactory.sol:W3ShopFactory",
        "label": "registeredShop",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}